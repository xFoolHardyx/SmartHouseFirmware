ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 1


   1              		.file	"tasks.c"
   2              	@ GNU C (GCC) version 4.3.3 (arm-elf)
   3              	@	compiled by GNU C version 3.4.5 (mingw special), GMP version 4.2.2, MPFR version 2.3.1.
   4              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	@ options passed:  -I . -IINC/ -IINC/RTOS/ -imultilib interwork -iprefix
   6              	@ d:\programy\mikrokontrolery\arm\yagarto\bin\../lib/gcc/arm-elf/4.3.3/ -MD
   7              	@ SRC/RTOS/tasks.d -MF .dep/tasks.o.d -MP -MQ SRC/RTOS/tasks.o
   8              	@ -D__USES_INITFINI__ SRC/RTOS/tasks.c -mcpu=arm7tdmi -mthumb-interwork
   9              	@ -auxbase-strip SRC/RTOS/tasks.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  10              	@ -fomit-frame-pointer -fverbose-asm
  11              	@ options enabled:  -falign-loops -fargument-alias -fauto-inc-dec
  12              	@ -fbranch-count-reg -fcommon -fearly-inlining
  13              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fident -fivopts
  14              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  15              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  16              	@ -fpeephole -freg-struct-return -fsched-interblock -fsched-spec
  17              	@ -fsched-stalled-insns-dep -fsigned-zeros -fsplit-ivs-in-unroller
  18              	@ -ftoplevel-reorder -ftrapping-math -ftree-cselim -ftree-loop-im
  19              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  20              	@ -ftree-reassoc -ftree-scev-cprop -ftree-vect-loop-version -fverbose-asm
  21              	@ -fzero-initialized-in-bss -mlittle-endian -msched-prolog
  22              	@ -mthumb-interwork
  23              	
  24              		.section	.debug_abbrev,"",%progbits
  25              	.Ldebug_abbrev0:
  26              		.section	.debug_info,"",%progbits
  27              	.Ldebug_info0:
  28              		.section	.debug_line,"",%progbits
  29              	.Ldebug_line0:
  30 0000 83020000 		.text
  30      02006100 
  30      00000201 
  30      FB0E0D00 
  30      01010101 
  31              	.Ltext0:
  32              	@ Compiler executable checksum: aefe8b2555dadc8858779d7450a1d1fb
  33              	
  34              		.global	pxCurrentTCB
  35              		.bss
  36              		.align	2
  37              		.type	pxCurrentTCB, %object
  38              		.size	pxCurrentTCB, 4
  39              	pxCurrentTCB:
  40 0000 00000000 		.space	4
  41              		.align	2
  42              	uxTasksDeleted:
  43 0004 00000000 		.space	4
  44              		.align	2
  45              	uxCurrentNumberOfTasks:
  46 0008 00000000 		.space	4
  47              		.align	2
  48              	xTickCount:
  49 000c 00000000 		.space	4
  50              		.align	2
  51              	uxTopUsedPriority:
  52 0010 00000000 		.space	4
  53              		.align	2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 2


  54              	uxTopReadyPriority:
  55 0014 00000000 		.space	4
  56              		.align	2
  57              	xSchedulerRunning:
  58 0018 00000000 		.space	4
  59              		.align	2
  60              	uxSchedulerSuspended:
  61 001c 00000000 		.space	4
  62              		.align	2
  63              	uxMissedTicks:
  64 0020 00000000 		.space	4
  65              		.align	2
  66              	xMissedYield:
  67 0024 00000000 		.space	4
  68              		.align	2
  69              	xNumOfOverflows:
  70 0028 00000000 		.space	4
  71              		.align	2
  72              	uxTaskNumber:
  73 002c 00000000 		.space	4
  74              		.align	2
  75              	xTracing:
  76 0030 00000000 		.space	4
  77              		.data
  78              		.align	2
  79              		.type	uxPreviousTask, %object
  80              		.size	uxPreviousTask, 4
  81              	uxPreviousTask:
  82 0000 FF000000 		.word	255
  83              		.text
  84              		.align	2
  85              		.global	xTaskGenericCreate
  86              		.type	xTaskGenericCreate, %function
  87              	xTaskGenericCreate:
  88              	.LFB2:
  89              		.file 1 "SRC/RTOS/tasks.c"
   1:SRC/RTOS/tasks.c **** /*
   2:SRC/RTOS/tasks.c ****     FreeRTOS V6.0.2 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:SRC/RTOS/tasks.c **** 
   4:SRC/RTOS/tasks.c ****     ***************************************************************************
   5:SRC/RTOS/tasks.c ****     *                                                                         *
   6:SRC/RTOS/tasks.c ****     * If you are:                                                             *
   7:SRC/RTOS/tasks.c ****     *                                                                         *
   8:SRC/RTOS/tasks.c ****     *    + New to FreeRTOS,                                                   *
   9:SRC/RTOS/tasks.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:SRC/RTOS/tasks.c ****     *    + Looking for basic training,                                        *
  11:SRC/RTOS/tasks.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:SRC/RTOS/tasks.c ****     *                                                                         *
  13:SRC/RTOS/tasks.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:SRC/RTOS/tasks.c ****     *                                                                         *
  15:SRC/RTOS/tasks.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:SRC/RTOS/tasks.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:SRC/RTOS/tasks.c ****     *                                                                         *
  18:SRC/RTOS/tasks.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:SRC/RTOS/tasks.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:SRC/RTOS/tasks.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:SRC/RTOS/tasks.c ****     * exceptional circumstances).  Thank you for your support!                *
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 3


  22:SRC/RTOS/tasks.c ****     *                                                                         *
  23:SRC/RTOS/tasks.c ****     ***************************************************************************
  24:SRC/RTOS/tasks.c **** 
  25:SRC/RTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:SRC/RTOS/tasks.c **** 
  27:SRC/RTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:SRC/RTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:SRC/RTOS/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:SRC/RTOS/tasks.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:SRC/RTOS/tasks.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:SRC/RTOS/tasks.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:SRC/RTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:SRC/RTOS/tasks.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:SRC/RTOS/tasks.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:SRC/RTOS/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:SRC/RTOS/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:SRC/RTOS/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:SRC/RTOS/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:SRC/RTOS/tasks.c ****     FreeRTOS WEB site.
  41:SRC/RTOS/tasks.c **** 
  42:SRC/RTOS/tasks.c ****     1 tab == 4 spaces!
  43:SRC/RTOS/tasks.c **** 
  44:SRC/RTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:SRC/RTOS/tasks.c ****     contact details.
  46:SRC/RTOS/tasks.c **** 
  47:SRC/RTOS/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:SRC/RTOS/tasks.c ****     critical systems.
  49:SRC/RTOS/tasks.c **** 
  50:SRC/RTOS/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:SRC/RTOS/tasks.c ****     licensing and training services.
  52:SRC/RTOS/tasks.c **** */
  53:SRC/RTOS/tasks.c **** 
  54:SRC/RTOS/tasks.c **** 
  55:SRC/RTOS/tasks.c **** #include <stdio.h>
  56:SRC/RTOS/tasks.c **** #include <stdlib.h>
  57:SRC/RTOS/tasks.c **** #include <string.h>
  58:SRC/RTOS/tasks.c **** 
  59:SRC/RTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:SRC/RTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:SRC/RTOS/tasks.c **** task.h is included from an application file. */
  62:SRC/RTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:SRC/RTOS/tasks.c **** 
  64:SRC/RTOS/tasks.c **** #include "FreeRTOS.h"
  65:SRC/RTOS/tasks.c **** #include "task.h"
  66:SRC/RTOS/tasks.c **** #include "StackMacros.h"
  67:SRC/RTOS/tasks.c **** 
  68:SRC/RTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  69:SRC/RTOS/tasks.c **** 
  70:SRC/RTOS/tasks.c **** /*
  71:SRC/RTOS/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  72:SRC/RTOS/tasks.c ****  */
  73:SRC/RTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  74:SRC/RTOS/tasks.c **** 
  75:SRC/RTOS/tasks.c **** #define tskIDLE_PRIORITY			( ( unsigned portBASE_TYPE ) 0 )
  76:SRC/RTOS/tasks.c **** 
  77:SRC/RTOS/tasks.c **** /*
  78:SRC/RTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 4


  79:SRC/RTOS/tasks.c ****  * and stores the context of the task.
  80:SRC/RTOS/tasks.c ****  */
  81:SRC/RTOS/tasks.c **** typedef struct tskTaskControlBlock
  82:SRC/RTOS/tasks.c **** {
  83:SRC/RTOS/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  84:SRC/RTOS/tasks.c **** 
  85:SRC/RTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  86:SRC/RTOS/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  87:SRC/RTOS/tasks.c **** 	#endif
  88:SRC/RTOS/tasks.c **** 
  89:SRC/RTOS/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  90:SRC/RTOS/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  91:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  92:SRC/RTOS/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  93:SRC/RTOS/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  94:SRC/RTOS/tasks.c **** 
  95:SRC/RTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  96:SRC/RTOS/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  97:SRC/RTOS/tasks.c **** 	#endif
  98:SRC/RTOS/tasks.c **** 
  99:SRC/RTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 100:SRC/RTOS/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 101:SRC/RTOS/tasks.c **** 	#endif
 102:SRC/RTOS/tasks.c **** 
 103:SRC/RTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 104:SRC/RTOS/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 105:SRC/RTOS/tasks.c **** 	#endif
 106:SRC/RTOS/tasks.c **** 
 107:SRC/RTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 108:SRC/RTOS/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 109:SRC/RTOS/tasks.c **** 	#endif
 110:SRC/RTOS/tasks.c **** 
 111:SRC/RTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 112:SRC/RTOS/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 113:SRC/RTOS/tasks.c **** 	#endif
 114:SRC/RTOS/tasks.c **** 
 115:SRC/RTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 116:SRC/RTOS/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 117:SRC/RTOS/tasks.c **** 	#endif
 118:SRC/RTOS/tasks.c **** 
 119:SRC/RTOS/tasks.c **** } tskTCB;
 120:SRC/RTOS/tasks.c **** 
 121:SRC/RTOS/tasks.c **** 
 122:SRC/RTOS/tasks.c **** /*
 123:SRC/RTOS/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 124:SRC/RTOS/tasks.c ****  * than file scope.
 125:SRC/RTOS/tasks.c ****  */
 126:SRC/RTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 127:SRC/RTOS/tasks.c **** 	#define static
 128:SRC/RTOS/tasks.c **** #endif
 129:SRC/RTOS/tasks.c **** 
 130:SRC/RTOS/tasks.c **** /*lint -e956 */
 131:SRC/RTOS/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 132:SRC/RTOS/tasks.c **** 
 133:SRC/RTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 134:SRC/RTOS/tasks.c **** 
 135:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 5


 136:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 137:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 138:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 139:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 140:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 141:SRC/RTOS/tasks.c **** 
 142:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 143:SRC/RTOS/tasks.c **** 
 144:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static volatile xList xTasksWaitingTermination;		/*< Tasks that have been deleted 
 145:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 146:SRC/RTOS/tasks.c **** 
 147:SRC/RTOS/tasks.c **** #endif
 148:SRC/RTOS/tasks.c **** 
 149:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 150:SRC/RTOS/tasks.c **** 
 151:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 152:SRC/RTOS/tasks.c **** 
 153:SRC/RTOS/tasks.c **** #endif
 154:SRC/RTOS/tasks.c **** 
 155:SRC/RTOS/tasks.c **** /* File private variables. --------------------------------*/
 156:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 157:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0;
 158:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 159:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 160:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 161:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 162:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 163:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 164:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 165:SRC/RTOS/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0;
 166:SRC/RTOS/tasks.c **** 
 167:SRC/RTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 168:SRC/RTOS/tasks.c **** 
 169:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 170:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 171:SRC/RTOS/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 172:SRC/RTOS/tasks.c **** 
 173:SRC/RTOS/tasks.c **** #endif
 174:SRC/RTOS/tasks.c **** 
 175:SRC/RTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 176:SRC/RTOS/tasks.c **** 
 177:SRC/RTOS/tasks.c **** /*
 178:SRC/RTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 179:SRC/RTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 180:SRC/RTOS/tasks.c ****  */
 181:SRC/RTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5 )
 182:SRC/RTOS/tasks.c **** 
 183:SRC/RTOS/tasks.c **** /*
 184:SRC/RTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 185:SRC/RTOS/tasks.c ****  */
 186:SRC/RTOS/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 187:SRC/RTOS/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 188:SRC/RTOS/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 189:SRC/RTOS/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 190:SRC/RTOS/tasks.c **** 
 191:SRC/RTOS/tasks.c **** /*
 192:SRC/RTOS/tasks.c ****  * Macros and private variables used by the trace facility.
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 6


 193:SRC/RTOS/tasks.c ****  */
 194:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 195:SRC/RTOS/tasks.c **** 
 196:SRC/RTOS/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 197:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 198:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 199:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 200:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 201:SRC/RTOS/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255;
 202:SRC/RTOS/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 203:SRC/RTOS/tasks.c **** 
 204:SRC/RTOS/tasks.c **** #endif
 205:SRC/RTOS/tasks.c **** 
 206:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 207:SRC/RTOS/tasks.c **** 
 208:SRC/RTOS/tasks.c **** /*
 209:SRC/RTOS/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 210:SRC/RTOS/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 211:SRC/RTOS/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 212:SRC/RTOS/tasks.c ****  * it if not using the facility.
 213:SRC/RTOS/tasks.c ****  */
 214:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 215:SRC/RTOS/tasks.c **** 
 216:SRC/RTOS/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 217:SRC/RTOS/tasks.c **** 	{																								\
 218:SRC/RTOS/tasks.c **** 		if( xTracing )																				\
 219:SRC/RTOS/tasks.c **** 		{																							\
 220:SRC/RTOS/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 221:SRC/RTOS/tasks.c **** 			{																						\
 222:SRC/RTOS/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 223:SRC/RTOS/tasks.c **** 				{																					\
 224:SRC/RTOS/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 225:SRC/RTOS/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;		\
 226:SRC/RTOS/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );									\
 227:SRC/RTOS/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;	\
 228:SRC/RTOS/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );									\
 229:SRC/RTOS/tasks.c **** 				}																					\
 230:SRC/RTOS/tasks.c **** 				else																				\
 231:SRC/RTOS/tasks.c **** 				{																					\
 232:SRC/RTOS/tasks.c **** 					xTracing = pdFALSE;																\
 233:SRC/RTOS/tasks.c **** 				}																					\
 234:SRC/RTOS/tasks.c **** 			}																						\
 235:SRC/RTOS/tasks.c **** 		}																							\
 236:SRC/RTOS/tasks.c **** 	}
 237:SRC/RTOS/tasks.c **** 
 238:SRC/RTOS/tasks.c **** #else
 239:SRC/RTOS/tasks.c **** 
 240:SRC/RTOS/tasks.c **** 	#define vWriteTraceToBuffer()
 241:SRC/RTOS/tasks.c **** 
 242:SRC/RTOS/tasks.c **** #endif
 243:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 244:SRC/RTOS/tasks.c **** 
 245:SRC/RTOS/tasks.c **** /*
 246:SRC/RTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 247:SRC/RTOS/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 248:SRC/RTOS/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 249:SRC/RTOS/tasks.c ****  * executing task, then it will only be rescheduled after the currently
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 7


 250:SRC/RTOS/tasks.c ****  * executing task has been rescheduled.
 251:SRC/RTOS/tasks.c ****  */
 252:SRC/RTOS/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																			\
 253:SRC/RTOS/tasks.c **** {																												\
 254:SRC/RTOS/tasks.c **** 	if( pxTCB->uxPriority > uxTopReadyPriority )																\
 255:SRC/RTOS/tasks.c **** 	{																											\
 256:SRC/RTOS/tasks.c **** 		uxTopReadyPriority = pxTCB->uxPriority;																	\
 257:SRC/RTOS/tasks.c **** 	}																											\
 258:SRC/RTOS/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListIte
 259:SRC/RTOS/tasks.c **** }
 260:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 261:SRC/RTOS/tasks.c **** 
 262:SRC/RTOS/tasks.c **** /*
 263:SRC/RTOS/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 264:SRC/RTOS/tasks.c ****  * any require waking.
 265:SRC/RTOS/tasks.c ****  *
 266:SRC/RTOS/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 267:SRC/RTOS/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 268:SRC/RTOS/tasks.c ****  * any further down the list.
 269:SRC/RTOS/tasks.c ****  */
 270:SRC/RTOS/tasks.c **** #define prvCheckDelayedTasks()																						\
 271:SRC/RTOS/tasks.c **** {																													\
 272:SRC/RTOS/tasks.c **** register tskTCB *pxTCB;																								\
 273:SRC/RTOS/tasks.c **** 																													\
 274:SRC/RTOS/tasks.c **** 	while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ) ) != NULL )						\
 275:SRC/RTOS/tasks.c **** 	{																												\
 276:SRC/RTOS/tasks.c **** 		if( xTickCount < listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) ) )									\
 277:SRC/RTOS/tasks.c **** 		{																											\
 278:SRC/RTOS/tasks.c **** 			break;																									\
 279:SRC/RTOS/tasks.c **** 		}																											\
 280:SRC/RTOS/tasks.c **** 		vListRemove( &( pxTCB->xGenericListItem ) );																\
 281:SRC/RTOS/tasks.c **** 		/* Is the task waiting on an event also? */																	\
 282:SRC/RTOS/tasks.c **** 		if( pxTCB->xEventListItem.pvContainer )																		\
 283:SRC/RTOS/tasks.c **** 		{																											\
 284:SRC/RTOS/tasks.c **** 			vListRemove( &( pxTCB->xEventListItem ) );																\
 285:SRC/RTOS/tasks.c **** 		}																											\
 286:SRC/RTOS/tasks.c **** 		prvAddTaskToReadyQueue( pxTCB );																			\
 287:SRC/RTOS/tasks.c **** 	}																												\
 288:SRC/RTOS/tasks.c **** }
 289:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 290:SRC/RTOS/tasks.c **** 
 291:SRC/RTOS/tasks.c **** /*
 292:SRC/RTOS/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 293:SRC/RTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 294:SRC/RTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 295:SRC/RTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 296:SRC/RTOS/tasks.c ****  */
 297:SRC/RTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( pxHandle == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( tskT
 298:SRC/RTOS/tasks.c **** 
 299:SRC/RTOS/tasks.c **** 
 300:SRC/RTOS/tasks.c **** /* File private functions. --------------------------------*/
 301:SRC/RTOS/tasks.c **** 
 302:SRC/RTOS/tasks.c **** /*
 303:SRC/RTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 304:SRC/RTOS/tasks.c ****  * into the TCB structure.
 305:SRC/RTOS/tasks.c ****  */
 306:SRC/RTOS/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 8


 307:SRC/RTOS/tasks.c **** 
 308:SRC/RTOS/tasks.c **** /*
 309:SRC/RTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 310:SRC/RTOS/tasks.c ****  * automatically upon the creation of the first task.
 311:SRC/RTOS/tasks.c ****  */
 312:SRC/RTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 313:SRC/RTOS/tasks.c **** 
 314:SRC/RTOS/tasks.c **** /*
 315:SRC/RTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 316:SRC/RTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 317:SRC/RTOS/tasks.c ****  * creation of the first user task.
 318:SRC/RTOS/tasks.c ****  *
 319:SRC/RTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 320:SRC/RTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 321:SRC/RTOS/tasks.c ****  *
 322:SRC/RTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 323:SRC/RTOS/tasks.c ****  *
 324:SRC/RTOS/tasks.c ****  */
 325:SRC/RTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 326:SRC/RTOS/tasks.c **** 
 327:SRC/RTOS/tasks.c **** /*
 328:SRC/RTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 329:SRC/RTOS/tasks.c ****  * including the stack pointed to by the TCB.
 330:SRC/RTOS/tasks.c ****  *
 331:SRC/RTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 332:SRC/RTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 333:SRC/RTOS/tasks.c ****  */
 334:SRC/RTOS/tasks.c **** #if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
 335:SRC/RTOS/tasks.c **** 
 336:SRC/RTOS/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 337:SRC/RTOS/tasks.c **** 
 338:SRC/RTOS/tasks.c **** #endif
 339:SRC/RTOS/tasks.c **** 
 340:SRC/RTOS/tasks.c **** /*
 341:SRC/RTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 342:SRC/RTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 343:SRC/RTOS/tasks.c ****  * and its TCB deleted.
 344:SRC/RTOS/tasks.c ****  */
 345:SRC/RTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 346:SRC/RTOS/tasks.c **** 
 347:SRC/RTOS/tasks.c **** /*
 348:SRC/RTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 349:SRC/RTOS/tasks.c ****  * allocation was successful.
 350:SRC/RTOS/tasks.c ****  */
 351:SRC/RTOS/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 352:SRC/RTOS/tasks.c **** 
 353:SRC/RTOS/tasks.c **** /*
 354:SRC/RTOS/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 355:SRC/RTOS/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 356:SRC/RTOS/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 357:SRC/RTOS/tasks.c ****  * within just that list.
 358:SRC/RTOS/tasks.c ****  *
 359:SRC/RTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 360:SRC/RTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 361:SRC/RTOS/tasks.c ****  */
 362:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 363:SRC/RTOS/tasks.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 9


 364:SRC/RTOS/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 365:SRC/RTOS/tasks.c **** 
 366:SRC/RTOS/tasks.c **** #endif
 367:SRC/RTOS/tasks.c **** 
 368:SRC/RTOS/tasks.c **** /*
 369:SRC/RTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 370:SRC/RTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 371:SRC/RTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 372:SRC/RTOS/tasks.c ****  */
 373:SRC/RTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 374:SRC/RTOS/tasks.c **** 
 375:SRC/RTOS/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 376:SRC/RTOS/tasks.c **** 
 377:SRC/RTOS/tasks.c **** #endif
 378:SRC/RTOS/tasks.c **** 
 379:SRC/RTOS/tasks.c **** 
 380:SRC/RTOS/tasks.c **** /*lint +e956 */
 381:SRC/RTOS/tasks.c **** 
 382:SRC/RTOS/tasks.c **** 
 383:SRC/RTOS/tasks.c **** 
 384:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
 385:SRC/RTOS/tasks.c ****  * TASK CREATION API documented in task.h
 386:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
 387:SRC/RTOS/tasks.c **** 
 388:SRC/RTOS/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 389:SRC/RTOS/tasks.c **** {
  90              	 frame_needed = 0, uses_anonymous_args = 0
  91              		str	lr, [sp, #-4]!	@,
  92              	.LCFI0:
  93              		sub	sp, sp, #32	@,,
  94 0000 04E02DE5 	.LCFI1:
  95              		str	r0, [sp, #16]	@ pxTaskCode, pxTaskCode
  96 0004 20D04DE2 		str	r1, [sp, #12]	@ pcName, pcName
  97              		str	r3, [sp, #4]	@ pvParameters, pvParameters
  98 0008 10008DE5 		strh	r2, [sp, #8]	@ movhi	@ tmp168, usStackDepth
  99 000c 0C108DE5 		.loc 1 395 0
 100 0010 04308DE5 		ldrh	r3, [sp, #8]	@ D.3508, usStackDepth
 101 0014 B820CDE1 		mov	r0, r3	@, D.3508
 390:SRC/RTOS/tasks.c **** signed portBASE_TYPE xReturn;
 391:SRC/RTOS/tasks.c **** tskTCB * pxNewTCB;
 392:SRC/RTOS/tasks.c **** 
 393:SRC/RTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 394:SRC/RTOS/tasks.c **** 	checking that the allocation was successful. */
 395:SRC/RTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 102              	, #44]	@, puxStackBuffer
 103 0018 B830DDE1 		bl	prvAllocateTCBAndStack	@
 104 001c 0300A0E1 		mov	r3, r0	@ pxNewTCB.0,
 105 0020 2C109DE5 		str	r3, [sp, #24]	@ pxNewTCB.0, pxNewTCB
 106 0024 700600EB 		.loc 1 397 0
 107 0028 0030A0E1 		ldr	r3, [sp, #24]	@ tmp169, pxNewTCB
 108 002c 18308DE5 		cmp	r3, #0	@ tmp169,
 396:SRC/RTOS/tasks.c **** 
 397:SRC/RTOS/tasks.c **** 	if( pxNewTCB != NULL )
 109              	2	@,
 110 0030 18309DE5 	.LBB2:
 111 0034 000053E3 		.loc 1 421 0
 112 0038 6200000A 		ldr	r3, [sp, #24]	@ tmp170, pxNewTCB
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 10


 113              		ldr	r2, [r3, #48]	@ D.3510, <variable>.pxStack
 398:SRC/RTOS/tasks.c **** 	{
 399:SRC/RTOS/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 400:SRC/RTOS/tasks.c **** 
 401:SRC/RTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 402:SRC/RTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 403:SRC/RTOS/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 404:SRC/RTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0x00 )
 405:SRC/RTOS/tasks.c **** 			{
 406:SRC/RTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 407:SRC/RTOS/tasks.c **** 			}
 408:SRC/RTOS/tasks.c **** 			else
 409:SRC/RTOS/tasks.c **** 			{
 410:SRC/RTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 411:SRC/RTOS/tasks.c **** 			}
 412:SRC/RTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 413:SRC/RTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 414:SRC/RTOS/tasks.c **** 
 415:SRC/RTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 416:SRC/RTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 417:SRC/RTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 418:SRC/RTOS/tasks.c **** 		required by the port. */
 419:SRC/RTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 420:SRC/RTOS/tasks.c **** 		{
 421:SRC/RTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 114              		r3, [sp, #8]	@ D.3511, usStackDepth
 115 003c 18309DE5 		rsb	r3, r3, #1	@ D.3512, D.3511,
 116 0040 302093E5 		mov	r3, r3, asl #2	@ tmp172, tmp171,
 117 0044 B830DDE1 		rsb	r3, r3, #0	@ D.3513, tmp172
 118 0048 013063E2 		add	r3, r2, r3	@ tmp173, D.3510, D.3513
 119 004c 0331A0E1 		str	r3, [sp, #28]	@ tmp173, pxTopOfStack
 120 0050 003063E2 		.loc 1 422 0
 121 0054 033082E0 		ldr	r3, [sp, #28]	@ pxTopOfStack.1, pxTopOfStack
 122 0058 1C308DE5 		bic	r3, r3, #7	@ D.3515, pxTopOfStack.1,
 422:SRC/RTOS/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~
 123              	[sp, #28]	@ D.3515, pxTopOfStack
 124 005c 1C309DE5 		.loc 1 436 0
 125 0060 0730C3E3 		ldrh	r3, [sp, #8]	@ D.3516, usStackDepth
 126 0064 1C308DE5 		str	r3, [sp, #0]	@ D.3516,
 423:SRC/RTOS/tasks.c **** 		}
 424:SRC/RTOS/tasks.c **** 		#else
 425:SRC/RTOS/tasks.c **** 		{
 426:SRC/RTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 427:SRC/RTOS/tasks.c **** 
 428:SRC/RTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 429:SRC/RTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 430:SRC/RTOS/tasks.c **** 			other extreme of the stack space. */
 431:SRC/RTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 432:SRC/RTOS/tasks.c **** 		}
 433:SRC/RTOS/tasks.c **** 		#endif
 434:SRC/RTOS/tasks.c **** 
 435:SRC/RTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 436:SRC/RTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 127              		r0, [sp, #24]	@, pxNewTCB
 128 0068 B830DDE1 		ldr	r1, [sp, #12]	@, pcName
 129 006c 00308DE5 		ldr	r2, [sp, #36]	@, uxPriority
 130 0070 18009DE5 		ldr	r3, [sp, #48]	@, xRegions
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 11


 131 0074 0C109DE5 		bl	prvInitialiseTCBVariables	@
 132 0078 24209DE5 		.loc 1 448 0
 133 007c 30309DE5 		ldr	r0, [sp, #28]	@, pxTopOfStack
 134 0080 C20500EB 		ldr	r1, [sp, #16]	@, pxTaskCode
 437:SRC/RTOS/tasks.c **** 
 438:SRC/RTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 439:SRC/RTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 440:SRC/RTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 441:SRC/RTOS/tasks.c **** 		the	top of stack variable is updated. */
 442:SRC/RTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 443:SRC/RTOS/tasks.c **** 		{
 444:SRC/RTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 445:SRC/RTOS/tasks.c **** 		}
 446:SRC/RTOS/tasks.c **** 		#else
 447:SRC/RTOS/tasks.c **** 		{
 448:SRC/RTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 135              	 [sp, #4]	@, pvParameters
 136 0084 1C009DE5 		bl	pxPortInitialiseStack	@
 137 0088 10109DE5 		mov	r3, r0	@ D.3517,
 138 008c 04209DE5 		mov	r2, r3	@ D.3518, D.3517
 139 0090 FEFFFFEB 		ldr	r3, [sp, #24]	@ tmp174, pxNewTCB
 140 0094 0030A0E1 		str	r2, [r3, #0]	@ D.3518, <variable>.pxTopOfStack
 141 0098 0320A0E1 		.loc 1 454 0
 142 009c 18309DE5 		bl	vPortEnterCritical	@
 143 00a0 002083E5 		.loc 1 456 0
 449:SRC/RTOS/tasks.c **** 		}
 450:SRC/RTOS/tasks.c **** 		#endif
 451:SRC/RTOS/tasks.c **** 
 452:SRC/RTOS/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 453:SRC/RTOS/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 454:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 144              	.L11	@ tmp175,
 145 00a4 FEFFFFEB 		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.2, uxCurrentNumberOfTasks
 455:SRC/RTOS/tasks.c **** 		{
 456:SRC/RTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 146              	dd	r2, r3, #1	@ uxCurrentNumberOfTasks.3, uxCurrentNumberOfTasks.2,
 147 00a8 84319FE5 		ldr	r3, .L11	@ tmp176,
 148 00ac 003093E5 		str	r2, [r3, #0]	@ uxCurrentNumberOfTasks.3, uxCurrentNumberOfTasks
 149 00b0 012083E2 		.loc 1 457 0
 150 00b4 78319FE5 		ldr	r3, .L11	@ tmp177,
 151 00b8 002083E5 		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.4, uxCurrentNumberOfTasks
 457:SRC/RTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 152              	3, #1	@ uxCurrentNumberOfTasks.4,
 153 00bc 70319FE5 		bne	.L3	@,
 154 00c0 003093E5 		.loc 1 460 0
 155 00c4 010053E3 		ldr	r2, .L11+4	@ tmp178,
 156 00c8 0400001A 		ldr	r3, [sp, #24]	@ tmp179, pxNewTCB
 458:SRC/RTOS/tasks.c **** 			{
 459:SRC/RTOS/tasks.c **** 				/* As this is the first task it must also be the current task. */
 460:SRC/RTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 157              	r3, [r2, #0]	@ tmp179, pxCurrentTCB
 158 00cc 64219FE5 		.loc 1 465 0
 159 00d0 18309DE5 		bl	prvInitialiseTaskLists	@
 160 00d4 003082E5 		b	.L4	@
 461:SRC/RTOS/tasks.c **** 
 462:SRC/RTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
 463:SRC/RTOS/tasks.c **** 				initialisation required.  We will not recover if this call
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 12


 464:SRC/RTOS/tasks.c **** 				fails, but we will report the failure. */
 465:SRC/RTOS/tasks.c **** 				prvInitialiseTaskLists();
 161              	
 162 00d8 DE0500EB 		.loc 1 472 0
 163 00dc 0C0000EA 		ldr	r3, .L11+8	@ tmp180,
 164              		ldr	r3, [r3, #0]	@ xSchedulerRunning.5, xSchedulerRunning
 466:SRC/RTOS/tasks.c **** 			}
 467:SRC/RTOS/tasks.c **** 			else
 468:SRC/RTOS/tasks.c **** 			{
 469:SRC/RTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 470:SRC/RTOS/tasks.c **** 				current task if it is the highest priority task to be created
 471:SRC/RTOS/tasks.c **** 				so far. */
 472:SRC/RTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 165              	p	r3, #0	@ xSchedulerRunning.5,
 166 00e0 54319FE5 		bne	.L4	@,
 167 00e4 003093E5 		.loc 1 474 0
 168 00e8 000053E3 		ldr	r3, .L11+4	@ tmp181,
 169 00ec 0800001A 		ldr	r3, [r3, #0]	@ pxCurrentTCB.6, pxCurrentTCB
 473:SRC/RTOS/tasks.c **** 				{
 474:SRC/RTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 170              	r2, [r3, #44]	@ D.3524, <variable>.uxPriority
 171 00f0 40319FE5 		ldr	r3, [sp, #36]	@ tmp182, uxPriority
 172 00f4 003093E5 		cmp	r2, r3	@ D.3524, tmp182
 173 00f8 2C2093E5 		bhi	.L4	@,
 174 00fc 24309DE5 		.loc 1 476 0
 175 0100 030052E1 		ldr	r2, .L11+4	@ tmp183,
 176 0104 0200008A 		ldr	r3, [sp, #24]	@ tmp184, pxNewTCB
 475:SRC/RTOS/tasks.c **** 					{
 476:SRC/RTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 177              	, [r2, #0]	@ tmp184, pxCurrentTCB
 178 0108 28219FE5 	.L4:
 179 010c 18309DE5 		.loc 1 483 0
 180 0110 003082E5 		ldr	r3, [sp, #24]	@ tmp185, pxNewTCB
 181              		ldr	r2, [r3, #44]	@ D.3525, <variable>.uxPriority
 477:SRC/RTOS/tasks.c **** 					}
 478:SRC/RTOS/tasks.c **** 				}
 479:SRC/RTOS/tasks.c **** 			}
 480:SRC/RTOS/tasks.c **** 
 481:SRC/RTOS/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 482:SRC/RTOS/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 483:SRC/RTOS/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 182              	r3, .L11+12	@ tmp186,
 183 0114 18309DE5 		ldr	r3, [r3, #0]	@ uxTopUsedPriority.7, uxTopUsedPriority
 184 0118 2C2093E5 		cmp	r2, r3	@ D.3525, uxTopUsedPriority.7
 185 011c 1C319FE5 		bls	.L5	@,
 186 0120 003093E5 		.loc 1 485 0
 187 0124 030052E1 		ldr	r3, [sp, #24]	@ tmp187, pxNewTCB
 188 0128 0300009A 		ldr	r2, [r3, #44]	@ uxTopUsedPriority.8, <variable>.uxPriority
 484:SRC/RTOS/tasks.c **** 			{
 485:SRC/RTOS/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 189              	, .L11+12	@ tmp188,
 190 012c 18309DE5 		str	r2, [r3, #0]	@ uxTopUsedPriority.8, uxTopUsedPriority
 191 0130 2C2093E5 	.L5:
 192 0134 04319FE5 		.loc 1 491 0
 193 0138 002083E5 		ldr	r3, .L11+16	@ tmp189,
 194              		ldr	r2, [r3, #0]	@ uxTaskNumber.9, uxTaskNumber
 486:SRC/RTOS/tasks.c **** 			}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 13


 487:SRC/RTOS/tasks.c **** 
 488:SRC/RTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 489:SRC/RTOS/tasks.c **** 			{
 490:SRC/RTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 491:SRC/RTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 195              	3, [sp, #24]	@ tmp190, pxNewTCB
 196 013c 00319FE5 		str	r2, [r3, #64]	@ uxTaskNumber.9, <variable>.uxTCBNumber
 197 0140 002093E5 		.loc 1 494 0
 198 0144 18309DE5 		ldr	r3, .L11+16	@ tmp191,
 199 0148 402083E5 		ldr	r3, [r3, #0]	@ uxTaskNumber.10, uxTaskNumber
 492:SRC/RTOS/tasks.c **** 			}
 493:SRC/RTOS/tasks.c **** 			#endif
 494:SRC/RTOS/tasks.c **** 			uxTaskNumber++;
 200              	r2, r3, #1	@ uxTaskNumber.11, uxTaskNumber.10,
 201 014c F0309FE5 		ldr	r3, .L11+16	@ tmp192,
 202 0150 003093E5 		str	r2, [r3, #0]	@ uxTaskNumber.11, uxTaskNumber
 203 0154 012083E2 		.loc 1 496 0
 204 0158 E4309FE5 		ldr	r3, [sp, #24]	@ tmp193, pxNewTCB
 205 015c 002083E5 		ldr	r2, [r3, #44]	@ D.3531, <variable>.uxPriority
 495:SRC/RTOS/tasks.c **** 
 496:SRC/RTOS/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 206              	3, .L11+20	@ tmp194,
 207 0160 18309DE5 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.12, uxTopReadyPriority
 208 0164 2C2093E5 		cmp	r2, r3	@ D.3531, uxTopReadyPriority.12
 209 0168 D8309FE5 		bls	.L6	@,
 210 016c 003093E5 		ldr	r3, [sp, #24]	@ tmp195, pxNewTCB
 211 0170 030052E1 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.13, <variable>.uxPriority
 212 0174 0300009A 		ldr	r3, .L11+20	@ tmp196,
 213 0178 18309DE5 		str	r2, [r3, #0]	@ uxTopReadyPriority.13, uxTopReadyPriority
 214 017c 2C2093E5 	.L6:
 215 0180 C0309FE5 		ldr	r3, [sp, #24]	@ tmp197, pxNewTCB
 216 0184 002083E5 		ldr	r3, [r3, #44]	@ D.3534, <variable>.uxPriority
 217              		mov	r2, r3, asl #2	@ tmp199, tmp198,
 218 0188 18309DE5 		mov	r3, r2, asl #2	@ tmp200, tmp199,
 219 018c 2C3093E5 		add	r2, r2, r3	@ D.3535, tmp199, tmp200
 220 0190 0321A0E1 		ldr	r3, .L11+24	@ tmp201,
 221 0194 0231A0E1 		add	r2, r2, r3	@ D.3536, D.3535, tmp201
 222 0198 032082E0 		ldr	r3, [sp, #24]	@ tmp202, pxNewTCB
 223 019c A8309FE5 		add	r3, r3, #4	@ D.3537, tmp202,
 224 01a0 032082E0 		mov	r0, r2	@, D.3536
 225 01a4 18309DE5 		mov	r1, r3	@, D.3537
 226 01a8 043083E2 		bl	vListInsertEnd	@
 227 01ac 0200A0E1 		.loc 1 498 0
 228 01b0 0310A0E1 		mov	r3, #1	@ tmp203,
 229 01b4 FEFFFFEB 		str	r3, [sp, #20]	@ tmp203, xReturn
 497:SRC/RTOS/tasks.c **** 
 498:SRC/RTOS/tasks.c **** 			xReturn = pdPASS;
 230              	xitCritical	@
 231 01b8 0130A0E3 		b	.L7	@
 232 01bc 14308DE5 	.L2:
 499:SRC/RTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 500:SRC/RTOS/tasks.c **** 		}
 501:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 233              	E2:
 234 01c0 FEFFFFEB 		.loc 1 505 0
 235 01c4 010000EA 		mvn	r3, #0	@ tmp204,
 236              		str	r3, [sp, #20]	@ tmp204, xReturn
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 14


 237              	.L7:
 502:SRC/RTOS/tasks.c **** 	}
 503:SRC/RTOS/tasks.c **** 	else
 504:SRC/RTOS/tasks.c **** 	{
 505:SRC/RTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 238              	 1 509 0
 239 01c8 0030E0E3 		ldr	r3, [sp, #20]	@ tmp205, xReturn
 240 01cc 14308DE5 		cmp	r3, #1	@ tmp205,
 241              		bne	.L8	@,
 506:SRC/RTOS/tasks.c **** 		traceTASK_CREATE_FAILED( pxNewTCB );
 507:SRC/RTOS/tasks.c **** 	}
 508:SRC/RTOS/tasks.c **** 
 509:SRC/RTOS/tasks.c **** 	if( xReturn == pdPASS )
 242              	c 1 511 0
 243 01d0 14309DE5 		ldr	r3, [sp, #40]	@ tmp206, pxCreatedTask
 244 01d4 010053E3 		cmp	r3, #0	@ tmp206,
 245 01d8 1000001A 		beq	.L9	@,
 510:SRC/RTOS/tasks.c **** 	{
 511:SRC/RTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 246              	c 1 516 0
 247 01dc 28309DE5 		ldr	r2, [sp, #40]	@ tmp207, pxCreatedTask
 248 01e0 000053E3 		ldr	r3, [sp, #24]	@ tmp208, pxNewTCB
 249 01e4 0200000A 		str	r3, [r2, #0]	@ tmp208,
 512:SRC/RTOS/tasks.c **** 		{
 513:SRC/RTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 514:SRC/RTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 515:SRC/RTOS/tasks.c **** 			required.*/
 516:SRC/RTOS/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 250              	
 251 01e8 28209DE5 		.loc 1 519 0
 252 01ec 18309DE5 		ldr	r3, .L11+8	@ tmp209,
 253 01f0 003082E5 		ldr	r3, [r3, #0]	@ xSchedulerRunning.14, xSchedulerRunning
 254              		cmp	r3, #0	@ xSchedulerRunning.14,
 517:SRC/RTOS/tasks.c **** 		}
 518:SRC/RTOS/tasks.c **** 
 519:SRC/RTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 255              		.L8	@,
 256 01f4 40309FE5 		.loc 1 523 0
 257 01f8 003093E5 		ldr	r3, .L11+4	@ tmp210,
 258 01fc 000053E3 		ldr	r3, [r3, #0]	@ pxCurrentTCB.15, pxCurrentTCB
 259 0200 0600000A 		ldr	r2, [r3, #44]	@ D.3540, <variable>.uxPriority
 520:SRC/RTOS/tasks.c **** 		{
 521:SRC/RTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 522:SRC/RTOS/tasks.c **** 			then it should run now. */
 523:SRC/RTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 260              	r3, [sp, #36]	@ tmp211, uxPriority
 261 0204 2C309FE5 		cmp	r2, r3	@ D.3540, tmp211
 262 0208 003093E5 		bcs	.L8	@,
 263 020c 2C2093E5 		.loc 1 525 0
 264 0210 24309DE5 	@ 525 "SRC/RTOS/tasks.c" 1
 265 0214 030052E1 		SWI 0
 266 0218 0000002A 	@ 0 "" 2
 524:SRC/RTOS/tasks.c **** 			{
 525:SRC/RTOS/tasks.c **** 				portYIELD_WITHIN_API();
 267              	loc 1 530 0
 268              		ldr	r3, [sp, #20]	@ D.3541, xReturn
 269 021c 000000EF 		.loc 1 531 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 15


 270              		mov	r0, r3	@, <result>
 271              		add	sp, sp, #32	@,,
 526:SRC/RTOS/tasks.c **** 			}
 527:SRC/RTOS/tasks.c **** 		}
 528:SRC/RTOS/tasks.c **** 	}
 529:SRC/RTOS/tasks.c **** 
 530:SRC/RTOS/tasks.c **** 	return xReturn;
 272              	lr, [sp], #4
 273 0220 14309DE5 		bx	lr
 531:SRC/RTOS/tasks.c **** }
 274              	12:
 275 0224 0300A0E1 		.align	2
 276 0228 20D08DE2 	.L11:
 277 022c 04E09DE4 		.word	uxCurrentNumberOfTasks
 278 0230 1EFF2FE1 		.word	pxCurrentTCB
 279              		.word	xSchedulerRunning
 280              		.word	uxTopUsedPriority
 281              		.word	uxTaskNumber
 282 0234 08000000 		.word	uxTopReadyPriority
 283 0238 00000000 		.word	pxReadyTasksLists
 284 023c 18000000 	.LFE2:
 285 0240 10000000 		.size	xTaskGenericCreate, .-xTaskGenericCreate
 286 0244 2C000000 		.align	2
 287 0248 14000000 		.global	vTaskDelete
 288 024c 34000000 		.type	vTaskDelete, %function
 289              	vTaskDelete:
 290              	.LFB3:
 291              		.loc 1 537 0
 292              		@ Function supports interworking.
 293              		@ args = 0, pretend = 0, frame = 12
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		str	lr, [sp, #-4]!	@,
 532:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 533:SRC/RTOS/tasks.c **** 
 534:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 535:SRC/RTOS/tasks.c **** 
 536:SRC/RTOS/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 537:SRC/RTOS/tasks.c **** 	{
 296              	12	@,,
 297              	.LCFI3:
 298              		str	r0, [sp, #4]	@ pxTaskToDelete, pxTaskToDelete
 299              		.loc 1 540 0
 300 0250 04E02DE5 		bl	vPortEnterCritical	@
 301              		.loc 1 544 0
 302 0254 0CD04DE2 		ldr	r3, .L20	@ tmp144,
 303              		ldr	r2, [r3, #0]	@ pxCurrentTCB.16, pxCurrentTCB
 304 0258 04008DE5 		ldr	r3, [sp, #4]	@ tmp145, pxTaskToDelete
 538:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 539:SRC/RTOS/tasks.c **** 
 540:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 305              	r2	@ tmp145, pxCurrentTCB.16
 306 025c FEFFFFEB 		bne	.L14	@,
 541:SRC/RTOS/tasks.c **** 		{
 542:SRC/RTOS/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 543:SRC/RTOS/tasks.c **** 			deleted. */
 544:SRC/RTOS/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 307              	loc 1 546 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 16


 308 0260 DC309FE5 		mov	r3, #0	@ tmp146,
 309 0264 002093E5 		str	r3, [sp, #4]	@ tmp146, pxTaskToDelete
 310 0268 04309DE5 	.L14:
 311 026c 020053E1 		.loc 1 550 0
 312 0270 0100001A 		ldr	r3, [sp, #4]	@ tmp147, pxTaskToDelete
 545:SRC/RTOS/tasks.c **** 			{
 546:SRC/RTOS/tasks.c **** 				pxTaskToDelete = NULL;
 313              	3, #0	@ tmp147,
 314 0274 0030A0E3 		bne	.L15	@,
 315 0278 04308DE5 		ldr	r3, .L20	@ tmp148,
 316              		ldr	r3, [r3, #0]	@, pxCurrentTCB
 547:SRC/RTOS/tasks.c **** 			}
 548:SRC/RTOS/tasks.c **** 
 549:SRC/RTOS/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 550:SRC/RTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 317              		r3, [sp, #0]	@, iftmp.17
 318 027c 04309DE5 		b	.L16	@
 319 0280 000053E3 	.L15:
 320 0284 0300001A 		ldr	r3, [sp, #4]	@, pxTaskToDelete
 321 0288 B4309FE5 		str	r3, [sp, #0]	@, iftmp.17
 322 028c 003093E5 	.L16:
 323 0290 00308DE5 		ldr	r3, [sp, #0]	@, iftmp.17
 324 0294 010000EA 		str	r3, [sp, #8]	@, pxTCB
 325              		.loc 1 556 0
 326 0298 04309DE5 		ldr	r3, [sp, #8]	@ tmp149, pxTCB
 327 029c 00308DE5 		add	r3, r3, #4	@ D.3571, tmp149,
 328              		mov	r0, r3	@, D.3571
 329 02a0 00309DE5 		bl	vListRemove	@
 330 02a4 08308DE5 		.loc 1 559 0
 551:SRC/RTOS/tasks.c **** 
 552:SRC/RTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 553:SRC/RTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 554:SRC/RTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 555:SRC/RTOS/tasks.c **** 			scheduler for the TCB and stack. */
 556:SRC/RTOS/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 331              	#8]	@ tmp150, pxTCB
 332 02a8 08309DE5 		ldr	r3, [r3, #40]	@ D.3572, <variable>.xEventListItem.pvContainer
 333 02ac 043083E2 		cmp	r3, #0	@ D.3572,
 334 02b0 0300A0E1 		beq	.L17	@,
 335 02b4 FEFFFFEB 		.loc 1 561 0
 557:SRC/RTOS/tasks.c **** 
 558:SRC/RTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 559:SRC/RTOS/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 336              	r3, [sp, #8]	@ tmp151, pxTCB
 337 02b8 08309DE5 		add	r3, r3, #24	@ D.3573, tmp151,
 338 02bc 283093E5 		mov	r0, r3	@, D.3573
 339 02c0 000053E3 		bl	vListRemove	@
 340 02c4 0300000A 	.L17:
 560:SRC/RTOS/tasks.c **** 			{
 561:SRC/RTOS/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 341              	 1 564 0
 342 02c8 08309DE5 		ldr	r3, [sp, #8]	@ tmp152, pxTCB
 343 02cc 183083E2 		add	r3, r3, #4	@ D.3574, tmp152,
 344 02d0 0300A0E1 		ldr	r0, .L20+4	@,
 345 02d4 FEFFFFEB 		mov	r1, r3	@, D.3574
 346              		bl	vListInsertEnd	@
 562:SRC/RTOS/tasks.c **** 			}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 17


 563:SRC/RTOS/tasks.c **** 
 564:SRC/RTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 347              	1 569 0
 348 02d8 08309DE5 		ldr	r3, .L20+8	@ tmp153,
 349 02dc 043083E2 		ldr	r3, [r3, #0]	@ uxTasksDeleted.18, uxTasksDeleted
 350 02e0 60009FE5 		add	r2, r3, #1	@ uxTasksDeleted.19, uxTasksDeleted.18,
 351 02e4 0310A0E1 		ldr	r3, .L20+8	@ tmp154,
 352 02e8 FEFFFFEB 		str	r2, [r3, #0]	@ uxTasksDeleted.19, uxTasksDeleted
 565:SRC/RTOS/tasks.c **** 
 566:SRC/RTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 567:SRC/RTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 568:SRC/RTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 569:SRC/RTOS/tasks.c **** 			++uxTasksDeleted;
 353              	1 573 0
 354 02ec 58309FE5 		ldr	r3, .L20+12	@ tmp155,
 355 02f0 003093E5 		ldr	r3, [r3, #0]	@ uxTaskNumber.20, uxTaskNumber
 356 02f4 012083E2 		add	r2, r3, #1	@ uxTaskNumber.21, uxTaskNumber.20,
 357 02f8 4C309FE5 		ldr	r3, .L20+12	@ tmp156,
 358 02fc 002083E5 		str	r2, [r3, #0]	@ uxTaskNumber.21, uxTaskNumber
 570:SRC/RTOS/tasks.c **** 
 571:SRC/RTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 572:SRC/RTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 573:SRC/RTOS/tasks.c **** 			uxTaskNumber++;
 359              	1 577 0
 360 0300 48309FE5 		bl	vPortExitCritical	@
 361 0304 003093E5 		.loc 1 580 0
 362 0308 012083E2 		ldr	r3, .L20+16	@ tmp157,
 363 030c 3C309FE5 		ldr	r3, [r3, #0]	@ xSchedulerRunning.22, xSchedulerRunning
 364 0310 002083E5 		cmp	r3, #0	@ xSchedulerRunning.22,
 574:SRC/RTOS/tasks.c **** 
 575:SRC/RTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 576:SRC/RTOS/tasks.c **** 		}
 577:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 365              	L19	@,
 366 0314 FEFFFFEB 		.loc 1 582 0
 578:SRC/RTOS/tasks.c **** 
 579:SRC/RTOS/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 580:SRC/RTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 367              	dr	r3, [sp, #4]	@ tmp158, pxTaskToDelete
 368 0318 34309FE5 		cmp	r3, #0	@ tmp158,
 369 031c 003093E5 		bne	.L19	@,
 370 0320 000053E3 		.loc 1 584 0
 371 0324 0300000A 	@ 584 "SRC/RTOS/tasks.c" 1
 581:SRC/RTOS/tasks.c **** 		{
 582:SRC/RTOS/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 372              	0
 373 0328 04309DE5 	@ 0 "" 2
 374 032c 000053E3 	.L19:
 375 0330 0000001A 		.loc 1 587 0
 583:SRC/RTOS/tasks.c **** 			{
 584:SRC/RTOS/tasks.c **** 				portYIELD_WITHIN_API();
 376              		sp, sp, #12	@,,
 377              		ldr	lr, [sp], #4
 378 0334 000000EF 		bx	lr
 379              	.L21:
 380              		.align	2
 585:SRC/RTOS/tasks.c **** 			}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 18


 586:SRC/RTOS/tasks.c **** 		}
 587:SRC/RTOS/tasks.c **** 	}
 381              	
 382 0338 0CD08DE2 		.word	pxCurrentTCB
 383 033c 04E09DE4 		.word	xTasksWaitingTermination
 384 0340 1EFF2FE1 		.word	uxTasksDeleted
 385              		.word	uxTaskNumber
 386              		.word	xSchedulerRunning
 387              	.LFE3:
 388 0344 00000000 		.size	vTaskDelete, .-vTaskDelete
 389 0348 C8000000 		.align	2
 390 034c 04000000 		.global	vTaskDelayUntil
 391 0350 2C000000 		.type	vTaskDelayUntil, %function
 392 0354 18000000 	vTaskDelayUntil:
 393              	.LFB4:
 394              		.loc 1 603 0
 395              		@ Function supports interworking.
 396              		@ args = 0, pretend = 0, frame = 20
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		str	lr, [sp, #-4]!	@,
 399              	.LCFI4:
 588:SRC/RTOS/tasks.c **** 
 589:SRC/RTOS/tasks.c **** #endif
 590:SRC/RTOS/tasks.c **** 
 591:SRC/RTOS/tasks.c **** 
 592:SRC/RTOS/tasks.c **** 
 593:SRC/RTOS/tasks.c **** 
 594:SRC/RTOS/tasks.c **** 
 595:SRC/RTOS/tasks.c **** 
 596:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
 597:SRC/RTOS/tasks.c ****  * TASK CONTROL API documented in task.h
 598:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
 599:SRC/RTOS/tasks.c **** 
 600:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 601:SRC/RTOS/tasks.c **** 
 602:SRC/RTOS/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 603:SRC/RTOS/tasks.c **** 	{
 400              	,,
 401              	.LCFI5:
 402              		str	r0, [sp, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 403              		str	r1, [sp, #0]	@ xTimeIncrement, xTimeIncrement
 404 0358 04E02DE5 		.loc 1 605 0
 405              		mov	r3, #0	@ tmp151,
 406 035c 14D04DE2 		str	r3, [sp, #16]	@ tmp151, xShouldDelay
 407              		.loc 1 607 0
 408 0360 04008DE5 		bl	vTaskSuspendAll	@
 409 0364 00108DE5 		.loc 1 610 0
 604:SRC/RTOS/tasks.c **** 	portTickType xTimeToWake;
 605:SRC/RTOS/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 410              	sp, #4]	@ tmp152, pxPreviousWakeTime
 411 0368 0030A0E3 		ldr	r2, [r3, #0]	@ D.3598,
 412 036c 10308DE5 		ldr	r3, [sp, #0]	@ tmp153, xTimeIncrement
 606:SRC/RTOS/tasks.c **** 
 607:SRC/RTOS/tasks.c **** 		vTaskSuspendAll();
 413              	d	r3, r2, r3	@ tmp154, D.3598, tmp153
 414 0370 FEFFFFEB 		str	r3, [sp, #8]	@ tmp154, xTimeToWake
 608:SRC/RTOS/tasks.c **** 		{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 19


 609:SRC/RTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 610:SRC/RTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 415              	loc 1 612 0
 416 0374 04309DE5 		ldr	r3, [sp, #4]	@ tmp155, pxPreviousWakeTime
 417 0378 002093E5 		ldr	r2, [r3, #0]	@ D.3599,
 418 037c 00309DE5 		ldr	r3, .L31	@ tmp156,
 419 0380 033082E0 		ldr	r3, [r3, #0]	@ xTickCount.23, xTickCount
 420 0384 08308DE5 		cmp	r2, r3	@ D.3599, xTickCount.23
 611:SRC/RTOS/tasks.c **** 
 612:SRC/RTOS/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 421              	L23	@,
 422 0388 04309DE5 		.loc 1 619 0
 423 038c 002093E5 		ldr	r3, [sp, #4]	@ tmp157, pxPreviousWakeTime
 424 0390 28319FE5 		ldr	r2, [r3, #0]	@ D.3601,
 425 0394 003093E5 		ldr	r3, [sp, #8]	@ tmp158, xTimeToWake
 426 0398 030052E1 		cmp	r2, r3	@ D.3601, tmp158
 427 039c 0C00009A 		bls	.L25	@,
 613:SRC/RTOS/tasks.c **** 			{
 614:SRC/RTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 615:SRC/RTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 616:SRC/RTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 617:SRC/RTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 618:SRC/RTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 619:SRC/RTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 428              	, .L31	@ tmp159,
 429 03a0 04309DE5 		ldr	r2, [r3, #0]	@ xTickCount.24, xTickCount
 430 03a4 002093E5 		ldr	r3, [sp, #8]	@ tmp160, xTimeToWake
 431 03a8 08309DE5 		cmp	r3, r2	@ tmp160, xTickCount.24
 432 03ac 030052E1 		bls	.L25	@,
 433 03b0 1300009A 		.loc 1 621 0
 434 03b4 04319FE5 		mov	r3, #1	@ tmp161,
 435 03b8 002093E5 		str	r3, [sp, #16]	@ tmp161, xShouldDelay
 436 03bc 08309DE5 		b	.L25	@
 437 03c0 020053E1 	.L23:
 438 03c4 0E00009A 		.loc 1 629 0
 620:SRC/RTOS/tasks.c **** 				{
 621:SRC/RTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 439              	p, #4]	@ tmp162, pxPreviousWakeTime
 440 03c8 0130A0E3 		ldr	r2, [r3, #0]	@ D.3605,
 441 03cc 10308DE5 		ldr	r3, [sp, #8]	@ tmp163, xTimeToWake
 442 03d0 0B0000EA 		cmp	r2, r3	@ D.3605, tmp163
 443              		bhi	.L26	@,
 622:SRC/RTOS/tasks.c **** 				}
 623:SRC/RTOS/tasks.c **** 			}
 624:SRC/RTOS/tasks.c **** 			else
 625:SRC/RTOS/tasks.c **** 			{
 626:SRC/RTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 627:SRC/RTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 628:SRC/RTOS/tasks.c **** 				tick time is less than the wake time. */
 629:SRC/RTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 444              	r3, .L31	@ tmp164,
 445 03d4 04309DE5 		ldr	r2, [r3, #0]	@ xTickCount.25, xTickCount
 446 03d8 002093E5 		ldr	r3, [sp, #8]	@ tmp165, xTimeToWake
 447 03dc 08309DE5 		cmp	r3, r2	@ tmp165, xTickCount.25
 448 03e0 030052E1 		bls	.L25	@,
 449 03e4 0400008A 	.L26:
 450 03e8 D0309FE5 		.loc 1 631 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 20


 451 03ec 002093E5 		mov	r3, #1	@ tmp166,
 452 03f0 08309DE5 		str	r3, [sp, #16]	@ tmp166, xShouldDelay
 453 03f4 020053E1 	.L25:
 454 03f8 0100009A 		.loc 1 636 0
 455              		ldr	r3, [sp, #4]	@ tmp167, pxPreviousWakeTime
 630:SRC/RTOS/tasks.c **** 				{
 631:SRC/RTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 456              	, #8]	@ tmp168, xTimeToWake
 457 03fc 0130A0E3 		str	r2, [r3, #0]	@ tmp168,
 458 0400 10308DE5 		.loc 1 638 0
 459              		ldr	r3, [sp, #16]	@ tmp169, xShouldDelay
 632:SRC/RTOS/tasks.c **** 				}
 633:SRC/RTOS/tasks.c **** 			}
 634:SRC/RTOS/tasks.c **** 
 635:SRC/RTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 636:SRC/RTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 460              		r3, #0	@ tmp169,
 461 0404 04309DE5 		beq	.L27	@,
 462 0408 08209DE5 		.loc 1 645 0
 463 040c 002083E5 		ldr	r3, .L31+4	@ tmp170,
 637:SRC/RTOS/tasks.c **** 
 638:SRC/RTOS/tasks.c **** 			if( xShouldDelay )
 464              		r3, [r3, #0]	@ pxCurrentTCB.26, pxCurrentTCB
 465 0410 10309DE5 		add	r3, r3, #4	@ D.3608, pxCurrentTCB.26,
 466 0414 000053E3 		mov	r0, r3	@, D.3608
 467 0418 1E00000A 		bl	vListRemove	@
 639:SRC/RTOS/tasks.c **** 			{
 640:SRC/RTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 641:SRC/RTOS/tasks.c **** 
 642:SRC/RTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 643:SRC/RTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 644:SRC/RTOS/tasks.c **** 				both lists. */
 645:SRC/RTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 468              	c 1 648 0
 469 041c A0309FE5 		ldr	r3, .L31+4	@ tmp171,
 470 0420 003093E5 		ldr	r2, [r3, #0]	@ pxCurrentTCB.27, pxCurrentTCB
 471 0424 043083E2 		ldr	r3, [sp, #8]	@ tmp172, xTimeToWake
 472 0428 0300A0E1 		str	r3, [r2, #4]	@ tmp172, <variable>.xGenericListItem.xItemValue
 473 042c FEFFFFEB 		.loc 1 650 0
 646:SRC/RTOS/tasks.c **** 
 647:SRC/RTOS/tasks.c **** 				/* The list item will be inserted in wake time order. */
 648:SRC/RTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 474              	3, .L31	@ tmp173,
 475 0430 8C309FE5 		ldr	r2, [r3, #0]	@ xTickCount.28, xTickCount
 476 0434 002093E5 		ldr	r3, [sp, #8]	@ tmp174, xTimeToWake
 477 0438 08309DE5 		cmp	r3, r2	@ tmp174, xTickCount.28
 478 043c 043082E5 		bcs	.L28	@,
 649:SRC/RTOS/tasks.c **** 
 650:SRC/RTOS/tasks.c **** 				if( xTimeToWake < xTickCount )
 479              	 1 654 0
 480 0440 78309FE5 		ldr	r3, .L31+8	@ tmp175,
 481 0444 002093E5 		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.29, pxOverflowDelayedTaskList
 482 0448 08309DE5 		ldr	r3, .L31+4	@ tmp176,
 483 044c 020053E1 		ldr	r3, [r3, #0]	@ pxCurrentTCB.30, pxCurrentTCB
 484 0450 0800002A 		add	r3, r3, #4	@ D.3613, pxCurrentTCB.30,
 651:SRC/RTOS/tasks.c **** 				{
 652:SRC/RTOS/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 21


 653:SRC/RTOS/tasks.c **** 					overflow list. */
 654:SRC/RTOS/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 485              	0, r2	@, pxOverflowDelayedTaskList.29
 486 0454 6C309FE5 		mov	r1, r3	@, D.3613
 487 0458 002093E5 		bl	vListInsert	@
 488 045c 60309FE5 		b	.L27	@
 489 0460 003093E5 	.L28:
 490 0464 043083E2 		.loc 1 660 0
 491 0468 0200A0E1 		ldr	r3, .L31+12	@ tmp177,
 492 046c 0310A0E1 		ldr	r2, [r3, #0]	@ pxDelayedTaskList.31, pxDelayedTaskList
 493 0470 FEFFFFEB 		ldr	r3, .L31+4	@ tmp178,
 494 0474 070000EA 		ldr	r3, [r3, #0]	@ pxCurrentTCB.32, pxCurrentTCB
 495              		add	r3, r3, #4	@ D.3616, pxCurrentTCB.32,
 655:SRC/RTOS/tasks.c **** 				}
 656:SRC/RTOS/tasks.c **** 				else
 657:SRC/RTOS/tasks.c **** 				{
 658:SRC/RTOS/tasks.c **** 					/* The wake time has not overflowed, so we can use the
 659:SRC/RTOS/tasks.c **** 					current block list. */
 660:SRC/RTOS/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 496              		@, pxDelayedTaskList.31
 497 0478 4C309FE5 		mov	r1, r3	@, D.3616
 498 047c 002093E5 		bl	vListInsert	@
 499 0480 3C309FE5 	.L27:
 500 0484 003093E5 		.loc 1 664 0
 501 0488 043083E2 		bl	xTaskResumeAll	@
 502 048c 0200A0E1 		mov	r3, r0	@ xAlreadyYielded.33,
 503 0490 0310A0E1 		str	r3, [sp, #12]	@ xAlreadyYielded.33, xAlreadyYielded
 504 0494 FEFFFFEB 		.loc 1 668 0
 505              		ldr	r3, [sp, #12]	@ tmp179, xAlreadyYielded
 661:SRC/RTOS/tasks.c **** 				}
 662:SRC/RTOS/tasks.c **** 			}
 663:SRC/RTOS/tasks.c **** 		}
 664:SRC/RTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 506              	0	@ tmp179,
 507 0498 FEFFFFEB 		bne	.L30	@,
 508 049c 0030A0E1 		.loc 1 670 0
 509 04a0 0C308DE5 	@ 670 "SRC/RTOS/tasks.c" 1
 665:SRC/RTOS/tasks.c **** 
 666:SRC/RTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 667:SRC/RTOS/tasks.c **** 		have put ourselves to sleep. */
 668:SRC/RTOS/tasks.c **** 		if( !xAlreadyYielded )
 510              	 0
 511 04a4 0C309DE5 	@ 0 "" 2
 512 04a8 000053E3 	.L30:
 513 04ac 0000001A 		.loc 1 672 0
 669:SRC/RTOS/tasks.c **** 		{
 670:SRC/RTOS/tasks.c **** 			portYIELD_WITHIN_API();
 514              		sp, sp, #20	@,,
 515              		ldr	lr, [sp], #4
 516 04b0 000000EF 		bx	lr
 517              	.L32:
 518              		.align	2
 671:SRC/RTOS/tasks.c **** 		}
 672:SRC/RTOS/tasks.c **** 	}
 519              	
 520 04b4 14D08DE2 		.word	xTickCount
 521 04b8 04E09DE4 		.word	pxCurrentTCB
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 22


 522 04bc 1EFF2FE1 		.word	pxOverflowDelayedTaskList
 523              		.word	pxDelayedTaskList
 524              	.LFE4:
 525              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 526 04c0 0C000000 		.align	2
 527 04c4 00000000 		.global	vTaskDelay
 528 04c8 B0000000 		.type	vTaskDelay, %function
 529 04cc AC000000 	vTaskDelay:
 530              	.LFB5:
 531              		.loc 1 680 0
 532              		@ Function supports interworking.
 533              		@ args = 0, pretend = 0, frame = 12
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		str	lr, [sp, #-4]!	@,
 536              	.LCFI6:
 673:SRC/RTOS/tasks.c **** 
 674:SRC/RTOS/tasks.c **** #endif
 675:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 676:SRC/RTOS/tasks.c **** 
 677:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 678:SRC/RTOS/tasks.c **** 
 679:SRC/RTOS/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 680:SRC/RTOS/tasks.c **** 	{
 537              	@,,
 538              	.LCFI7:
 539              		str	r0, [sp, #0]	@ xTicksToDelay, xTicksToDelay
 540              		.loc 1 682 0
 541 04d0 04E02DE5 		mov	r3, #0	@ tmp145,
 542              		str	r3, [sp, #8]	@ tmp145, xAlreadyYielded
 543 04d4 0CD04DE2 		.loc 1 685 0
 544              		ldr	r3, [sp, #0]	@ tmp146, xTicksToDelay
 545 04d8 00008DE5 		cmp	r3, #0	@ tmp146,
 681:SRC/RTOS/tasks.c **** 	portTickType xTimeToWake;
 682:SRC/RTOS/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 546              		@,
 547 04dc 0030A0E3 		.loc 1 687 0
 548 04e0 08308DE5 		bl	vTaskSuspendAll	@
 683:SRC/RTOS/tasks.c **** 
 684:SRC/RTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 685:SRC/RTOS/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0 )
 549              	oc 1 701 0
 550 04e4 00309DE5 		ldr	r3, .L39	@ tmp147,
 551 04e8 000053E3 		ldr	r2, [r3, #0]	@ xTickCount.34, xTickCount
 552 04ec 2700000A 		ldr	r3, [sp, #0]	@ tmp148, xTicksToDelay
 686:SRC/RTOS/tasks.c **** 		{
 687:SRC/RTOS/tasks.c **** 			vTaskSuspendAll();
 553              		r3, r2, r3	@ tmp149, xTickCount.34, tmp148
 554 04f0 FEFFFFEB 		str	r3, [sp, #4]	@ tmp149, xTimeToWake
 688:SRC/RTOS/tasks.c **** 			{
 689:SRC/RTOS/tasks.c **** 				traceTASK_DELAY();
 690:SRC/RTOS/tasks.c **** 
 691:SRC/RTOS/tasks.c **** 				/* A task that is removed from the event list while the
 692:SRC/RTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 693:SRC/RTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 694:SRC/RTOS/tasks.c **** 				is resumed.
 695:SRC/RTOS/tasks.c **** 
 696:SRC/RTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 23


 697:SRC/RTOS/tasks.c **** 				executing task. */
 698:SRC/RTOS/tasks.c **** 
 699:SRC/RTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 700:SRC/RTOS/tasks.c **** 				not a problem. */
 701:SRC/RTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 555              	loc 1 706 0
 556 04f4 B0309FE5 		ldr	r3, .L39+4	@ tmp150,
 557 04f8 002093E5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.35, pxCurrentTCB
 558 04fc 00309DE5 		add	r3, r3, #4	@ D.3640, pxCurrentTCB.35,
 559 0500 033082E0 		mov	r0, r3	@, D.3640
 560 0504 04308DE5 		bl	vListRemove	@
 702:SRC/RTOS/tasks.c **** 
 703:SRC/RTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 704:SRC/RTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 705:SRC/RTOS/tasks.c **** 				both lists. */
 706:SRC/RTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 561              	1 709 0
 562 0508 A0309FE5 		ldr	r3, .L39+4	@ tmp151,
 563 050c 003093E5 		ldr	r2, [r3, #0]	@ pxCurrentTCB.36, pxCurrentTCB
 564 0510 043083E2 		ldr	r3, [sp, #4]	@ tmp152, xTimeToWake
 565 0514 0300A0E1 		str	r3, [r2, #4]	@ tmp152, <variable>.xGenericListItem.xItemValue
 566 0518 FEFFFFEB 		.loc 1 711 0
 707:SRC/RTOS/tasks.c **** 
 708:SRC/RTOS/tasks.c **** 				/* The list item will be inserted in wake time order. */
 709:SRC/RTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 567              	3, .L39	@ tmp153,
 568 051c 8C309FE5 		ldr	r2, [r3, #0]	@ xTickCount.37, xTickCount
 569 0520 002093E5 		ldr	r3, [sp, #4]	@ tmp154, xTimeToWake
 570 0524 04309DE5 		cmp	r3, r2	@ tmp154, xTickCount.37
 571 0528 043082E5 		bcs	.L35	@,
 710:SRC/RTOS/tasks.c **** 
 711:SRC/RTOS/tasks.c **** 				if( xTimeToWake < xTickCount )
 572              	 1 715 0
 573 052c 78309FE5 		ldr	r3, .L39+8	@ tmp155,
 574 0530 002093E5 		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.38, pxOverflowDelayedTaskList
 575 0534 04309DE5 		ldr	r3, .L39+4	@ tmp156,
 576 0538 020053E1 		ldr	r3, [r3, #0]	@ pxCurrentTCB.39, pxCurrentTCB
 577 053c 0800002A 		add	r3, r3, #4	@ D.3645, pxCurrentTCB.39,
 712:SRC/RTOS/tasks.c **** 				{
 713:SRC/RTOS/tasks.c **** 					/* Wake time has overflowed.  Place this item in the
 714:SRC/RTOS/tasks.c **** 					overflow list. */
 715:SRC/RTOS/tasks.c **** 					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericL
 578              	0, r2	@, pxOverflowDelayedTaskList.38
 579 0540 6C309FE5 		mov	r1, r3	@, D.3645
 580 0544 002093E5 		bl	vListInsert	@
 581 0548 60309FE5 		b	.L36	@
 582 054c 003093E5 	.L35:
 583 0550 043083E2 		.loc 1 721 0
 584 0554 0200A0E1 		ldr	r3, .L39+12	@ tmp157,
 585 0558 0310A0E1 		ldr	r2, [r3, #0]	@ pxDelayedTaskList.40, pxDelayedTaskList
 586 055c FEFFFFEB 		ldr	r3, .L39+4	@ tmp158,
 587 0560 070000EA 		ldr	r3, [r3, #0]	@ pxCurrentTCB.41, pxCurrentTCB
 588              		add	r3, r3, #4	@ D.3648, pxCurrentTCB.41,
 716:SRC/RTOS/tasks.c **** 				}
 717:SRC/RTOS/tasks.c **** 				else
 718:SRC/RTOS/tasks.c **** 				{
 719:SRC/RTOS/tasks.c **** 					/* The wake time has not overflowed, so we can use the
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 24


 720:SRC/RTOS/tasks.c **** 					current block list. */
 721:SRC/RTOS/tasks.c **** 					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem 
 589              		@, pxDelayedTaskList.40
 590 0564 4C309FE5 		mov	r1, r3	@, D.3648
 591 0568 002093E5 		bl	vListInsert	@
 592 056c 3C309FE5 	.L36:
 593 0570 003093E5 		.loc 1 724 0
 594 0574 043083E2 		bl	xTaskResumeAll	@
 595 0578 0200A0E1 		mov	r3, r0	@ xAlreadyYielded.42,
 596 057c 0310A0E1 		str	r3, [sp, #8]	@ xAlreadyYielded.42, xAlreadyYielded
 597 0580 FEFFFFEB 	.L34:
 598              		.loc 1 729 0
 722:SRC/RTOS/tasks.c **** 				}
 723:SRC/RTOS/tasks.c **** 			}
 724:SRC/RTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 599              	sp, #8]	@ tmp159, xAlreadyYielded
 600 0584 FEFFFFEB 		cmp	r3, #0	@ tmp159,
 601 0588 0030A0E1 		bne	.L38	@,
 602 058c 08308DE5 		.loc 1 731 0
 603              	@ 731 "SRC/RTOS/tasks.c" 1
 725:SRC/RTOS/tasks.c **** 		}
 726:SRC/RTOS/tasks.c **** 
 727:SRC/RTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 728:SRC/RTOS/tasks.c **** 		have put ourselves to sleep. */
 729:SRC/RTOS/tasks.c **** 		if( !xAlreadyYielded )
 604              	0
 605 0590 08309DE5 	@ 0 "" 2
 606 0594 000053E3 	.L38:
 607 0598 0000001A 		.loc 1 733 0
 730:SRC/RTOS/tasks.c **** 		{
 731:SRC/RTOS/tasks.c **** 			portYIELD_WITHIN_API();
 608              		sp, sp, #12	@,,
 609              		ldr	lr, [sp], #4
 610 059c 000000EF 		bx	lr
 611              	.L40:
 612              		.align	2
 732:SRC/RTOS/tasks.c **** 		}
 733:SRC/RTOS/tasks.c **** 	}
 613              	
 614 05a0 0CD08DE2 		.word	xTickCount
 615 05a4 04E09DE4 		.word	pxCurrentTCB
 616 05a8 1EFF2FE1 		.word	pxOverflowDelayedTaskList
 617              		.word	pxDelayedTaskList
 618              	.LFE5:
 619              		.size	vTaskDelay, .-vTaskDelay
 620 05ac 0C000000 		.align	2
 621 05b0 00000000 		.global	uxTaskPriorityGet
 622 05b4 B0000000 		.type	uxTaskPriorityGet, %function
 623 05b8 AC000000 	uxTaskPriorityGet:
 624              	.LFB6:
 625              		.loc 1 741 0
 626              		@ Function supports interworking.
 627              		@ args = 0, pretend = 0, frame = 16
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		str	lr, [sp, #-4]!	@,
 630              	.LCFI8:
 734:SRC/RTOS/tasks.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 25


 735:SRC/RTOS/tasks.c **** #endif
 736:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 737:SRC/RTOS/tasks.c **** 
 738:SRC/RTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 739:SRC/RTOS/tasks.c **** 
 740:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 741:SRC/RTOS/tasks.c **** 	{
 631              	@,,
 632              	.LCFI9:
 633              		str	r0, [sp, #4]	@ pxTask, pxTask
 634              		.loc 1 745 0
 635 05bc 04E02DE5 		bl	vPortEnterCritical	@
 636              		.loc 1 749 0
 637 05c0 10D04DE2 		ldr	r3, [sp, #4]	@ tmp136, pxTask
 638              		cmp	r3, #0	@ tmp136,
 639 05c4 04008DE5 		bne	.L42	@,
 742:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 743:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 744:SRC/RTOS/tasks.c **** 
 745:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 640              	.L45	@ tmp137,
 641 05c8 FEFFFFEB 		ldr	r3, [r3, #0]	@, pxCurrentTCB
 746:SRC/RTOS/tasks.c **** 		{
 747:SRC/RTOS/tasks.c **** 			/* If null is passed in here then we are changing the
 748:SRC/RTOS/tasks.c **** 			priority of the calling function. */
 749:SRC/RTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 642              	tr	r3, [sp, #0]	@, iftmp.43
 643 05cc 04309DE5 		b	.L43	@
 644 05d0 000053E3 	.L42:
 645 05d4 0300001A 		ldr	r3, [sp, #4]	@, pxTask
 646 05d8 3C309FE5 		str	r3, [sp, #0]	@, iftmp.43
 647 05dc 003093E5 	.L43:
 648 05e0 00308DE5 		ldr	r3, [sp, #0]	@, iftmp.43
 649 05e4 010000EA 		str	r3, [sp, #8]	@, pxTCB
 650              		.loc 1 750 0
 651 05e8 04309DE5 		ldr	r3, [sp, #8]	@ tmp138, pxTCB
 652 05ec 00308DE5 		ldr	r3, [r3, #44]	@ tmp139, <variable>.uxPriority
 653              		str	r3, [sp, #12]	@ tmp139, uxReturn
 654 05f0 00309DE5 		.loc 1 752 0
 655 05f4 08308DE5 		bl	vPortExitCritical	@
 750:SRC/RTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 656              		ldr	r3, [sp, #12]	@ D.3663, uxReturn
 657 05f8 08309DE5 		.loc 1 755 0
 658 05fc 2C3093E5 		mov	r0, r3	@, <result>
 659 0600 0C308DE5 		add	sp, sp, #16	@,,
 751:SRC/RTOS/tasks.c **** 		}
 752:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 660              		lr, [sp], #4
 661 0604 FEFFFFEB 		bx	lr
 753:SRC/RTOS/tasks.c **** 
 754:SRC/RTOS/tasks.c **** 		return uxReturn;
 662              	46:
 663 0608 0C309DE5 		.align	2
 755:SRC/RTOS/tasks.c **** 	}
 664              	45:
 665 060c 0300A0E1 		.word	pxCurrentTCB
 666 0610 10D08DE2 	.LFE6:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 26


 667 0614 04E09DE4 		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 668 0618 1EFF2FE1 		.align	2
 669              		.global	vTaskPrioritySet
 670              		.type	vTaskPrioritySet, %function
 671              	vTaskPrioritySet:
 672 061c 00000000 	.LFB7:
 673              		.loc 1 763 0
 674              		@ Function supports interworking.
 675              		@ args = 0, pretend = 0, frame = 24
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		str	lr, [sp, #-4]!	@,
 678              	.LCFI10:
 679              		sub	sp, sp, #24	@,,
 756:SRC/RTOS/tasks.c **** 
 757:SRC/RTOS/tasks.c **** #endif
 758:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 759:SRC/RTOS/tasks.c **** 
 760:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 761:SRC/RTOS/tasks.c **** 
 762:SRC/RTOS/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 763:SRC/RTOS/tasks.c **** 	{
 680              	, [sp, #8]	@ pxTask, pxTask
 681              		str	r1, [sp, #4]	@ uxNewPriority, uxNewPriority
 682              		.loc 1 765 0
 683              		mov	r3, #0	@ tmp149,
 684 0620 04E02DE5 		str	r3, [sp, #20]	@ tmp149, xYieldRequired
 685              		.loc 1 768 0
 686 0624 18D04DE2 		ldr	r3, [sp, #4]	@ tmp150, uxNewPriority
 687              		cmp	r3, #3	@ tmp150,
 688 0628 08008DE5 		bls	.L48	@,
 689 062c 04108DE5 		.loc 1 770 0
 764:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 765:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, xYieldRequired = pdFALSE;
 690              	3	@ tmp151,
 691 0630 0030A0E3 		str	r3, [sp, #4]	@ tmp151, uxNewPriority
 692 0634 14308DE5 	.L48:
 766:SRC/RTOS/tasks.c **** 
 767:SRC/RTOS/tasks.c **** 		/* Ensure the new priority is valid. */
 768:SRC/RTOS/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 693              	oc 1 773 0
 694 0638 04309DE5 		bl	vPortEnterCritical	@
 695 063c 030053E3 		.loc 1 775 0
 696 0640 0100009A 		ldr	r3, .L60	@ tmp152,
 769:SRC/RTOS/tasks.c **** 		{
 770:SRC/RTOS/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - 1;
 697              		r2, [r3, #0]	@ pxCurrentTCB.44, pxCurrentTCB
 698 0644 0330A0E3 		ldr	r3, [sp, #8]	@ tmp153, pxTask
 699 0648 04308DE5 		cmp	r3, r2	@ tmp153, pxCurrentTCB.44
 700              		bne	.L49	@,
 771:SRC/RTOS/tasks.c **** 		}
 772:SRC/RTOS/tasks.c **** 
 773:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 701              	c 1 777 0
 702 064c FEFFFFEB 		mov	r3, #0	@ tmp154,
 774:SRC/RTOS/tasks.c **** 		{
 775:SRC/RTOS/tasks.c **** 			if( pxTask == pxCurrentTCB )
 703              	tr	r3, [sp, #8]	@ tmp154, pxTask
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 27


 704 0650 88319FE5 	.L49:
 705 0654 002093E5 		.loc 1 782 0
 706 0658 08309DE5 		ldr	r3, [sp, #8]	@ tmp155, pxTask
 707 065c 020053E1 		cmp	r3, #0	@ tmp155,
 708 0660 0100001A 		bne	.L50	@,
 776:SRC/RTOS/tasks.c **** 			{
 777:SRC/RTOS/tasks.c **** 				pxTask = NULL;
 709              	3, .L60	@ tmp156,
 710 0664 0030A0E3 		ldr	r3, [r3, #0]	@, pxCurrentTCB
 711 0668 08308DE5 		str	r3, [sp, #0]	@, iftmp.45
 712              		b	.L51	@
 778:SRC/RTOS/tasks.c **** 			}
 779:SRC/RTOS/tasks.c **** 
 780:SRC/RTOS/tasks.c **** 			/* If null is passed in here then we are changing the
 781:SRC/RTOS/tasks.c **** 			priority of the calling function. */
 782:SRC/RTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 713              	:
 714 066c 08309DE5 		ldr	r3, [sp, #8]	@, pxTask
 715 0670 000053E3 		str	r3, [sp, #0]	@, iftmp.45
 716 0674 0300001A 	.L51:
 717 0678 60319FE5 		ldr	r3, [sp, #0]	@, iftmp.45
 718 067c 003093E5 		str	r3, [sp, #12]	@, pxTCB
 719 0680 00308DE5 		.loc 1 788 0
 720 0684 010000EA 		ldr	r3, [sp, #12]	@ tmp157, pxTCB
 721              		ldr	r3, [r3, #68]	@ tmp158, <variable>.uxBasePriority
 722 0688 08309DE5 		str	r3, [sp, #16]	@ tmp158, uxCurrentPriority
 723 068c 00308DE5 		.loc 1 796 0
 724              		ldr	r2, [sp, #16]	@ tmp159, uxCurrentPriority
 725 0690 00309DE5 		ldr	r3, [sp, #4]	@ tmp160, uxNewPriority
 726 0694 0C308DE5 		cmp	r2, r3	@ tmp159, tmp160
 783:SRC/RTOS/tasks.c **** 
 784:SRC/RTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 785:SRC/RTOS/tasks.c **** 
 786:SRC/RTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 787:SRC/RTOS/tasks.c **** 			{
 788:SRC/RTOS/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 727              	.loc 1 800 0
 728 0698 0C309DE5 		ldr	r2, [sp, #4]	@ tmp161, uxNewPriority
 729 069c 443093E5 		ldr	r3, [sp, #16]	@ tmp162, uxCurrentPriority
 730 06a0 10308DE5 		cmp	r2, r3	@ tmp161, tmp162
 789:SRC/RTOS/tasks.c **** 			}
 790:SRC/RTOS/tasks.c **** 			#else
 791:SRC/RTOS/tasks.c **** 			{
 792:SRC/RTOS/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 793:SRC/RTOS/tasks.c **** 			}
 794:SRC/RTOS/tasks.c **** 			#endif
 795:SRC/RTOS/tasks.c **** 
 796:SRC/RTOS/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 731              		.L53	@,
 732 06a4 10209DE5 		.loc 1 802 0
 733 06a8 04309DE5 		ldr	r3, [sp, #8]	@ tmp163, pxTask
 734 06ac 030052E1 		cmp	r3, #0	@ tmp163,
 735 06b0 4600000A 		beq	.L55	@,
 797:SRC/RTOS/tasks.c **** 			{
 798:SRC/RTOS/tasks.c **** 				/* The priority change may have readied a task of higher
 799:SRC/RTOS/tasks.c **** 				priority than the calling task. */
 800:SRC/RTOS/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 28


 736              	 1 808 0
 737 06b4 04209DE5 		mov	r3, #1	@ tmp164,
 738 06b8 10309DE5 		str	r3, [sp, #20]	@ tmp164, xYieldRequired
 739 06bc 030052E1 		b	.L55	@
 740 06c0 0500009A 	.L53:
 801:SRC/RTOS/tasks.c **** 				{
 802:SRC/RTOS/tasks.c **** 					if( pxTask != NULL )
 741              	 1 811 0
 742 06c4 08309DE5 		ldr	r3, [sp, #8]	@ tmp165, pxTask
 743 06c8 000053E3 		cmp	r3, #0	@ tmp165,
 744 06cc 0700000A 		bne	.L55	@,
 803:SRC/RTOS/tasks.c **** 					{
 804:SRC/RTOS/tasks.c **** 						/* The priority of another task is being raised.  If we
 805:SRC/RTOS/tasks.c **** 						were raising the priority of the currently running task
 806:SRC/RTOS/tasks.c **** 						there would be no need to switch as it must have already
 807:SRC/RTOS/tasks.c **** 						been the highest priority task. */
 808:SRC/RTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 745              	c 1 815 0
 746 06d0 0130A0E3 		mov	r3, #1	@ tmp166,
 747 06d4 14308DE5 		str	r3, [sp, #20]	@ tmp166, xYieldRequired
 748 06d8 040000EA 	.L55:
 749              		.loc 1 824 0
 809:SRC/RTOS/tasks.c **** 					}
 810:SRC/RTOS/tasks.c **** 				}
 811:SRC/RTOS/tasks.c **** 				else if( pxTask == NULL )
 750              	r3, [sp, #12]	@ tmp167, pxTCB
 751 06dc 08309DE5 		ldr	r2, [r3, #68]	@ D.3677, <variable>.uxBasePriority
 752 06e0 000053E3 		ldr	r3, [sp, #12]	@ tmp168, pxTCB
 753 06e4 0100001A 		ldr	r3, [r3, #44]	@ D.3678, <variable>.uxPriority
 812:SRC/RTOS/tasks.c **** 				{
 813:SRC/RTOS/tasks.c **** 					/* Setting our own priority down means there may now be another
 814:SRC/RTOS/tasks.c **** 					task of higher priority that is ready to execute. */
 815:SRC/RTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 754              		r2, r3	@ D.3677, D.3678
 755 06e8 0130A0E3 		bne	.L56	@,
 756 06ec 14308DE5 		.loc 1 826 0
 757              		ldr	r2, [sp, #12]	@ tmp169, pxTCB
 816:SRC/RTOS/tasks.c **** 				}
 817:SRC/RTOS/tasks.c **** 
 818:SRC/RTOS/tasks.c **** 
 819:SRC/RTOS/tasks.c **** 
 820:SRC/RTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 821:SRC/RTOS/tasks.c **** 				{
 822:SRC/RTOS/tasks.c **** 					/* Only change the priority being used if the task is not
 823:SRC/RTOS/tasks.c **** 					currently using an inherited priority. */
 824:SRC/RTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 758              		r3, [sp, #4]	@ tmp170, uxNewPriority
 759 06f0 0C309DE5 		str	r3, [r2, #44]	@ tmp170, <variable>.uxPriority
 760 06f4 442093E5 	.L56:
 761 06f8 0C309DE5 		.loc 1 830 0
 762 06fc 2C3093E5 		ldr	r2, [sp, #12]	@ tmp171, pxTCB
 763 0700 030052E1 		ldr	r3, [sp, #4]	@ tmp172, uxNewPriority
 764 0704 0200001A 		str	r3, [r2, #68]	@ tmp172, <variable>.uxBasePriority
 825:SRC/RTOS/tasks.c **** 					{
 826:SRC/RTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 765              	 838 0
 766 0708 0C209DE5 		ldr	r3, [sp, #4]	@ tmp173, uxNewPriority
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 29


 767 070c 04309DE5 		rsb	r2, r3, #4	@ D.3679, tmp173,
 768 0710 2C3082E5 		ldr	r3, [sp, #12]	@ tmp174, pxTCB
 769              		str	r2, [r3, #24]	@ D.3679, <variable>.xEventListItem.xItemValue
 827:SRC/RTOS/tasks.c **** 					}
 828:SRC/RTOS/tasks.c **** 
 829:SRC/RTOS/tasks.c **** 					/* The base priority gets set whatever. */
 830:SRC/RTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 770              	 1 844 0
 771 0714 0C209DE5 		ldr	r3, [sp, #12]	@ tmp175, pxTCB
 772 0718 04309DE5 		ldr	r1, [r3, #20]	@ D.3680, <variable>.xGenericListItem.pvContainer
 773 071c 443082E5 		ldr	r3, [sp, #16]	@ tmp176, uxCurrentPriority
 831:SRC/RTOS/tasks.c **** 				}
 832:SRC/RTOS/tasks.c **** 				#else
 833:SRC/RTOS/tasks.c **** 				{
 834:SRC/RTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 835:SRC/RTOS/tasks.c **** 				}
 836:SRC/RTOS/tasks.c **** 				#endif
 837:SRC/RTOS/tasks.c **** 
 838:SRC/RTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 774              		r2, r3, asl #2	@ tmp178, tmp177,
 775 0720 04309DE5 		mov	r3, r2, asl #2	@ tmp179, tmp178,
 776 0724 042063E2 		add	r2, r2, r3	@ D.3681, tmp178, tmp179
 777 0728 0C309DE5 		ldr	r3, .L60+4	@ tmp180,
 778 072c 182083E5 		add	r3, r2, r3	@ D.3682, D.3681, tmp180
 839:SRC/RTOS/tasks.c **** 
 840:SRC/RTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 841:SRC/RTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
 842:SRC/RTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 843:SRC/RTOS/tasks.c **** 				in the queue appropriate to its new priority. */
 844:SRC/RTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 779              	r1, r3	@ D.3680, D.3682
 780 0730 0C309DE5 		bne	.L57	@,
 781 0734 141093E5 		.loc 1 849 0
 782 0738 10309DE5 		ldr	r3, [sp, #12]	@ tmp181, pxTCB
 783 073c 0321A0E1 		add	r3, r3, #4	@ D.3683, tmp181,
 784 0740 0231A0E1 		mov	r0, r3	@, D.3683
 785 0744 032082E0 		bl	vListRemove	@
 786 0748 94309FE5 		.loc 1 850 0
 787 074c 033082E0 		ldr	r3, [sp, #12]	@ tmp182, pxTCB
 788 0750 030051E1 		ldr	r2, [r3, #44]	@ D.3684, <variable>.uxPriority
 789 0754 1900001A 		ldr	r3, .L60+8	@ tmp183,
 845:SRC/RTOS/tasks.c **** 				{
 846:SRC/RTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 847:SRC/RTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 848:SRC/RTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
 849:SRC/RTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 790              	3, #0]	@ uxTopReadyPriority.46, uxTopReadyPriority
 791 0758 0C309DE5 		cmp	r2, r3	@ D.3684, uxTopReadyPriority.46
 792 075c 043083E2 		bls	.L58	@,
 793 0760 0300A0E1 		ldr	r3, [sp, #12]	@ tmp184, pxTCB
 794 0764 FEFFFFEB 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.47, <variable>.uxPriority
 850:SRC/RTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 795              	r3, .L60+8	@ tmp185,
 796 0768 0C309DE5 		str	r2, [r3, #0]	@ uxTopReadyPriority.47, uxTopReadyPriority
 797 076c 2C2093E5 	.L58:
 798 0770 70309FE5 		ldr	r3, [sp, #12]	@ tmp186, pxTCB
 799 0774 003093E5 		ldr	r3, [r3, #44]	@ D.3687, <variable>.uxPriority
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 30


 800 0778 030052E1 		mov	r2, r3, asl #2	@ tmp188, tmp187,
 801 077c 0300009A 		mov	r3, r2, asl #2	@ tmp189, tmp188,
 802 0780 0C309DE5 		add	r2, r2, r3	@ D.3688, tmp188, tmp189
 803 0784 2C2093E5 		ldr	r3, .L60+4	@ tmp190,
 804 0788 58309FE5 		add	r2, r2, r3	@ D.3689, D.3688, tmp190
 805 078c 002083E5 		ldr	r3, [sp, #12]	@ tmp191, pxTCB
 806              		add	r3, r3, #4	@ D.3690, tmp191,
 807 0790 0C309DE5 		mov	r0, r2	@, D.3689
 808 0794 2C3093E5 		mov	r1, r3	@, D.3690
 809 0798 0321A0E1 		bl	vListInsertEnd	@
 810 079c 0231A0E1 	.L57:
 811 07a0 032082E0 		.loc 1 853 0
 812 07a4 38309FE5 		ldr	r3, [sp, #20]	@ tmp192, xYieldRequired
 813 07a8 032082E0 		cmp	r3, #1	@ tmp192,
 814 07ac 0C309DE5 		bne	.L52	@,
 815 07b0 043083E2 		.loc 1 855 0
 816 07b4 0200A0E1 	@ 855 "SRC/RTOS/tasks.c" 1
 817 07b8 0310A0E1 		SWI 0
 818 07bc FEFFFFEB 	@ 0 "" 2
 819              	.L52:
 851:SRC/RTOS/tasks.c **** 				}
 852:SRC/RTOS/tasks.c **** 
 853:SRC/RTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 820              	itCritical	@
 821 07c0 14309DE5 		.loc 1 860 0
 822 07c4 010053E3 		add	sp, sp, #24	@,,
 823 07c8 0000001A 		ldr	lr, [sp], #4
 854:SRC/RTOS/tasks.c **** 				{
 855:SRC/RTOS/tasks.c **** 					portYIELD_WITHIN_API();
 824              	lr
 825              	.L61:
 826 07cc 000000EF 		.align	2
 827              	.L60:
 828              		.word	pxCurrentTCB
 856:SRC/RTOS/tasks.c **** 				}
 857:SRC/RTOS/tasks.c **** 			}
 858:SRC/RTOS/tasks.c **** 		}
 859:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 829              	d	pxReadyTasksLists
 830 07d0 FEFFFFEB 		.word	uxTopReadyPriority
 860:SRC/RTOS/tasks.c **** 	}
 831              	FE7:
 832 07d4 18D08DE2 		.size	vTaskPrioritySet, .-vTaskPrioritySet
 833 07d8 04E09DE4 		.align	2
 834 07dc 1EFF2FE1 		.global	vTaskSuspend
 835              		.type	vTaskSuspend, %function
 836              	vTaskSuspend:
 837              	.LFB8:
 838 07e0 00000000 		.loc 1 868 0
 839 07e4 34000000 		@ Function supports interworking.
 840 07e8 14000000 		@ args = 0, pretend = 0, frame = 12
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		str	lr, [sp, #-4]!	@,
 843              	.LCFI12:
 844              		sub	sp, sp, #12	@,,
 845              	.LCFI13:
 846              		str	r0, [sp, #4]	@ pxTaskToSuspend, pxTaskToSuspend
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 31


 847              		.loc 1 871 0
 861:SRC/RTOS/tasks.c **** 
 862:SRC/RTOS/tasks.c **** #endif
 863:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 864:SRC/RTOS/tasks.c **** 
 865:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 866:SRC/RTOS/tasks.c **** 
 867:SRC/RTOS/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 868:SRC/RTOS/tasks.c **** 	{
 848              	tical	@
 849              		.loc 1 875 0
 850              		ldr	r3, .L69	@ tmp139,
 851              		ldr	r2, [r3, #0]	@ pxCurrentTCB.48, pxCurrentTCB
 852 07ec 04E02DE5 		ldr	r3, [sp, #4]	@ tmp140, pxTaskToSuspend
 853              		cmp	r3, r2	@ tmp140, pxCurrentTCB.48
 854 07f0 0CD04DE2 		bne	.L63	@,
 855              		.loc 1 877 0
 856 07f4 04008DE5 		mov	r3, #0	@ tmp141,
 869:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 870:SRC/RTOS/tasks.c **** 
 871:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 857              	[sp, #4]	@ tmp141, pxTaskToSuspend
 858 07f8 FEFFFFEB 	.L63:
 872:SRC/RTOS/tasks.c **** 		{
 873:SRC/RTOS/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 874:SRC/RTOS/tasks.c **** 			suspended. */
 875:SRC/RTOS/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 859              	loc 1 881 0
 860 07fc A4309FE5 		ldr	r3, [sp, #4]	@ tmp142, pxTaskToSuspend
 861 0800 002093E5 		cmp	r3, #0	@ tmp142,
 862 0804 04309DE5 		bne	.L64	@,
 863 0808 020053E1 		ldr	r3, .L69	@ tmp143,
 864 080c 0100001A 		ldr	r3, [r3, #0]	@, pxCurrentTCB
 876:SRC/RTOS/tasks.c **** 			{
 877:SRC/RTOS/tasks.c **** 				pxTaskToSuspend = NULL;
 865              	3, [sp, #0]	@, iftmp.49
 866 0810 0030A0E3 		b	.L65	@
 867 0814 04308DE5 	.L64:
 868              		ldr	r3, [sp, #4]	@, pxTaskToSuspend
 878:SRC/RTOS/tasks.c **** 			}
 879:SRC/RTOS/tasks.c **** 
 880:SRC/RTOS/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 881:SRC/RTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 869              		r3, [sp, #0]	@, iftmp.49
 870 0818 04309DE5 	.L65:
 871 081c 000053E3 		ldr	r3, [sp, #0]	@, iftmp.49
 872 0820 0300001A 		str	r3, [sp, #8]	@, pxTCB
 873 0824 7C309FE5 		.loc 1 886 0
 874 0828 003093E5 		ldr	r3, [sp, #8]	@ tmp144, pxTCB
 875 082c 00308DE5 		add	r3, r3, #4	@ D.3721, tmp144,
 876 0830 010000EA 		mov	r0, r3	@, D.3721
 877              		bl	vListRemove	@
 878 0834 04309DE5 		.loc 1 889 0
 879 0838 00308DE5 		ldr	r3, [sp, #8]	@ tmp145, pxTCB
 880              		ldr	r3, [r3, #40]	@ D.3722, <variable>.xEventListItem.pvContainer
 881 083c 00309DE5 		cmp	r3, #0	@ D.3722,
 882 0840 08308DE5 		beq	.L66	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 32


 882:SRC/RTOS/tasks.c **** 
 883:SRC/RTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 884:SRC/RTOS/tasks.c **** 
 885:SRC/RTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 886:SRC/RTOS/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 883              		ldr	r3, [sp, #8]	@ tmp146, pxTCB
 884 0844 08309DE5 		add	r3, r3, #24	@ D.3723, tmp146,
 885 0848 043083E2 		mov	r0, r3	@, D.3723
 886 084c 0300A0E1 		bl	vListRemove	@
 887 0850 FEFFFFEB 	.L66:
 887:SRC/RTOS/tasks.c **** 
 888:SRC/RTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 889:SRC/RTOS/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer )
 888              	 1 894 0
 889 0854 08309DE5 		ldr	r3, [sp, #8]	@ tmp147, pxTCB
 890 0858 283093E5 		add	r3, r3, #4	@ D.3724, tmp147,
 891 085c 000053E3 		ldr	r0, .L69+4	@,
 892 0860 0300000A 		mov	r1, r3	@, D.3724
 890:SRC/RTOS/tasks.c **** 			{
 891:SRC/RTOS/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 893              	ListInsertEnd	@
 894 0864 08309DE5 		.loc 1 896 0
 895 0868 183083E2 		bl	vPortExitCritical	@
 896 086c 0300A0E1 		.loc 1 899 0
 897 0870 FEFFFFEB 		ldr	r3, [sp, #4]	@ tmp148, pxTaskToSuspend
 898              		cmp	r3, #0	@ tmp148,
 892:SRC/RTOS/tasks.c **** 			}
 893:SRC/RTOS/tasks.c **** 
 894:SRC/RTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 899              	L68	@,
 900 0874 08309DE5 		.loc 1 901 0
 901 0878 043083E2 	@ 901 "SRC/RTOS/tasks.c" 1
 902 087c 28009FE5 		SWI 0
 903 0880 0310A0E1 	@ 0 "" 2
 904 0884 FEFFFFEB 	.L68:
 895:SRC/RTOS/tasks.c **** 		}
 896:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 905              	1 903 0
 906 0888 FEFFFFEB 		add	sp, sp, #12	@,,
 897:SRC/RTOS/tasks.c **** 
 898:SRC/RTOS/tasks.c **** 		/* We may have just suspended the current task. */
 899:SRC/RTOS/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 907              	dr	lr, [sp], #4
 908 088c 04309DE5 		bx	lr
 909 0890 000053E3 	.L70:
 910 0894 0000001A 		.align	2
 900:SRC/RTOS/tasks.c **** 		{
 901:SRC/RTOS/tasks.c **** 			portYIELD_WITHIN_API();
 911              	:
 912              		.word	pxCurrentTCB
 913 0898 000000EF 		.word	xSuspendedTaskList
 914              	.LFE8:
 915              		.size	vTaskSuspend, .-vTaskSuspend
 902:SRC/RTOS/tasks.c **** 		}
 903:SRC/RTOS/tasks.c **** 	}
 916              	gn	2
 917 089c 0CD08DE2 		.global	xTaskIsTaskSuspended
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 33


 918 08a0 04E09DE4 		.type	xTaskIsTaskSuspended, %function
 919 08a4 1EFF2FE1 	xTaskIsTaskSuspended:
 920              	.LFB9:
 921              		.loc 1 911 0
 922              		@ Function supports interworking.
 923 08a8 00000000 		@ args = 0, pretend = 0, frame = 12
 924 08ac DC000000 		@ frame_needed = 0, uses_anonymous_args = 0
 925              		@ link register save eliminated.
 926              		sub	sp, sp, #12	@,,
 927              	.LCFI14:
 928              		str	r0, [sp, #0]	@ xTask, xTask
 929              		.loc 1 912 0
 930              		mov	r3, #0	@ tmp138,
 931              		str	r3, [sp, #4]	@ tmp138, xReturn
 904:SRC/RTOS/tasks.c **** 
 905:SRC/RTOS/tasks.c **** #endif
 906:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 907:SRC/RTOS/tasks.c **** 
 908:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 909:SRC/RTOS/tasks.c **** 
 910:SRC/RTOS/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 911:SRC/RTOS/tasks.c **** 	{
 932              	dr	r3, [sp, #0]	@ tmp139, xTask
 933              		str	r3, [sp, #8]	@ tmp139, pxTCB
 934              		.loc 1 917 0
 935              		ldr	r3, [sp, #8]	@ tmp140, pxTCB
 936              		ldr	r2, [r3, #20]	@ D.3739, <variable>.xGenericListItem.pvContainer
 937 08b0 0CD04DE2 		ldr	r3, .L74	@ tmp141,
 938              		cmp	r2, r3	@ D.3739, tmp141
 939 08b4 00008DE5 		bne	.L72	@,
 912:SRC/RTOS/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 940              	920 0
 941 08b8 0030A0E3 		ldr	r3, [sp, #8]	@ tmp142, pxTCB
 942 08bc 04308DE5 		ldr	r2, [r3, #40]	@ D.3740, <variable>.xEventListItem.pvContainer
 913:SRC/RTOS/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 943              	r	r3, .L74+4	@ tmp143,
 944 08c0 00309DE5 		cmp	r2, r3	@ D.3740, tmp143
 945 08c4 08308DE5 		beq	.L72	@,
 914:SRC/RTOS/tasks.c **** 
 915:SRC/RTOS/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 916:SRC/RTOS/tasks.c **** 		suspended list? */
 917:SRC/RTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 946              	oc 1 926 0
 947 08c8 08309DE5 		ldr	r3, [sp, #8]	@ tmp144, pxTCB
 948 08cc 142093E5 		ldr	r3, [r3, #40]	@ D.3741, <variable>.xEventListItem.pvContainer
 949 08d0 40309FE5 		cmp	r3, #0	@ D.3741,
 950 08d4 030052E1 		bne	.L72	@,
 951 08d8 0A00001A 		.loc 1 928 0
 918:SRC/RTOS/tasks.c **** 		{
 919:SRC/RTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 920:SRC/RTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 952              	3, #1	@ tmp145,
 953 08dc 08309DE5 		str	r3, [sp, #4]	@ tmp145, xReturn
 954 08e0 282093E5 	.L72:
 955 08e4 30309FE5 		.loc 1 933 0
 956 08e8 030052E1 		ldr	r3, [sp, #4]	@ D.3742, xReturn
 957 08ec 0500000A 		.loc 1 934 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 34


 921:SRC/RTOS/tasks.c **** 			{
 922:SRC/RTOS/tasks.c **** 				/* Is it in the suspended list because it is in the
 923:SRC/RTOS/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 924:SRC/RTOS/tasks.c **** 				list because it is blocked on a task with no timeout
 925:SRC/RTOS/tasks.c **** 				specified. */
 926:SRC/RTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 958              	0, r3	@, <result>
 959 08f0 08309DE5 		add	sp, sp, #12	@,,
 960 08f4 283093E5 		bx	lr
 961 08f8 000053E3 	.L75:
 962 08fc 0100001A 		.align	2
 927:SRC/RTOS/tasks.c **** 				{
 928:SRC/RTOS/tasks.c **** 					xReturn = pdTRUE;
 963              	
 964 0900 0130A0E3 		.word	xSuspendedTaskList
 965 0904 04308DE5 		.word	xPendingReadyList
 966              	.LFE9:
 929:SRC/RTOS/tasks.c **** 				}
 930:SRC/RTOS/tasks.c **** 			}
 931:SRC/RTOS/tasks.c **** 		}
 932:SRC/RTOS/tasks.c **** 
 933:SRC/RTOS/tasks.c **** 		return xReturn;
 967              	ize	xTaskIsTaskSuspended, .-xTaskIsTaskSuspended
 968 0908 04309DE5 		.align	2
 934:SRC/RTOS/tasks.c **** 	}
 969              	global	vTaskResume
 970 090c 0300A0E1 		.type	vTaskResume, %function
 971 0910 0CD08DE2 	vTaskResume:
 972 0914 1EFF2FE1 	.LFB10:
 973              		.loc 1 942 0
 974              		@ Function supports interworking.
 975              		@ args = 0, pretend = 0, frame = 8
 976 0918 DC000000 		@ frame_needed = 0, uses_anonymous_args = 0
 977 091c B4000000 		str	lr, [sp, #-4]!	@,
 978              	.LCFI15:
 979              		sub	sp, sp, #8	@,,
 980              	.LCFI16:
 981              		str	r0, [sp, #0]	@ pxTaskToResume, pxTaskToResume
 982              		.loc 1 947 0
 983              		ldr	r3, [sp, #0]	@ tmp146, pxTaskToResume
 984              		str	r3, [sp, #4]	@ tmp146, pxTCB
 935:SRC/RTOS/tasks.c **** 
 936:SRC/RTOS/tasks.c **** #endif
 937:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 938:SRC/RTOS/tasks.c **** 
 939:SRC/RTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 940:SRC/RTOS/tasks.c **** 
 941:SRC/RTOS/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
 942:SRC/RTOS/tasks.c **** 	{
 985              	dr	r3, [sp, #4]	@ tmp147, pxTCB
 986              		cmp	r3, #0	@ tmp147,
 987              		beq	.L80	@,
 988              		ldr	r3, .L81	@ tmp148,
 989 0920 04E02DE5 		ldr	r2, [r3, #0]	@ pxCurrentTCB.50, pxCurrentTCB
 990              		ldr	r3, [sp, #4]	@ tmp149, pxTCB
 991 0924 08D04DE2 		cmp	r3, r2	@ tmp149, pxCurrentTCB.50
 992              		beq	.L80	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 35


 993 0928 00008DE5 		.loc 1 953 0
 943:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 944:SRC/RTOS/tasks.c **** 
 945:SRC/RTOS/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
 946:SRC/RTOS/tasks.c **** 		it in the ready list. */
 947:SRC/RTOS/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 994              	EnterCritical	@
 995 092c 00309DE5 		.loc 1 955 0
 996 0930 04308DE5 		ldr	r0, [sp, #4]	@, pxTCB
 948:SRC/RTOS/tasks.c **** 
 949:SRC/RTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
 950:SRC/RTOS/tasks.c **** 		currently executing task. */
 951:SRC/RTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 997              		xTaskIsTaskSuspended	@
 998 0934 04309DE5 		mov	r3, r0	@ D.3755,
 999 0938 000053E3 		cmp	r3, #1	@ D.3755,
 1000 093c 2D00000A 		bne	.L78	@,
 1001 0940 BC309FE5 		.loc 1 961 0
 1002 0944 002093E5 		ldr	r3, [sp, #4]	@ tmp150, pxTCB
 1003 0948 04309DE5 		add	r3, r3, #4	@ D.3756, tmp150,
 1004 094c 020053E1 		mov	r0, r3	@, D.3756
 1005 0950 2800000A 		bl	vListRemove	@
 952:SRC/RTOS/tasks.c **** 		{
 953:SRC/RTOS/tasks.c **** 			portENTER_CRITICAL();
 1006              	62 0
 1007 0954 FEFFFFEB 		ldr	r3, [sp, #4]	@ tmp151, pxTCB
 954:SRC/RTOS/tasks.c **** 			{
 955:SRC/RTOS/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1008              	dr	r2, [r3, #44]	@ D.3757, <variable>.uxPriority
 1009 0958 04009DE5 		ldr	r3, .L81+4	@ tmp152,
 1010 095c FEFFFFEB 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.51, uxTopReadyPriority
 1011 0960 0030A0E1 		cmp	r2, r3	@ D.3757, uxTopReadyPriority.51
 1012 0964 010053E3 		bls	.L79	@,
 1013 0968 2100001A 		ldr	r3, [sp, #4]	@ tmp153, pxTCB
 956:SRC/RTOS/tasks.c **** 				{
 957:SRC/RTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
 958:SRC/RTOS/tasks.c **** 
 959:SRC/RTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
 960:SRC/RTOS/tasks.c **** 					lists even if the scheduler is suspended. */
 961:SRC/RTOS/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1014              	2, [r3, #44]	@ uxTopReadyPriority.52, <variable>.uxPriority
 1015 096c 04309DE5 		ldr	r3, .L81+4	@ tmp154,
 1016 0970 043083E2 		str	r2, [r3, #0]	@ uxTopReadyPriority.52, uxTopReadyPriority
 1017 0974 0300A0E1 	.L79:
 1018 0978 FEFFFFEB 		ldr	r3, [sp, #4]	@ tmp155, pxTCB
 962:SRC/RTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1019              	r3, [r3, #44]	@ D.3760, <variable>.uxPriority
 1020 097c 04309DE5 		mov	r2, r3, asl #2	@ tmp157, tmp156,
 1021 0980 2C2093E5 		mov	r3, r2, asl #2	@ tmp158, tmp157,
 1022 0984 7C309FE5 		add	r2, r2, r3	@ D.3761, tmp157, tmp158
 1023 0988 003093E5 		ldr	r3, .L81+8	@ tmp159,
 1024 098c 030052E1 		add	r2, r2, r3	@ D.3762, D.3761, tmp159
 1025 0990 0300009A 		ldr	r3, [sp, #4]	@ tmp160, pxTCB
 1026 0994 04309DE5 		add	r3, r3, #4	@ D.3763, tmp160,
 1027 0998 2C2093E5 		mov	r0, r2	@, D.3762
 1028 099c 64309FE5 		mov	r1, r3	@, D.3763
 1029 09a0 002083E5 		bl	vListInsertEnd	@
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 36


 1030              		.loc 1 965 0
 1031 09a4 04309DE5 		ldr	r3, [sp, #4]	@ tmp161, pxTCB
 1032 09a8 2C3093E5 		ldr	r2, [r3, #44]	@ D.3764, <variable>.uxPriority
 1033 09ac 0321A0E1 		ldr	r3, .L81	@ tmp162,
 1034 09b0 0231A0E1 		ldr	r3, [r3, #0]	@ pxCurrentTCB.53, pxCurrentTCB
 1035 09b4 032082E0 		ldr	r3, [r3, #44]	@ D.3766, <variable>.uxPriority
 1036 09b8 4C309FE5 		cmp	r2, r3	@ D.3764, D.3766
 1037 09bc 032082E0 		bcc	.L78	@,
 1038 09c0 04309DE5 		.loc 1 969 0
 1039 09c4 043083E2 	@ 969 "SRC/RTOS/tasks.c" 1
 1040 09c8 0200A0E1 		SWI 0
 1041 09cc 0310A0E1 	@ 0 "" 2
 1042 09d0 FEFFFFEB 	.L78:
 963:SRC/RTOS/tasks.c **** 
 964:SRC/RTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
 965:SRC/RTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1043              	xitCritical	@
 1044 09d4 04309DE5 	.L80:
 1045 09d8 2C2093E5 		.loc 1 975 0
 1046 09dc 20309FE5 		add	sp, sp, #8	@,,
 1047 09e0 003093E5 		ldr	lr, [sp], #4
 1048 09e4 2C3093E5 		bx	lr
 1049 09e8 030052E1 	.L82:
 1050 09ec 0000003A 		.align	2
 966:SRC/RTOS/tasks.c **** 					{
 967:SRC/RTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
 968:SRC/RTOS/tasks.c **** 						will leave the lists in the correct state for the next yield. */
 969:SRC/RTOS/tasks.c **** 						portYIELD_WITHIN_API();
 1051              	word	pxCurrentTCB
 1052              		.word	uxTopReadyPriority
 1053 09f0 000000EF 		.word	pxReadyTasksLists
 1054              	.LFE10:
 1055              		.size	vTaskResume, .-vTaskResume
 970:SRC/RTOS/tasks.c **** 					}
 971:SRC/RTOS/tasks.c **** 				}
 972:SRC/RTOS/tasks.c **** 			}
 973:SRC/RTOS/tasks.c **** 			portEXIT_CRITICAL();
 1056              	gn	2
 1057 09f4 FEFFFFEB 		.global	xTaskResumeFromISR
 1058              		.type	xTaskResumeFromISR, %function
 974:SRC/RTOS/tasks.c **** 		}
 975:SRC/RTOS/tasks.c **** 	}
 1059              	skResumeFromISR:
 1060 09f8 08D08DE2 	.LFB11:
 1061 09fc 04E09DE4 		.loc 1 984 0
 1062 0a00 1EFF2FE1 		@ Function supports interworking.
 1063              		@ args = 0, pretend = 0, frame = 12
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		str	lr, [sp, #-4]!	@,
 1066 0a04 00000000 	.LCFI17:
 1067 0a08 14000000 		sub	sp, sp, #12	@,,
 1068 0a0c 34000000 	.LCFI18:
 1069              		str	r0, [sp, #0]	@ pxTaskToResume, pxTaskToResume
 1070              		.loc 1 985 0
 1071              		mov	r3, #0	@ tmp149,
 1072              		str	r3, [sp, #4]	@ tmp149, xYieldRequired
 1073              		.loc 1 988 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 37


 1074              		ldr	r3, [sp, #0]	@ tmp150, pxTaskToResume
 1075              		str	r3, [sp, #8]	@ tmp150, pxTCB
 976:SRC/RTOS/tasks.c **** 
 977:SRC/RTOS/tasks.c **** #endif
 978:SRC/RTOS/tasks.c **** 
 979:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
 980:SRC/RTOS/tasks.c **** 
 981:SRC/RTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
 982:SRC/RTOS/tasks.c **** 
 983:SRC/RTOS/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
 984:SRC/RTOS/tasks.c **** 	{
 1076              	r	r0, [sp, #8]	@, pxTCB
 1077              		bl	xTaskIsTaskSuspended	@
 1078              		mov	r3, r0	@ D.3782,
 1079              		cmp	r3, #1	@ D.3782,
 1080 0a10 04E02DE5 		bne	.L84	@,
 1081              		.loc 1 994 0
 1082 0a14 0CD04DE2 		ldr	r3, .L88	@ tmp151,
 1083              		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.54, uxSchedulerSuspended
 1084 0a18 00008DE5 		cmp	r3, #0	@ uxSchedulerSuspended.54,
 985:SRC/RTOS/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1085              		@,
 1086 0a1c 0030A0E3 		.loc 1 996 0
 1087 0a20 04308DE5 		ldr	r3, [sp, #8]	@ tmp152, pxTCB
 986:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
 987:SRC/RTOS/tasks.c **** 
 988:SRC/RTOS/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1088              	r	r2, [r3, #44]	@ D.3784, <variable>.uxPriority
 1089 0a24 00309DE5 		ldr	r3, .L88+4	@ tmp153,
 1090 0a28 08308DE5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.55, pxCurrentTCB
 989:SRC/RTOS/tasks.c **** 
 990:SRC/RTOS/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1091              	r	r3, [r3, #44]	@ D.3786, <variable>.uxPriority
 1092 0a2c 08009DE5 		cmp	r2, r3	@ D.3784, D.3786
 1093 0a30 FEFFFFEB 		movcc	r3, #0	@, tmp154
 1094 0a34 0030A0E1 		movcs	r3, #1	@, tmp154
 1095 0a38 010053E3 		str	r3, [sp, #4]	@ tmp154, xYieldRequired
 1096 0a3c 2C00001A 		.loc 1 997 0
 991:SRC/RTOS/tasks.c **** 		{
 992:SRC/RTOS/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
 993:SRC/RTOS/tasks.c **** 
 994:SRC/RTOS/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1097              	3, [sp, #8]	@ tmp155, pxTCB
 1098 0a40 C0309FE5 		add	r3, r3, #4	@ D.3787, tmp155,
 1099 0a44 003093E5 		mov	r0, r3	@, D.3787
 1100 0a48 000053E3 		bl	vListRemove	@
 1101 0a4c 2300001A 		.loc 1 998 0
 995:SRC/RTOS/tasks.c **** 			{
 996:SRC/RTOS/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1102              	r3, [sp, #8]	@ tmp156, pxTCB
 1103 0a50 08309DE5 		ldr	r2, [r3, #44]	@ D.3788, <variable>.uxPriority
 1104 0a54 2C2093E5 		ldr	r3, .L88+8	@ tmp157,
 1105 0a58 AC309FE5 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.56, uxTopReadyPriority
 1106 0a5c 003093E5 		cmp	r2, r3	@ D.3788, uxTopReadyPriority.56
 1107 0a60 2C3093E5 		bls	.L86	@,
 1108 0a64 030052E1 		ldr	r3, [sp, #8]	@ tmp158, pxTCB
 1109 0a68 0030A033 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.57, <variable>.uxPriority
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 38


 1110 0a6c 0130A023 		ldr	r3, .L88+8	@ tmp159,
 1111 0a70 04308DE5 		str	r2, [r3, #0]	@ uxTopReadyPriority.57, uxTopReadyPriority
 997:SRC/RTOS/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1112              		r3, [sp, #8]	@ tmp160, pxTCB
 1113 0a74 08309DE5 		ldr	r3, [r3, #44]	@ D.3791, <variable>.uxPriority
 1114 0a78 043083E2 		mov	r2, r3, asl #2	@ tmp162, tmp161,
 1115 0a7c 0300A0E1 		mov	r3, r2, asl #2	@ tmp163, tmp162,
 1116 0a80 FEFFFFEB 		add	r2, r2, r3	@ D.3792, tmp162, tmp163
 998:SRC/RTOS/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1117              	r3, .L88+12	@ tmp164,
 1118 0a84 08309DE5 		add	r2, r2, r3	@ D.3793, D.3792, tmp164
 1119 0a88 2C2093E5 		ldr	r3, [sp, #8]	@ tmp165, pxTCB
 1120 0a8c 7C309FE5 		add	r3, r3, #4	@ D.3794, tmp165,
 1121 0a90 003093E5 		mov	r0, r2	@, D.3793
 1122 0a94 030052E1 		mov	r1, r3	@, D.3794
 1123 0a98 0300009A 		bl	vListInsertEnd	@
 1124 0a9c 08309DE5 		b	.L84	@
 1125 0aa0 2C2093E5 	.L85:
 1126 0aa4 64309FE5 		.loc 1 1005 0
 1127 0aa8 002083E5 		ldr	r3, [sp, #8]	@ tmp166, pxTCB
 1128              		add	r3, r3, #24	@ D.3795, tmp166,
 1129 0aac 08309DE5 		ldr	r0, .L88+16	@,
 1130 0ab0 2C3093E5 		mov	r1, r3	@, D.3795
 1131 0ab4 0321A0E1 		bl	vListInsertEnd	@
 1132 0ab8 0231A0E1 	.L84:
 1133 0abc 032082E0 		.loc 1 1009 0
 1134 0ac0 4C309FE5 		ldr	r3, [sp, #4]	@ D.3796, xYieldRequired
 1135 0ac4 032082E0 		.loc 1 1010 0
 1136 0ac8 08309DE5 		mov	r0, r3	@, <result>
 1137 0acc 043083E2 		add	sp, sp, #12	@,,
 1138 0ad0 0200A0E1 		ldr	lr, [sp], #4
 1139 0ad4 0310A0E1 		bx	lr
 1140 0ad8 FEFFFFEB 	.L89:
 1141 0adc 040000EA 		.align	2
 1142              	.L88:
 999:SRC/RTOS/tasks.c **** 			}
1000:SRC/RTOS/tasks.c **** 			else
1001:SRC/RTOS/tasks.c **** 			{
1002:SRC/RTOS/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1003:SRC/RTOS/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1004:SRC/RTOS/tasks.c **** 				yield will be performed if necessary. */
1005:SRC/RTOS/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1143              	d
 1144 0ae0 08309DE5 		.word	pxCurrentTCB
 1145 0ae4 183083E2 		.word	uxTopReadyPriority
 1146 0ae8 28009FE5 		.word	pxReadyTasksLists
 1147 0aec 0310A0E1 		.word	xPendingReadyList
 1148 0af0 FEFFFFEB 	.LFE11:
 1149              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
1006:SRC/RTOS/tasks.c **** 			}
1007:SRC/RTOS/tasks.c **** 		}
1008:SRC/RTOS/tasks.c **** 
1009:SRC/RTOS/tasks.c **** 		return xYieldRequired;
 1150              	on	.rodata
 1151 0af4 04309DE5 		.align	2
1010:SRC/RTOS/tasks.c **** 	}
 1152              	C0:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 39


 1153 0af8 0300A0E1 		.ascii	"IDLE\000"
 1154 0afc 0CD08DE2 		.text
 1155 0b00 04E09DE4 		.align	2
 1156 0b04 1EFF2FE1 		.global	vTaskStartScheduler
 1157              		.type	vTaskStartScheduler, %function
 1158              	vTaskStartScheduler:
 1159              	.LFB12:
 1160 0b08 1C000000 		.loc 1 1023 0
 1161 0b0c 00000000 		@ Function supports interworking.
 1162 0b10 14000000 		@ args = 0, pretend = 0, frame = 4
 1163 0b14 34000000 		@ frame_needed = 0, uses_anonymous_args = 0
 1164 0b18 B4000000 		str	lr, [sp, #-4]!	@,
 1165              	.LCFI19:
 1166              		sub	sp, sp, #20	@,,
 1167              	.LCFI20:
 1168              		.loc 1 1027 0
 1169              		ldr	r2, .L93	@ D.3809,
 1170 0000 49444C45 		mov	r3, #0	@ tmp136,
 1170      00
 1171              		str	r3, [sp, #0]	@ tmp136,
 1172              		mov	r3, #0	@ tmp137,
 1173              		str	r3, [sp, #4]	@ tmp137,
 1174              		mov	r3, #0	@ tmp138,
 1175              		str	r3, [sp, #8]	@ tmp138,
 1176              		mov	r3, #0	@ tmp139,
1011:SRC/RTOS/tasks.c **** 
1012:SRC/RTOS/tasks.c **** #endif
1013:SRC/RTOS/tasks.c **** 
1014:SRC/RTOS/tasks.c **** 
1015:SRC/RTOS/tasks.c **** 
1016:SRC/RTOS/tasks.c **** 
1017:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
1018:SRC/RTOS/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1019:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
1020:SRC/RTOS/tasks.c **** 
1021:SRC/RTOS/tasks.c **** 
1022:SRC/RTOS/tasks.c **** void vTaskStartScheduler( void )
1023:SRC/RTOS/tasks.c **** {
 1177              	39,
 1178              		ldr	r0, .L93+4	@,
 1179              		mov	r1, r2	@, D.3809
 1180              		mov	r2, #130	@,
 1181 0b1c 04E02DE5 		mov	r3, #0	@,
 1182              		bl	xTaskGenericCreate	@
 1183 0b20 14D04DE2 		mov	r3, r0	@ xReturn.58,
 1184              		str	r3, [sp, #16]	@ xReturn.58, xReturn
1024:SRC/RTOS/tasks.c **** portBASE_TYPE xReturn;
1025:SRC/RTOS/tasks.c **** 
1026:SRC/RTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1027:SRC/RTOS/tasks.c **** 	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL,
 1185              	1029 0
 1186 0b24 80209FE5 		ldr	r3, [sp, #16]	@ tmp140, xReturn
 1187 0b28 0030A0E3 		cmp	r3, #1	@ tmp140,
 1188 0b2c 00308DE5 		bne	.L92	@,
 1189 0b30 0030A0E3 		.loc 1 1039 0
 1190 0b34 04308DE5 	@ 1039 "SRC/RTOS/tasks.c" 1
 1191 0b38 0030A0E3 		STMDB	SP!, {R0}		
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 40


 1192 0b3c 08308DE5 		MRS	R0, CPSR		
 1193 0b40 0030A0E3 		ORR	R0, R0, #0xC0	
 1194 0b44 0C308DE5 		MSR	CPSR, R0		
 1195 0b48 60009FE5 		LDMIA	SP!, {R0}			
 1196 0b4c 0210A0E1 	@ 0 "" 2
 1197 0b50 8220A0E3 		.loc 1 1041 0
 1198 0b54 0030A0E3 		ldr	r2, .L93+8	@ tmp141,
 1199 0b58 FEFFFFEB 		mov	r3, #1	@ tmp142,
 1200 0b5c 0030A0E1 		str	r3, [r2, #0]	@ tmp142, xSchedulerRunning
 1201 0b60 10308DE5 		.loc 1 1042 0
1028:SRC/RTOS/tasks.c **** 
1029:SRC/RTOS/tasks.c **** 	if( xReturn == pdPASS )
 1202              	@ tmp143,
 1203 0b64 10309DE5 		mov	r3, #0	@ tmp144,
 1204 0b68 010053E3 		str	r3, [r2, #0]	@ tmp144, xTickCount
 1205 0b6c 0B00001A 		.loc 1 1051 0
1030:SRC/RTOS/tasks.c **** 	{
1031:SRC/RTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1032:SRC/RTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1033:SRC/RTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1034:SRC/RTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1035:SRC/RTOS/tasks.c **** 		starts to run.
1036:SRC/RTOS/tasks.c **** 
1037:SRC/RTOS/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1038:SRC/RTOS/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1039:SRC/RTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1206              	xPortStartScheduler	@
 1207              	.L92:
 1208 0b70 01002DE9 		.loc 1 1061 0
 1209 0b74 00000FE1 		add	sp, sp, #20	@,,
 1210 0b78 C00080E3 		ldr	lr, [sp], #4
 1211 0b7c 00F029E1 		bx	lr
 1212 0b80 0100BDE8 	.L94:
 1213              		.align	2
1040:SRC/RTOS/tasks.c **** 
1041:SRC/RTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1214              	word	.LC0
 1215 0b84 28209FE5 		.word	prvIdleTask
 1216 0b88 0130A0E3 		.word	xSchedulerRunning
 1217 0b8c 003082E5 		.word	xTickCount
1042:SRC/RTOS/tasks.c **** 		xTickCount = ( portTickType ) 0;
 1218              	12:
 1219 0b90 20209FE5 		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1220 0b94 0030A0E3 		.align	2
 1221 0b98 003082E5 		.global	vTaskEndScheduler
1043:SRC/RTOS/tasks.c **** 
1044:SRC/RTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1045:SRC/RTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1046:SRC/RTOS/tasks.c **** 		the run time counter time base. */
1047:SRC/RTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1048:SRC/RTOS/tasks.c **** 
1049:SRC/RTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1050:SRC/RTOS/tasks.c **** 		portable interface. */
1051:SRC/RTOS/tasks.c **** 		if( xPortStartScheduler() )
 1222              	pe	vTaskEndScheduler, %function
 1223 0b9c FEFFFFEB 	vTaskEndScheduler:
 1224              	.LFB13:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 41


1052:SRC/RTOS/tasks.c **** 		{
1053:SRC/RTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1054:SRC/RTOS/tasks.c **** 			function will not return. */
1055:SRC/RTOS/tasks.c **** 		}
1056:SRC/RTOS/tasks.c **** 		else
1057:SRC/RTOS/tasks.c **** 		{
1058:SRC/RTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1059:SRC/RTOS/tasks.c **** 		}
1060:SRC/RTOS/tasks.c **** 	}
1061:SRC/RTOS/tasks.c **** }
 1225              	oc 1 1065 0
 1226 0ba0 14D08DE2 		@ Function supports interworking.
 1227 0ba4 04E09DE4 		@ args = 0, pretend = 0, frame = 0
 1228 0ba8 1EFF2FE1 		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		str	lr, [sp, #-4]!	@,
 1230              	.LCFI21:
 1231              		.loc 1 1069 0
 1232 0bac 00000000 	@ 1069 "SRC/RTOS/tasks.c" 1
 1233 0bb0 00000000 		STMDB	SP!, {R0}		
 1234 0bb4 18000000 		MRS	R0, CPSR		
 1235 0bb8 0C000000 		ORR	R0, R0, #0xC0	
 1236              		MSR	CPSR, R0		
 1237              		LDMIA	SP!, {R0}			
 1238              	@ 0 "" 2
 1239              		.loc 1 1070 0
 1240              		ldr	r2, .L97	@ tmp133,
 1241              		mov	r3, #0	@ tmp134,
 1242              		str	r3, [r2, #0]	@ tmp134, xSchedulerRunning
1062:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1063:SRC/RTOS/tasks.c **** 
1064:SRC/RTOS/tasks.c **** void vTaskEndScheduler( void )
1065:SRC/RTOS/tasks.c **** {
 1243              		vPortEndScheduler	@
 1244              		.loc 1 1072 0
 1245              		ldr	lr, [sp], #4
 1246              		bx	lr
 1247 0bbc 04E02DE5 	.L98:
 1248              		.align	2
1066:SRC/RTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1067:SRC/RTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1068:SRC/RTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1069:SRC/RTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1249              		.word	xSchedulerRunning
 1250              	.LFE13:
 1251 0bc0 01002DE9 		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1252 0bc4 00000FE1 		.align	2
 1253 0bc8 C00080E3 		.global	vTaskSuspendAll
 1254 0bcc 00F029E1 		.type	vTaskSuspendAll, %function
 1255 0bd0 0100BDE8 	vTaskSuspendAll:
 1256              	.LFB14:
1070:SRC/RTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1257              	1076 0
 1258 0bd4 10209FE5 		@ Function supports interworking.
 1259 0bd8 0030A0E3 		@ args = 0, pretend = 0, frame = 0
 1260 0bdc 003082E5 		@ frame_needed = 0, uses_anonymous_args = 0
1071:SRC/RTOS/tasks.c **** 	vPortEndScheduler();
 1261              	ink register save eliminated.
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 42


 1262 0be0 FEFFFFEB 		.loc 1 1079 0
1072:SRC/RTOS/tasks.c **** }
 1263              	dr	r3, .L101	@ tmp135,
 1264 0be4 04E09DE4 		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.59, uxSchedulerSuspended
 1265 0be8 1EFF2FE1 		add	r2, r3, #1	@ uxSchedulerSuspended.60, uxSchedulerSuspended.59,
 1266              		ldr	r3, .L101	@ tmp136,
 1267              		str	r2, [r3, #0]	@ uxSchedulerSuspended.60, uxSchedulerSuspended
 1268              		.loc 1 1080 0
 1269 0bec 18000000 		bx	lr	@
 1270              	.L102:
 1271              		.align	2
 1272              	.L101:
 1273              		.word	uxSchedulerSuspended
 1274              	.LFE14:
 1275              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1276              		.align	2
1073:SRC/RTOS/tasks.c **** /*----------------------------------------------------------*/
1074:SRC/RTOS/tasks.c **** 
1075:SRC/RTOS/tasks.c **** void vTaskSuspendAll( void )
1076:SRC/RTOS/tasks.c **** {
 1277              	ResumeAll
 1278              		.type	xTaskResumeAll, %function
 1279              	xTaskResumeAll:
 1280              	.LFB15:
 1281              		.loc 1 1084 0
1077:SRC/RTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1078:SRC/RTOS/tasks.c **** 	portBASE_TYPE. */
1079:SRC/RTOS/tasks.c **** 	++uxSchedulerSuspended;
 1282              	nction supports interworking.
 1283 0bf0 10309FE5 		@ args = 0, pretend = 0, frame = 16
 1284 0bf4 003093E5 		@ frame_needed = 0, uses_anonymous_args = 0
 1285 0bf8 012083E2 		str	lr, [sp, #-4]!	@,
 1286 0bfc 04309FE5 	.LCFI22:
 1287 0c00 002083E5 		sub	sp, sp, #16	@,,
1080:SRC/RTOS/tasks.c **** }
 1288              	3:
 1289 0c04 1EFF2FE1 		.loc 1 1086 0
 1290              		mov	r3, #0	@ tmp161,
 1291              		str	r3, [sp, #8]	@ tmp161, xAlreadyYielded
 1292              		.loc 1 1093 0
 1293 0c08 1C000000 		bl	vPortEnterCritical	@
 1294              		.loc 1 1095 0
 1295              		ldr	r3, .L115	@ tmp162,
 1296              		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.61, uxSchedulerSuspended
 1297              		sub	r2, r3, #1	@ uxSchedulerSuspended.62, uxSchedulerSuspended.61,
 1298              		ldr	r3, .L115	@ tmp163,
 1299              		str	r2, [r3, #0]	@ uxSchedulerSuspended.62, uxSchedulerSuspended
 1300              		.loc 1 1097 0
1081:SRC/RTOS/tasks.c **** /*----------------------------------------------------------*/
1082:SRC/RTOS/tasks.c **** 
1083:SRC/RTOS/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1084:SRC/RTOS/tasks.c **** {
 1301              	5	@ tmp164,
 1302              		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.63, uxSchedulerSuspended
 1303              		cmp	r3, #0	@ uxSchedulerSuspended.63,
 1304              		bne	.L104	@,
 1305 0c0c 04E02DE5 		.loc 1 1099 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 43


 1306              		ldr	r3, .L115+4	@ tmp165,
 1307 0c10 10D04DE2 		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.64, uxCurrentNumberOfTasks
 1308              		cmp	r3, #0	@ uxCurrentNumberOfTasks.64,
1085:SRC/RTOS/tasks.c **** register tskTCB *pxTCB;
1086:SRC/RTOS/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1309              	04	@,
 1310 0c14 0030A0E3 	.LBB3:
 1311 0c18 08308DE5 		.loc 1 1101 0
1087:SRC/RTOS/tasks.c **** 
1088:SRC/RTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1089:SRC/RTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1090:SRC/RTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1091:SRC/RTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1092:SRC/RTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1093:SRC/RTOS/tasks.c **** 	portENTER_CRITICAL();
 1312              	v	r3, #0	@ tmp166,
 1313 0c1c FEFFFFEB 		str	r3, [sp, #12]	@ tmp166, xYieldRequired
1094:SRC/RTOS/tasks.c **** 	{
1095:SRC/RTOS/tasks.c **** 		--uxSchedulerSuspended;
 1314              		.L105	@
 1315 0c20 A4319FE5 	.L109:
 1316 0c24 003093E5 		.loc 1 1107 0
 1317 0c28 012043E2 		ldr	r1, [sp, #4]	@, pxTCB
 1318 0c2c 98319FE5 		add	r3, r1, #24	@ D.3838,,
 1319 0c30 002083E5 		mov	r0, r3	@, D.3838
1096:SRC/RTOS/tasks.c **** 
1097:SRC/RTOS/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1320              	istRemove	@
 1321 0c34 90319FE5 		.loc 1 1108 0
 1322 0c38 003093E5 		ldr	r2, [sp, #4]	@, pxTCB
 1323 0c3c 000053E3 		add	r3, r2, #4	@ D.3839,,
 1324 0c40 5B00001A 		mov	r0, r3	@, D.3839
1098:SRC/RTOS/tasks.c **** 		{
1099:SRC/RTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
 1325              	ListRemove	@
 1326 0c44 84319FE5 		.loc 1 1109 0
 1327 0c48 003093E5 		ldr	r3, [sp, #4]	@, pxTCB
 1328 0c4c 000053E3 		ldr	r2, [r3, #44]	@ D.3840, <variable>.uxPriority
 1329 0c50 5700000A 		ldr	r3, .L115+8	@ tmp167,
 1330              		ldr	r3, [r3, #0]	@ uxTopReadyPriority.65, uxTopReadyPriority
1100:SRC/RTOS/tasks.c **** 			{
1101:SRC/RTOS/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1331              	2, r3	@ D.3840, uxTopReadyPriority.65
 1332 0c54 0030A0E3 		bls	.L106	@,
 1333 0c58 0C308DE5 		ldr	r1, [sp, #4]	@, pxTCB
 1334 0c5c 260000EA 		ldr	r2, [r1, #44]	@ uxTopReadyPriority.66, <variable>.uxPriority
 1335              		ldr	r3, .L115+8	@ tmp168,
1102:SRC/RTOS/tasks.c **** 
1103:SRC/RTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1104:SRC/RTOS/tasks.c **** 				appropriate ready list. */
1105:SRC/RTOS/tasks.c **** 				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) 
1106:SRC/RTOS/tasks.c **** 				{
1107:SRC/RTOS/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1336              	r2, [r3, #0]	@ uxTopReadyPriority.66, uxTopReadyPriority
 1337 0c60 04109DE5 	.L106:
 1338 0c64 183081E2 		ldr	r2, [sp, #4]	@, pxTCB
 1339 0c68 0300A0E1 		ldr	r3, [r2, #44]	@ D.3843, <variable>.uxPriority
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 44


 1340 0c6c FEFFFFEB 		mov	r2, r3, asl #2	@ tmp170, tmp169,
1108:SRC/RTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1341              	r3, r2, asl #2	@ tmp171, tmp170,
 1342 0c70 04209DE5 		add	r2, r2, r3	@ D.3844, tmp170, tmp171
 1343 0c74 043082E2 		ldr	r3, .L115+12	@ tmp172,
 1344 0c78 0300A0E1 		add	r3, r2, r3	@ D.3845, D.3844, tmp172
 1345 0c7c FEFFFFEB 		ldr	r1, [sp, #4]	@, pxTCB
1109:SRC/RTOS/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1346              	r2, r1, #4	@ D.3846,,
 1347 0c80 04309DE5 		mov	r0, r3	@, D.3845
 1348 0c84 2C2093E5 		mov	r1, r2	@, D.3846
 1349 0c88 44319FE5 		bl	vListInsertEnd	@
 1350 0c8c 003093E5 		.loc 1 1113 0
 1351 0c90 030052E1 		ldr	r3, [sp, #4]	@, pxTCB
 1352 0c94 0300009A 		ldr	r2, [r3, #44]	@ D.3847, <variable>.uxPriority
 1353 0c98 04109DE5 		ldr	r3, .L115+16	@ tmp173,
 1354 0c9c 2C2091E5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.67, pxCurrentTCB
 1355 0ca0 2C319FE5 		ldr	r3, [r3, #44]	@ D.3849, <variable>.uxPriority
 1356 0ca4 002083E5 		cmp	r2, r3	@ D.3847, D.3849
 1357              		bcc	.L105	@,
 1358 0ca8 04209DE5 		.loc 1 1115 0
 1359 0cac 2C3092E5 		mov	r3, #1	@ tmp174,
 1360 0cb0 0321A0E1 		str	r3, [sp, #12]	@ tmp174, xYieldRequired
 1361 0cb4 0231A0E1 	.L105:
 1362 0cb8 032082E0 		.loc 1 1105 0
 1363 0cbc 14319FE5 		ldr	r3, .L115+20	@ tmp175,
 1364 0cc0 033082E0 		ldr	r3, [r3, #0]	@ D.3851, xPendingReadyList.uxNumberOfItems
 1365 0cc4 04109DE5 		cmp	r3, #0	@ D.3851,
 1366 0cc8 042081E2 		beq	.L107	@,
 1367 0ccc 0300A0E1 		ldr	r3, .L115+20	@ tmp176,
 1368 0cd0 0210A0E1 		ldr	r3, [r3, #12]	@ D.3852, xPendingReadyList.xListEnd.pxNext
 1369 0cd4 FEFFFFEB 		ldr	r3, [r3, #12]	@ D.3853, <variable>.pvOwner
1110:SRC/RTOS/tasks.c **** 
1111:SRC/RTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1112:SRC/RTOS/tasks.c **** 					the current task then we should yield. */
1113:SRC/RTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1370              	53, iftmp.68
 1371 0cd8 04309DE5 		b	.L108	@
 1372 0cdc 2C2093E5 	.L107:
 1373 0ce0 F4309FE5 		mov	r1, #0	@,
 1374 0ce4 003093E5 		str	r1, [sp, #0]	@, iftmp.68
 1375 0ce8 2C3093E5 	.L108:
 1376 0cec 030052E1 		ldr	r2, [sp, #0]	@, iftmp.68
 1377 0cf0 0100003A 		str	r2, [sp, #4]	@, pxTCB
1114:SRC/RTOS/tasks.c **** 					{
1115:SRC/RTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1378              	 [sp, #4]	@, pxTCB
 1379 0cf4 0130A0E3 		cmp	r3, #0	@,
 1380 0cf8 0C308DE5 		bne	.L109	@,
 1381              		.loc 1 1122 0
 1382              		ldr	r3, .L115+24	@ tmp177,
 1383 0cfc DC309FE5 		ldr	r3, [r3, #0]	@ uxMissedTicks.69, uxMissedTicks
 1384 0d00 003093E5 		cmp	r3, #0	@ uxMissedTicks.69,
 1385 0d04 000053E3 		beq	.L110	@,
 1386 0d08 0400000A 		b	.L111	@
 1387 0d0c CC309FE5 	.L112:
 1388 0d10 0C3093E5 		.loc 1 1126 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 45


 1389 0d14 0C3093E5 		bl	vTaskIncrementTick	@
 1390 0d18 00308DE5 		.loc 1 1127 0
 1391 0d1c 010000EA 		ldr	r3, .L115+24	@ tmp178,
 1392              		ldr	r3, [r3, #0]	@ uxMissedTicks.70, uxMissedTicks
 1393 0d20 0010A0E3 		sub	r2, r3, #1	@ uxMissedTicks.71, uxMissedTicks.70,
 1394 0d24 00108DE5 		ldr	r3, .L115+24	@ tmp179,
 1395              		str	r2, [r3, #0]	@ uxMissedTicks.71, uxMissedTicks
 1396 0d28 00209DE5 	.L111:
 1397 0d2c 04208DE5 		.loc 1 1124 0
 1398 0d30 04309DE5 		ldr	r3, .L115+24	@ tmp180,
 1399 0d34 000053E3 		ldr	r3, [r3, #0]	@ uxMissedTicks.72, uxMissedTicks
 1400 0d38 C8FFFF1A 		cmp	r3, #0	@ uxMissedTicks.72,
1116:SRC/RTOS/tasks.c **** 					}
1117:SRC/RTOS/tasks.c **** 				}
1118:SRC/RTOS/tasks.c **** 
1119:SRC/RTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1120:SRC/RTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1121:SRC/RTOS/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1122:SRC/RTOS/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
 1401              	135 0
 1402 0d3c A0309FE5 		mov	r3, #1	@ tmp181,
 1403 0d40 003093E5 		str	r3, [sp, #12]	@ tmp181, xYieldRequired
 1404 0d44 000053E3 	.L110:
 1405 0d48 0C00000A 		.loc 1 1140 0
 1406 0d4c 050000EA 		ldr	r3, [sp, #12]	@ tmp182, xYieldRequired
 1407              		cmp	r3, #1	@ tmp182,
1123:SRC/RTOS/tasks.c **** 				{
1124:SRC/RTOS/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
1125:SRC/RTOS/tasks.c **** 					{
1126:SRC/RTOS/tasks.c **** 						vTaskIncrementTick();
 1408              	113	@,
 1409 0d50 FEFFFFEB 		ldr	r3, .L115+28	@ tmp183,
1127:SRC/RTOS/tasks.c **** 						--uxMissedTicks;
 1410              	dr	r3, [r3, #0]	@ xMissedYield.73, xMissedYield
 1411 0d54 88309FE5 		cmp	r3, #1	@ xMissedYield.73,
 1412 0d58 003093E5 		bne	.L104	@,
 1413 0d5c 012043E2 	.L113:
 1414 0d60 7C309FE5 		.loc 1 1142 0
 1415 0d64 002083E5 		mov	r3, #1	@ tmp184,
 1416              		str	r3, [sp, #8]	@ tmp184, xAlreadyYielded
 1417              		.loc 1 1143 0
 1418 0d68 74309FE5 		ldr	r2, .L115+28	@ tmp185,
 1419 0d6c 003093E5 		mov	r3, #0	@ tmp186,
 1420 0d70 000053E3 		str	r3, [r2, #0]	@ tmp186, xMissedYield
 1421 0d74 F5FFFF1A 		.loc 1 1144 0
1128:SRC/RTOS/tasks.c **** 					}
1129:SRC/RTOS/tasks.c **** 
1130:SRC/RTOS/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1131:SRC/RTOS/tasks.c **** 					to ensure the highest priority task that is ready to run is
1132:SRC/RTOS/tasks.c **** 					the task actually running. */
1133:SRC/RTOS/tasks.c **** 					#if configUSE_PREEMPTION == 1
1134:SRC/RTOS/tasks.c **** 					{
1135:SRC/RTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1422              	RTOS/tasks.c" 1
 1423 0d78 0130A0E3 		SWI 0
 1424 0d7c 0C308DE5 	@ 0 "" 2
 1425              	.L104:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 46


1136:SRC/RTOS/tasks.c **** 					}
1137:SRC/RTOS/tasks.c **** 					#endif
1138:SRC/RTOS/tasks.c **** 				}
1139:SRC/RTOS/tasks.c **** 
1140:SRC/RTOS/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1426              	3:
 1427 0d80 0C309DE5 		.loc 1 1149 0
 1428 0d84 010053E3 		bl	vPortExitCritical	@
 1429 0d88 0300000A 		.loc 1 1151 0
 1430 0d8c 54309FE5 		ldr	r3, [sp, #8]	@ D.3861, xAlreadyYielded
 1431 0d90 003093E5 		.loc 1 1152 0
 1432 0d94 010053E3 		mov	r0, r3	@, <result>
 1433 0d98 0500001A 		add	sp, sp, #16	@,,
 1434              		ldr	lr, [sp], #4
1141:SRC/RTOS/tasks.c **** 				{
1142:SRC/RTOS/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1435              	116:
 1436 0d9c 0130A0E3 		.align	2
 1437 0da0 08308DE5 	.L115:
1143:SRC/RTOS/tasks.c **** 					xMissedYield = pdFALSE;
 1438              	ord	uxSchedulerSuspended
 1439 0da4 3C209FE5 		.word	uxCurrentNumberOfTasks
 1440 0da8 0030A0E3 		.word	uxTopReadyPriority
 1441 0dac 003082E5 		.word	pxReadyTasksLists
1144:SRC/RTOS/tasks.c **** 					portYIELD_WITHIN_API();
 1442              	rd	pxCurrentTCB
 1443              		.word	xPendingReadyList
 1444 0db0 000000EF 		.word	uxMissedTicks
 1445              		.word	xMissedYield
 1446              	.LFE15:
 1447              		.size	xTaskResumeAll, .-xTaskResumeAll
1145:SRC/RTOS/tasks.c **** 				}
1146:SRC/RTOS/tasks.c **** 			}
1147:SRC/RTOS/tasks.c **** 		}
1148:SRC/RTOS/tasks.c **** 	}
1149:SRC/RTOS/tasks.c **** 	portEXIT_CRITICAL();
 1448              	n	2
 1449 0db4 FEFFFFEB 		.global	xTaskGetTickCount
1150:SRC/RTOS/tasks.c **** 
1151:SRC/RTOS/tasks.c **** 	return xAlreadyYielded;
 1450              	type	xTaskGetTickCount, %function
 1451 0db8 08309DE5 	xTaskGetTickCount:
1152:SRC/RTOS/tasks.c **** }
 1452              	FB16:
 1453 0dbc 0300A0E1 		.loc 1 1166 0
 1454 0dc0 10D08DE2 		@ Function supports interworking.
 1455 0dc4 04E09DE4 		@ args = 0, pretend = 0, frame = 4
 1456 0dc8 1EFF2FE1 		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		str	lr, [sp, #-4]!	@,
 1458              	.LCFI24:
 1459              		sub	sp, sp, #4	@,,
 1460 0dcc 1C000000 	.LCFI25:
 1461 0dd0 08000000 		.loc 1 1170 0
 1462 0dd4 14000000 		bl	vPortEnterCritical	@
 1463 0dd8 34000000 		.loc 1 1172 0
 1464 0ddc 00000000 		ldr	r3, .L119	@ tmp135,
 1465 0de0 B4000000 		ldr	r3, [r3, #0]	@ tmp136, xTickCount
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 47


 1466 0de4 20000000 		str	r3, [sp, #0]	@ tmp136, xTicks
 1467 0de8 24000000 		.loc 1 1174 0
 1468              		bl	vPortExitCritical	@
 1469              		.loc 1 1176 0
 1470              		ldr	r3, [sp, #0]	@ D.3881, xTicks
 1471              		.loc 1 1177 0
 1472              		mov	r0, r3	@, <result>
 1473              		add	sp, sp, #4	@,,
 1474              		ldr	lr, [sp], #4
1153:SRC/RTOS/tasks.c **** 
1154:SRC/RTOS/tasks.c **** 
1155:SRC/RTOS/tasks.c **** 
1156:SRC/RTOS/tasks.c **** 
1157:SRC/RTOS/tasks.c **** 
1158:SRC/RTOS/tasks.c **** 
1159:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
1160:SRC/RTOS/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1161:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
1162:SRC/RTOS/tasks.c **** 
1163:SRC/RTOS/tasks.c **** 
1164:SRC/RTOS/tasks.c **** 
1165:SRC/RTOS/tasks.c **** portTickType xTaskGetTickCount( void )
1166:SRC/RTOS/tasks.c **** {
 1475              	
 1476              	.L119:
 1477              		.word	xTickCount
 1478              	.LFE16:
 1479 0dec 04E02DE5 		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1480              		.align	2
 1481 0df0 04D04DE2 		.global	uxTaskGetNumberOfTasks
 1482              		.type	uxTaskGetNumberOfTasks, %function
1167:SRC/RTOS/tasks.c **** portTickType xTicks;
1168:SRC/RTOS/tasks.c **** 
1169:SRC/RTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1170:SRC/RTOS/tasks.c **** 	portENTER_CRITICAL();
 1483              	etNumberOfTasks:
 1484 0df4 FEFFFFEB 	.LFB17:
1171:SRC/RTOS/tasks.c **** 	{
1172:SRC/RTOS/tasks.c **** 		xTicks = xTickCount;
 1485              	loc 1 1181 0
 1486 0df8 1C309FE5 		@ Function supports interworking.
 1487 0dfc 003093E5 		@ args = 0, pretend = 0, frame = 0
 1488 0e00 00308DE5 		@ frame_needed = 0, uses_anonymous_args = 0
1173:SRC/RTOS/tasks.c **** 	}
1174:SRC/RTOS/tasks.c **** 	portEXIT_CRITICAL();
 1489              	ink register save eliminated.
 1490 0e04 FEFFFFEB 		.loc 1 1184 0
1175:SRC/RTOS/tasks.c **** 
1176:SRC/RTOS/tasks.c **** 	return xTicks;
 1491              	dr	r3, .L123	@ tmp135,
 1492 0e08 00309DE5 		ldr	r3, [r3, #0]	@ D.3886, uxCurrentNumberOfTasks
1177:SRC/RTOS/tasks.c **** }
 1493              	loc 1 1185 0
 1494 0e0c 0300A0E1 		mov	r0, r3	@, <result>
 1495 0e10 04D08DE2 		bx	lr	@
 1496 0e14 04E09DE4 	.L124:
 1497 0e18 1EFF2FE1 		.align	2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 48


 1498              	.L123:
 1499              		.word	uxCurrentNumberOfTasks
 1500              	.LFE17:
 1501 0e1c 0C000000 		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1502              		.section	.rodata
 1503              		.align	2
 1504              	.LC1:
 1505              		.ascii	"\015\012\000"
 1506              		.text
 1507              		.align	2
 1508              		.global	vTaskList
1178:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1179:SRC/RTOS/tasks.c **** 
1180:SRC/RTOS/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1181:SRC/RTOS/tasks.c **** {
 1509              	, %function
 1510              	vTaskList:
 1511              	.LFB18:
 1512              		.loc 1 1191 0
 1513              		@ Function supports interworking.
1182:SRC/RTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1183:SRC/RTOS/tasks.c **** 	portBASE_TYPE. */
1184:SRC/RTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 1514              	gs = 0, pretend = 0, frame = 8
 1515 0e20 08309FE5 		@ frame_needed = 0, uses_anonymous_args = 0
 1516 0e24 003093E5 		stmfd	sp!, {r4, lr}	@,
1185:SRC/RTOS/tasks.c **** }
 1517              	FI26:
 1518 0e28 0300A0E1 		sub	sp, sp, #8	@,,
 1519 0e2c 1EFF2FE1 	.LCFI27:
 1520              		str	r0, [sp, #0]	@ pcWriteBuffer, pcWriteBuffer
 1521              		.loc 1 1197 0
 1522              		bl	vTaskSuspendAll	@
 1523 0e30 08000000 		.loc 1 1202 0
 1524              		ldr	r2, [sp, #0]	@ tmp148, pcWriteBuffer
 1525              		mov	r3, #0	@ tmp149,
 1526              		strb	r3, [r2, #0]	@ tmp150,
 1527 0005 000000   		.loc 1 1203 0
 1528              		ldr	r4, [sp, #0]	@ pcWriteBuffer.74, pcWriteBuffer
 1529 0008 0D0A00   		mov	r0, r4	@, pcWriteBuffer.74
 1530              		bl	strlen	@
 1531              		mov	r3, r0	@ tmp151,
 1532              		add	r3, r4, r3	@ tmp152, pcWriteBuffer.74, tmp151
 1533              		mov	r0, r3	@, D.3919
 1534              		ldr	r1, .L133	@,
 1535              		mov	r2, #3	@,
1186:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1187:SRC/RTOS/tasks.c **** 
1188:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1189:SRC/RTOS/tasks.c **** 
1190:SRC/RTOS/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1191:SRC/RTOS/tasks.c **** 	{
 1536              	1 1205 0
 1537              		ldr	r3, .L133+4	@ tmp154,
 1538              		ldr	r3, [r3, #0]	@ uxTopUsedPriority.75, uxTopUsedPriority
 1539              		add	r3, r3, #1	@ tmp155, uxTopUsedPriority.75,
 1540 0e34 10402DE9 		str	r3, [sp, #4]	@ tmp155, uxQueue
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 49


 1541              	.L127:
 1542 0e38 08D04DE2 		.loc 1 1209 0
 1543              		ldr	r3, [sp, #4]	@ tmp156, uxQueue
 1544 0e3c 00008DE5 		sub	r3, r3, #1	@ tmp157, tmp156,
1192:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1193:SRC/RTOS/tasks.c **** 
1194:SRC/RTOS/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1195:SRC/RTOS/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1196:SRC/RTOS/tasks.c **** 
1197:SRC/RTOS/tasks.c **** 		vTaskSuspendAll();
 1545              	[sp, #4]	@ tmp157, uxQueue
 1546 0e40 FEFFFFEB 		.loc 1 1211 0
1198:SRC/RTOS/tasks.c **** 		{
1199:SRC/RTOS/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1200:SRC/RTOS/tasks.c **** 			report the task name, state and stack high water mark. */
1201:SRC/RTOS/tasks.c **** 
1202:SRC/RTOS/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
 1547              	dr	r3, [sp, #4]	@ tmp158, uxQueue
 1548 0e44 00209DE5 		mov	r2, r3, asl #2	@ tmp160, tmp159,
 1549 0e48 0030A0E3 		mov	r3, r2, asl #2	@ tmp161, tmp160,
 1550 0e4c 0030C2E5 		add	r2, r2, r3	@ D.3896, tmp160, tmp161
1203:SRC/RTOS/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1551              		r3, .L133+8	@ tmp162,
 1552 0e50 00409DE5 		add	r3, r2, r3	@ D.3897, D.3896, tmp162
 1553 0e54 0400A0E1 		ldr	r3, [r3, #0]	@ D.3898, <variable>.uxNumberOfItems
 1554 0e58 FEFFFFEB 		cmp	r3, #0	@ D.3898,
 1555 0e5c 0030A0E1 		beq	.L126	@,
 1556 0e60 033084E0 		.loc 1 1213 0
 1557 0e64 0300A0E1 		ldr	r3, [sp, #4]	@ tmp163, uxQueue
 1558 0e68 20119FE5 		mov	r2, r3, asl #2	@ tmp165, tmp164,
 1559 0e6c 0320A0E3 		mov	r3, r2, asl #2	@ tmp166, tmp165,
 1560 0e70 FEFFFFEB 		add	r2, r2, r3	@ D.3899, tmp165, tmp166
1204:SRC/RTOS/tasks.c **** 
1205:SRC/RTOS/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
 1561              	L133+8	@ tmp167,
 1562 0e74 18319FE5 		add	r3, r2, r3	@ D.3900, D.3899, tmp167
 1563 0e78 003093E5 		ldr	r0, [sp, #0]	@, pcWriteBuffer
 1564 0e7c 013083E2 		mov	r1, r3	@, D.3900
 1565 0e80 04308DE5 		mov	r2, #82	@,
 1566              		bl	prvListTaskWithinSingleList	@
1206:SRC/RTOS/tasks.c **** 
1207:SRC/RTOS/tasks.c **** 			do
1208:SRC/RTOS/tasks.c **** 			{
1209:SRC/RTOS/tasks.c **** 				uxQueue--;
 1567              	
 1568 0e84 04309DE5 		.loc 1 1215 0
 1569 0e88 013043E2 		ldr	r3, [sp, #4]	@ tmp168, uxQueue
 1570 0e8c 04308DE5 		cmp	r3, #0	@ tmp168,
1210:SRC/RTOS/tasks.c **** 
1211:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
 1571              	e	.L127	@,
 1572 0e90 04309DE5 		.loc 1 1217 0
 1573 0e94 0321A0E1 		ldr	r3, .L133+12	@ tmp169,
 1574 0e98 0231A0E1 		ldr	r3, [r3, #0]	@ pxDelayedTaskList.76, pxDelayedTaskList
 1575 0e9c 032082E0 		ldr	r3, [r3, #0]	@ D.3902, <variable>.uxNumberOfItems
 1576 0ea0 F0309FE5 		cmp	r3, #0	@ D.3902,
 1577 0ea4 033082E0 		beq	.L128	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 50


 1578 0ea8 003093E5 		.loc 1 1219 0
 1579 0eac 000053E3 		ldr	r3, .L133+12	@ tmp170,
 1580 0eb0 0900000A 		ldr	r3, [r3, #0]	@ pxDelayedTaskList.77, pxDelayedTaskList
1212:SRC/RTOS/tasks.c **** 				{
1213:SRC/RTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
 1581              	sp, #0]	@, pcWriteBuffer
 1582 0eb4 04309DE5 		mov	r1, r3	@, pxDelayedTaskList.77
 1583 0eb8 0321A0E1 		mov	r2, #66	@,
 1584 0ebc 0231A0E1 		bl	prvListTaskWithinSingleList	@
 1585 0ec0 032082E0 	.L128:
 1586 0ec4 CC309FE5 		.loc 1 1222 0
 1587 0ec8 033082E0 		ldr	r3, .L133+16	@ tmp171,
 1588 0ecc 00009DE5 		ldr	r3, [r3, #0]	@ pxOverflowDelayedTaskList.78, pxOverflowDelayedTaskList
 1589 0ed0 0310A0E1 		ldr	r3, [r3, #0]	@ D.3905, <variable>.uxNumberOfItems
 1590 0ed4 5220A0E3 		cmp	r3, #0	@ D.3905,
 1591 0ed8 ED0200EB 		beq	.L129	@,
 1592              		.loc 1 1224 0
1214:SRC/RTOS/tasks.c **** 				}
1215:SRC/RTOS/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1593              	33+16	@ tmp172,
 1594 0edc 04309DE5 		ldr	r3, [r3, #0]	@ pxOverflowDelayedTaskList.79, pxOverflowDelayedTaskList
 1595 0ee0 000053E3 		ldr	r0, [sp, #0]	@, pcWriteBuffer
 1596 0ee4 E6FFFF1A 		mov	r1, r3	@, pxOverflowDelayedTaskList.79
1216:SRC/RTOS/tasks.c **** 
1217:SRC/RTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
 1597              		r2, #66	@,
 1598 0ee8 AC309FE5 		bl	prvListTaskWithinSingleList	@
 1599 0eec 003093E5 	.L129:
 1600 0ef0 003093E5 		.loc 1 1229 0
 1601 0ef4 000053E3 		ldr	r3, .L133+20	@ tmp173,
 1602 0ef8 0500000A 		ldr	r3, [r3, #0]	@ D.3907, xTasksWaitingTermination.uxNumberOfItems
1218:SRC/RTOS/tasks.c **** 			{
1219:SRC/RTOS/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
 1603              	3, #0	@ D.3907,
 1604 0efc 98309FE5 		beq	.L130	@,
 1605 0f00 003093E5 		.loc 1 1231 0
 1606 0f04 00009DE5 		ldr	r0, [sp, #0]	@, pcWriteBuffer
 1607 0f08 0310A0E1 		ldr	r1, .L133+20	@,
 1608 0f0c 4220A0E3 		mov	r2, #68	@,
 1609 0f10 DF0200EB 		bl	prvListTaskWithinSingleList	@
 1610              	.L130:
1220:SRC/RTOS/tasks.c **** 			}
1221:SRC/RTOS/tasks.c **** 
1222:SRC/RTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
 1611              	1238 0
 1612 0f14 84309FE5 		ldr	r3, .L133+24	@ tmp174,
 1613 0f18 003093E5 		ldr	r3, [r3, #0]	@ D.3908, xSuspendedTaskList.uxNumberOfItems
 1614 0f1c 003093E5 		cmp	r3, #0	@ D.3908,
 1615 0f20 000053E3 		beq	.L131	@,
 1616 0f24 0500000A 		.loc 1 1240 0
1223:SRC/RTOS/tasks.c **** 			{
1224:SRC/RTOS/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
 1617              	0, [sp, #0]	@, pcWriteBuffer
 1618 0f28 70309FE5 		ldr	r1, .L133+24	@,
 1619 0f2c 003093E5 		mov	r2, #83	@,
 1620 0f30 00009DE5 		bl	prvListTaskWithinSingleList	@
 1621 0f34 0310A0E1 	.L131:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 51


 1622 0f38 4220A0E3 		.loc 1 1245 0
 1623 0f3c D40200EB 		bl	xTaskResumeAll	@
 1624              		.loc 1 1246 0
1225:SRC/RTOS/tasks.c **** 			}
1226:SRC/RTOS/tasks.c **** 
1227:SRC/RTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1228:SRC/RTOS/tasks.c **** 			{
1229:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
 1625              	 sp, #8	@,,
 1626 0f40 5C309FE5 		ldmfd	sp!, {r4, lr}
 1627 0f44 003093E5 		bx	lr
 1628 0f48 000053E3 	.L134:
 1629 0f4c 0300000A 		.align	2
1230:SRC/RTOS/tasks.c **** 				{
1231:SRC/RTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_
 1630              	:
 1631 0f50 00009DE5 		.word	.LC1
 1632 0f54 48109FE5 		.word	uxTopUsedPriority
 1633 0f58 4420A0E3 		.word	pxReadyTasksLists
 1634 0f5c CC0200EB 		.word	pxDelayedTaskList
 1635              		.word	pxOverflowDelayedTaskList
1232:SRC/RTOS/tasks.c **** 				}
1233:SRC/RTOS/tasks.c **** 			}
1234:SRC/RTOS/tasks.c **** 			#endif
1235:SRC/RTOS/tasks.c **** 
1236:SRC/RTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1237:SRC/RTOS/tasks.c **** 			{
1238:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
 1636              		xTasksWaitingTermination
 1637 0f60 40309FE5 		.word	xSuspendedTaskList
 1638 0f64 003093E5 	.LFE18:
 1639 0f68 000053E3 		.size	vTaskList, .-vTaskList
 1640 0f6c 0300000A 		.align	2
1239:SRC/RTOS/tasks.c **** 				{
1240:SRC/RTOS/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR
 1641              	bal	vTaskStartTrace
 1642 0f70 00009DE5 		.type	vTaskStartTrace, %function
 1643 0f74 2C109FE5 	vTaskStartTrace:
 1644 0f78 5320A0E3 	.LFB19:
 1645 0f7c C40200EB 		.loc 1 1319 0
 1646              		@ Function supports interworking.
1241:SRC/RTOS/tasks.c **** 				}
1242:SRC/RTOS/tasks.c **** 			}
1243:SRC/RTOS/tasks.c **** 			#endif
1244:SRC/RTOS/tasks.c **** 		}
1245:SRC/RTOS/tasks.c **** 		xTaskResumeAll();
 1647              	s = 0, pretend = 0, frame = 8
 1648 0f80 FEFFFFEB 		@ frame_needed = 0, uses_anonymous_args = 0
1246:SRC/RTOS/tasks.c **** 	}
 1649              	tr	lr, [sp, #-4]!	@,
 1650 0f84 08D08DE2 	.LCFI28:
 1651 0f88 1040BDE8 		sub	sp, sp, #8	@,,
 1652 0f8c 1EFF2FE1 	.LCFI29:
 1653              		str	r0, [sp, #4]	@ pcBuffer, pcBuffer
 1654              		str	r1, [sp, #0]	@ ulBufferSize, ulBufferSize
 1655              		.loc 1 1320 0
 1656 0f90 08000000 		bl	vPortEnterCritical	@
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 52


 1657 0f94 10000000 		.loc 1 1322 0
 1658 0f98 34000000 		ldr	r2, [sp, #4]	@ pcBuffer.80, pcBuffer
 1659 0f9c AC000000 		ldr	r3, .L137	@ tmp136,
 1660 0fa0 B0000000 		str	r2, [r3, #0]	@ pcBuffer.80, pcTraceBuffer
 1661 0fa4 C8000000 		.loc 1 1323 0
 1662 0fa8 DC000000 		ldr	r2, .L137+4	@ tmp137,
 1663              		ldr	r3, [sp, #4]	@ tmp138, pcBuffer
 1664              		str	r3, [r2, #0]	@ tmp138, pcTraceBufferStart
 1665              		.loc 1 1324 0
 1666              		ldr	r3, [sp, #0]	@ tmp139, ulBufferSize
 1667              		sub	r2, r3, #8	@ D.3925, tmp139,
 1668              		ldr	r3, [sp, #4]	@ tmp140, pcBuffer
 1669              		add	r2, r3, r2	@ pcTraceBufferEnd.81, tmp140, D.3925
1247:SRC/RTOS/tasks.c **** 
1248:SRC/RTOS/tasks.c **** #endif
1249:SRC/RTOS/tasks.c **** /*----------------------------------------------------------*/
1250:SRC/RTOS/tasks.c **** 
1251:SRC/RTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1252:SRC/RTOS/tasks.c **** 
1253:SRC/RTOS/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1254:SRC/RTOS/tasks.c **** 	{
1255:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1256:SRC/RTOS/tasks.c **** 	unsigned long ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1257:SRC/RTOS/tasks.c **** 
1258:SRC/RTOS/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1259:SRC/RTOS/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1260:SRC/RTOS/tasks.c **** 
1261:SRC/RTOS/tasks.c **** 		vTaskSuspendAll();
1262:SRC/RTOS/tasks.c **** 		{
1263:SRC/RTOS/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1264:SRC/RTOS/tasks.c **** 			generating a table of run timer percentages in the provided
1265:SRC/RTOS/tasks.c **** 			buffer. */
1266:SRC/RTOS/tasks.c **** 
1267:SRC/RTOS/tasks.c **** 			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
1268:SRC/RTOS/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1269:SRC/RTOS/tasks.c **** 
1270:SRC/RTOS/tasks.c **** 			uxQueue = uxTopUsedPriority + 1;
1271:SRC/RTOS/tasks.c **** 
1272:SRC/RTOS/tasks.c **** 			do
1273:SRC/RTOS/tasks.c **** 			{
1274:SRC/RTOS/tasks.c **** 				uxQueue--;
1275:SRC/RTOS/tasks.c **** 
1276:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
1277:SRC/RTOS/tasks.c **** 				{
1278:SRC/RTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1279:SRC/RTOS/tasks.c **** 				}
1280:SRC/RTOS/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1281:SRC/RTOS/tasks.c **** 
1282:SRC/RTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
1283:SRC/RTOS/tasks.c **** 			{
1284:SRC/RTOS/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1285:SRC/RTOS/tasks.c **** 			}
1286:SRC/RTOS/tasks.c **** 
1287:SRC/RTOS/tasks.c **** 			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
1288:SRC/RTOS/tasks.c **** 			{
1289:SRC/RTOS/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1290:SRC/RTOS/tasks.c **** 			}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 53


1291:SRC/RTOS/tasks.c **** 
1292:SRC/RTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1293:SRC/RTOS/tasks.c **** 			{
1294:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
1295:SRC/RTOS/tasks.c **** 				{
1296:SRC/RTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, u
1297:SRC/RTOS/tasks.c **** 				}
1298:SRC/RTOS/tasks.c **** 			}
1299:SRC/RTOS/tasks.c **** 			#endif
1300:SRC/RTOS/tasks.c **** 
1301:SRC/RTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1302:SRC/RTOS/tasks.c **** 			{
1303:SRC/RTOS/tasks.c **** 				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1304:SRC/RTOS/tasks.c **** 				{
1305:SRC/RTOS/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, ulTotal
1306:SRC/RTOS/tasks.c **** 				}
1307:SRC/RTOS/tasks.c **** 			}
1308:SRC/RTOS/tasks.c **** 			#endif
1309:SRC/RTOS/tasks.c **** 		}
1310:SRC/RTOS/tasks.c **** 		xTaskResumeAll();
1311:SRC/RTOS/tasks.c **** 	}
1312:SRC/RTOS/tasks.c **** 
1313:SRC/RTOS/tasks.c **** #endif
1314:SRC/RTOS/tasks.c **** /*----------------------------------------------------------*/
1315:SRC/RTOS/tasks.c **** 
1316:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1317:SRC/RTOS/tasks.c **** 
1318:SRC/RTOS/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1319:SRC/RTOS/tasks.c **** 	{
 1670              	p141,
 1671              		str	r2, [r3, #0]	@ pcTraceBufferEnd.81, pcTraceBufferEnd
 1672              		.loc 1 1325 0
 1673              		ldr	r2, .L137+12	@ tmp142,
 1674 0fac 04E02DE5 		mov	r3, #1	@ tmp143,
 1675              		str	r3, [r2, #0]	@ tmp143, xTracing
 1676 0fb0 08D04DE2 		.loc 1 1327 0
 1677              		bl	vPortExitCritical	@
 1678 0fb4 04008DE5 		.loc 1 1328 0
 1679 0fb8 00108DE5 		add	sp, sp, #8	@,,
1320:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 1680              	sp], #4
 1681 0fbc FEFFFFEB 		bx	lr
1321:SRC/RTOS/tasks.c **** 		{
1322:SRC/RTOS/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
 1682              	138:
 1683 0fc0 04209DE5 		.align	2
 1684 0fc4 40309FE5 	.L137:
 1685 0fc8 002083E5 		.word	pcTraceBuffer
1323:SRC/RTOS/tasks.c **** 			pcTraceBufferStart = pcBuffer;
 1686              	rd	pcTraceBufferStart
 1687 0fcc 3C209FE5 		.word	pcTraceBufferEnd
 1688 0fd0 04309DE5 		.word	xTracing
 1689 0fd4 003082E5 	.LFE19:
1324:SRC/RTOS/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
 1690              	ze	vTaskStartTrace, .-vTaskStartTrace
 1691 0fd8 00309DE5 		.align	2
 1692 0fdc 082043E2 		.global	ulTaskEndTrace
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 54


 1693 0fe0 04309DE5 		.type	ulTaskEndTrace, %function
 1694 0fe4 022083E0 	ulTaskEndTrace:
 1695 0fe8 24309FE5 	.LFB20:
 1696 0fec 002083E5 		.loc 1 1336 0
1325:SRC/RTOS/tasks.c **** 			xTracing = pdTRUE;
 1697              	tion supports interworking.
 1698 0ff0 20209FE5 		@ args = 0, pretend = 0, frame = 4
 1699 0ff4 0130A0E3 		@ frame_needed = 0, uses_anonymous_args = 0
 1700 0ff8 003082E5 		str	lr, [sp, #-4]!	@,
1326:SRC/RTOS/tasks.c **** 		}
1327:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 1701              	I30:
 1702 0ffc FEFFFFEB 		sub	sp, sp, #4	@,,
1328:SRC/RTOS/tasks.c **** 	}
 1703              	CFI31:
 1704 1000 08D08DE2 		.loc 1 1339 0
 1705 1004 04E09DE4 		bl	vPortEnterCritical	@
 1706 1008 1EFF2FE1 		.loc 1 1340 0
 1707              		ldr	r2, .L141	@ tmp140,
 1708              		mov	r3, #0	@ tmp141,
 1709              		str	r3, [r2, #0]	@ tmp141, xTracing
 1710 100c F0000000 		.loc 1 1341 0
 1711 1010 F4000000 		bl	vPortExitCritical	@
 1712 1014 F8000000 		.loc 1 1343 0
 1713 1018 30000000 		ldr	r3, .L141+4	@ tmp142,
 1714              		ldr	r3, [r3, #0]	@ pcTraceBuffer.82, pcTraceBuffer
 1715              		mov	r2, r3	@ pcTraceBuffer.83, pcTraceBuffer.82
 1716              		ldr	r3, .L141+8	@ tmp143,
 1717              		ldr	r3, [r3, #0]	@ pcTraceBufferStart.84, pcTraceBufferStart
 1718              		rsb	r3, r3, r2	@ D.3935, pcTraceBufferStart.85, pcTraceBuffer.83
 1719              		str	r3, [sp, #0]	@ D.3935, ulBufferLength
 1720              		.loc 1 1345 0
1329:SRC/RTOS/tasks.c **** 
1330:SRC/RTOS/tasks.c **** #endif
1331:SRC/RTOS/tasks.c **** /*----------------------------------------------------------*/
1332:SRC/RTOS/tasks.c **** 
1333:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1334:SRC/RTOS/tasks.c **** 
1335:SRC/RTOS/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1336:SRC/RTOS/tasks.c **** 	{
 1721              	@ D.3936, ulBufferLength
 1722              		.loc 1 1346 0
 1723              		mov	r0, r3	@, <result>
 1724              		add	sp, sp, #4	@,,
 1725 101c 04E02DE5 		ldr	lr, [sp], #4
 1726              		bx	lr
 1727 1020 04D04DE2 	.L142:
 1728              		.align	2
1337:SRC/RTOS/tasks.c **** 	unsigned long ulBufferLength;
1338:SRC/RTOS/tasks.c **** 
1339:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
 1729              	.word	xTracing
 1730 1024 FEFFFFEB 		.word	pcTraceBuffer
1340:SRC/RTOS/tasks.c **** 			xTracing = pdFALSE;
 1731              	word	pcTraceBufferStart
 1732 1028 38209FE5 	.LFE20:
 1733 102c 0030A0E3 		.size	ulTaskEndTrace, .-ulTaskEndTrace
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 55


 1734 1030 003082E5 		.align	2
1341:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
 1735              	obal	vTaskIncrementTick
 1736 1034 FEFFFFEB 		.type	vTaskIncrementTick, %function
1342:SRC/RTOS/tasks.c **** 
1343:SRC/RTOS/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
 1737              	askIncrementTick:
 1738 1038 2C309FE5 	.LFB21:
 1739 103c 003093E5 		.loc 1 1359 0
 1740 1040 0320A0E1 		@ Function supports interworking.
 1741 1044 24309FE5 		@ args = 0, pretend = 0, frame = 12
 1742 1048 003093E5 		@ frame_needed = 0, uses_anonymous_args = 0
 1743 104c 023063E0 		str	lr, [sp, #-4]!	@,
 1744 1050 00308DE5 	.LCFI32:
1344:SRC/RTOS/tasks.c **** 
1345:SRC/RTOS/tasks.c **** 		return ulBufferLength;
 1745              	 sp, #12	@,,
 1746 1054 00309DE5 	.LCFI33:
1346:SRC/RTOS/tasks.c **** 	}
 1747              	loc 1 1363 0
 1748 1058 0300A0E1 		ldr	r3, .L155	@ tmp161,
 1749 105c 04D08DE2 		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.86, uxSchedulerSuspended
 1750 1060 04E09DE4 		cmp	r3, #0	@ uxSchedulerSuspended.86,
 1751 1064 1EFF2FE1 		bne	.L144	@,
 1752              		.loc 1 1365 0
 1753              		ldr	r3, .L155+4	@ tmp162,
 1754              		ldr	r3, [r3, #0]	@ xTickCount.87, xTickCount
 1755 1068 30000000 		add	r2, r3, #1	@ xTickCount.88, xTickCount.87,
 1756 106c F0000000 		ldr	r3, .L155+4	@ tmp163,
 1757 1070 F4000000 		str	r2, [r3, #0]	@ xTickCount.88, xTickCount
 1758              		.loc 1 1366 0
 1759              		ldr	r3, .L155+4	@ tmp164,
 1760              		ldr	r3, [r3, #0]	@ xTickCount.89, xTickCount
 1761              		cmp	r3, #0	@ xTickCount.89,
 1762              		bne	.L146	@,
 1763              	.LBB4:
 1764              		.loc 1 1373 0
1347:SRC/RTOS/tasks.c **** 
1348:SRC/RTOS/tasks.c **** #endif
1349:SRC/RTOS/tasks.c **** 
1350:SRC/RTOS/tasks.c **** 
1351:SRC/RTOS/tasks.c **** 
1352:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
1353:SRC/RTOS/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1354:SRC/RTOS/tasks.c ****  * documented in task.h
1355:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
1356:SRC/RTOS/tasks.c **** 
1357:SRC/RTOS/tasks.c **** 
1358:SRC/RTOS/tasks.c **** void vTaskIncrementTick( void )
1359:SRC/RTOS/tasks.c **** {
 1765              	 tmp165,
 1766              		ldr	r3, [r3, #0]	@ tmp166, pxDelayedTaskList
 1767              		str	r3, [sp, #8]	@ tmp166, pxTemp
 1768              		.loc 1 1374 0
 1769 1074 04E02DE5 		ldr	r3, .L155+12	@ tmp167,
 1770              		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.90, pxOverflowDelayedTaskList
 1771 1078 0CD04DE2 		ldr	r3, .L155+8	@ tmp168,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 56


 1772              		str	r2, [r3, #0]	@ pxOverflowDelayedTaskList.90, pxDelayedTaskList
1360:SRC/RTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1361:SRC/RTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1362:SRC/RTOS/tasks.c **** 	tasks to be unblocked. */
1363:SRC/RTOS/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1773              	1375 0
 1774 107c 78319FE5 		ldr	r2, .L155+12	@ tmp169,
 1775 1080 003093E5 		ldr	r3, [sp, #8]	@ tmp170, pxTemp
 1776 1084 000053E3 		str	r3, [r2, #0]	@ tmp170, pxOverflowDelayedTaskList
 1777 1088 5300001A 		.loc 1 1376 0
1364:SRC/RTOS/tasks.c **** 	{
1365:SRC/RTOS/tasks.c **** 		++xTickCount;
 1778              	r3, .L155+16	@ tmp171,
 1779 108c 6C319FE5 		ldr	r3, [r3, #0]	@ xNumOfOverflows.91, xNumOfOverflows
 1780 1090 003093E5 		add	r2, r3, #1	@ xNumOfOverflows.92, xNumOfOverflows.91,
 1781 1094 012083E2 		ldr	r3, .L155+16	@ tmp172,
 1782 1098 60319FE5 		str	r2, [r3, #0]	@ xNumOfOverflows.92, xNumOfOverflows
 1783 109c 002083E5 		b	.L146	@
1366:SRC/RTOS/tasks.c **** 		if( xTickCount == ( portTickType ) 0 )
 1784              	
 1785 10a0 58319FE5 	.LBE4:
 1786 10a4 003093E5 	.LBB5:
 1787 10a8 000053E3 		.loc 1 1380 0
 1788 10ac 3700001A 		ldr	r1, [sp, #4]	@, pxTCB
 1789              		ldr	r3, [r1, #4]	@ D.3953, <variable>.xGenericListItem.xItemValue
1367:SRC/RTOS/tasks.c **** 		{
1368:SRC/RTOS/tasks.c **** 			xList *pxTemp;
1369:SRC/RTOS/tasks.c **** 
1370:SRC/RTOS/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1371:SRC/RTOS/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1372:SRC/RTOS/tasks.c **** 			an error! */
1373:SRC/RTOS/tasks.c **** 			pxTemp = pxDelayedTaskList;
 1790              	r2, .L155+4	@ tmp173,
 1791 10b0 4C319FE5 		ldr	r2, [r2, #0]	@ xTickCount.93, xTickCount
 1792 10b4 003093E5 		cmp	r3, r2	@ D.3953, xTickCount.93
 1793 10b8 08308DE5 		bhi	.L154	@,
1374:SRC/RTOS/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1794              		r2, [sp, #4]	@, pxTCB
 1795 10bc 44319FE5 		add	r3, r2, #4	@ D.3955,,
 1796 10c0 002093E5 		mov	r0, r3	@, D.3955
 1797 10c4 38319FE5 		bl	vListRemove	@
 1798 10c8 002083E5 		ldr	r1, [sp, #4]	@, pxTCB
1375:SRC/RTOS/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1799              	r3, [r1, #40]	@ D.3956, <variable>.xEventListItem.pvContainer
 1800 10cc 34219FE5 		cmp	r3, #0	@ D.3956,
 1801 10d0 08309DE5 		beq	.L148	@,
 1802 10d4 003082E5 		ldr	r2, [sp, #4]	@, pxTCB
1376:SRC/RTOS/tasks.c **** 			xNumOfOverflows++;
 1803              		r3, r2, #24	@ D.3957,,
 1804 10d8 2C319FE5 		mov	r0, r3	@, D.3957
 1805 10dc 003093E5 		bl	vListRemove	@
 1806 10e0 012083E2 	.L148:
 1807 10e4 20319FE5 		ldr	r1, [sp, #4]	@, pxTCB
 1808 10e8 002083E5 		ldr	r3, [r1, #44]	@ D.3958, <variable>.uxPriority
 1809 10ec 270000EA 		ldr	r2, .L155+20	@ tmp174,
 1810              		ldr	r2, [r2, #0]	@ uxTopReadyPriority.94, uxTopReadyPriority
 1811              		cmp	r3, r2	@ D.3958, uxTopReadyPriority.94
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 57


 1812              		bls	.L149	@,
1377:SRC/RTOS/tasks.c **** 		}
1378:SRC/RTOS/tasks.c **** 
1379:SRC/RTOS/tasks.c **** 		/* See if this tick has made a timeout expire. */
1380:SRC/RTOS/tasks.c **** 		prvCheckDelayedTasks();
 1813              	sp, #4]	@, pxTCB
 1814 10f0 04109DE5 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.95, <variable>.uxPriority
 1815 10f4 043091E5 		ldr	r3, .L155+20	@ tmp175,
 1816 10f8 00219FE5 		str	r2, [r3, #0]	@ uxTopReadyPriority.95, uxTopReadyPriority
 1817 10fc 002092E5 	.L149:
 1818 1100 020053E1 		ldr	r1, [sp, #4]	@, pxTCB
 1819 1104 3900008A 		ldr	r3, [r1, #44]	@ D.3961, <variable>.uxPriority
 1820 1108 04209DE5 		mov	r2, r3, asl #2	@ tmp177, tmp176,
 1821 110c 043082E2 		mov	r3, r2, asl #2	@ tmp178, tmp177,
 1822 1110 0300A0E1 		add	r2, r2, r3	@ D.3962, tmp177, tmp178
 1823 1114 FEFFFFEB 		ldr	r3, .L155+24	@ tmp179,
 1824 1118 04109DE5 		add	r3, r2, r3	@ D.3963, D.3962, tmp179
 1825 111c 283091E5 		ldr	r1, [sp, #4]	@, pxTCB
 1826 1120 000053E3 		add	r2, r1, #4	@ D.3964,,
 1827 1124 0300000A 		mov	r0, r3	@, D.3963
 1828 1128 04209DE5 		mov	r1, r2	@, D.3964
 1829 112c 183082E2 		bl	vListInsertEnd	@
 1830 1130 0300A0E1 	.L146:
 1831 1134 FEFFFFEB 		ldr	r3, .L155+8	@ tmp180,
 1832              		ldr	r3, [r3, #0]	@ pxDelayedTaskList.97, pxDelayedTaskList
 1833 1138 04109DE5 		ldr	r3, [r3, #0]	@ D.3967, <variable>.uxNumberOfItems
 1834 113c 2C3091E5 		cmp	r3, #0	@ D.3967,
 1835 1140 C8209FE5 		beq	.L150	@,
 1836 1144 002092E5 		ldr	r3, .L155+8	@ tmp181,
 1837 1148 020053E1 		ldr	r3, [r3, #0]	@ pxDelayedTaskList.98, pxDelayedTaskList
 1838 114c 0300009A 		ldr	r3, [r3, #12]	@ D.3969, <variable>.xListEnd.pxNext
 1839 1150 04309DE5 		ldr	r3, [r3, #12]	@ D.3970, <variable>.pvOwner
 1840 1154 2C2093E5 		str	r3, [sp, #0]	@ D.3970, iftmp.96
 1841 1158 B0309FE5 		b	.L151	@
 1842 115c 002083E5 	.L150:
 1843              		mov	r2, #0	@,
 1844 1160 04109DE5 		str	r2, [sp, #0]	@, iftmp.96
 1845 1164 2C3091E5 	.L151:
 1846 1168 0321A0E1 		ldr	r3, [sp, #0]	@, iftmp.96
 1847 116c 0231A0E1 		str	r3, [sp, #4]	@, pxTCB
 1848 1170 032082E0 		ldr	r1, [sp, #4]	@, pxTCB
 1849 1174 98309FE5 		cmp	r1, #0	@,
 1850 1178 033082E0 		bne	.L152	@,
 1851 117c 04109DE5 		b	.L154	@
 1852 1180 042081E2 	.L144:
 1853 1184 0300A0E1 	.LBE5:
 1854 1188 0210A0E1 		.loc 1 1384 0
 1855 118c FEFFFFEB 		ldr	r3, .L155+28	@ tmp182,
 1856              		ldr	r3, [r3, #0]	@ uxMissedTicks.99, uxMissedTicks
 1857 1190 6C309FE5 		add	r2, r3, #1	@ uxMissedTicks.100, uxMissedTicks.99,
 1858 1194 003093E5 		ldr	r3, .L155+28	@ tmp183,
 1859 1198 003093E5 		str	r2, [r3, #0]	@ uxMissedTicks.100, uxMissedTicks
 1860 119c 000053E3 	.L154:
 1861 11a0 0500000A 		.loc 1 1411 0
 1862 11a4 58309FE5 		add	sp, sp, #12	@,,
 1863 11a8 003093E5 		ldr	lr, [sp], #4
 1864 11ac 0C3093E5 		bx	lr
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 58


 1865 11b0 0C3093E5 	.L156:
 1866 11b4 00308DE5 		.align	2
 1867 11b8 010000EA 	.L155:
 1868              		.word	uxSchedulerSuspended
 1869 11bc 0020A0E3 		.word	xTickCount
 1870 11c0 00208DE5 		.word	pxDelayedTaskList
 1871              		.word	pxOverflowDelayedTaskList
 1872 11c4 00309DE5 		.word	xNumOfOverflows
 1873 11c8 04308DE5 		.word	uxTopReadyPriority
 1874 11cc 04109DE5 		.word	pxReadyTasksLists
 1875 11d0 000051E3 		.word	uxMissedTicks
 1876 11d4 C5FFFF1A 	.LFE21:
 1877 11d8 040000EA 		.size	vTaskIncrementTick, .-vTaskIncrementTick
 1878              		.align	2
 1879              		.global	vTaskSwitchContext
1381:SRC/RTOS/tasks.c **** 	}
1382:SRC/RTOS/tasks.c **** 	else
1383:SRC/RTOS/tasks.c **** 	{
1384:SRC/RTOS/tasks.c **** 		++uxMissedTicks;
 1880              	loc 1 1555 0
 1881 11dc 34309FE5 		@ Function supports interworking.
 1882 11e0 003093E5 		@ args = 0, pretend = 0, frame = 4
 1883 11e4 012083E2 		@ frame_needed = 0, uses_anonymous_args = 0
 1884 11e8 28309FE5 		@ link register save eliminated.
 1885 11ec 002083E5 		sub	sp, sp, #4	@,,
 1886              	.LCFI34:
1385:SRC/RTOS/tasks.c **** 
1386:SRC/RTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1387:SRC/RTOS/tasks.c **** 		scheduler is locked. */
1388:SRC/RTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1389:SRC/RTOS/tasks.c **** 		{
1390:SRC/RTOS/tasks.c **** 			extern void vApplicationTickHook( void );
1391:SRC/RTOS/tasks.c **** 
1392:SRC/RTOS/tasks.c **** 			vApplicationTickHook();
1393:SRC/RTOS/tasks.c **** 		}
1394:SRC/RTOS/tasks.c **** 		#endif
1395:SRC/RTOS/tasks.c **** 	}
1396:SRC/RTOS/tasks.c **** 
1397:SRC/RTOS/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1398:SRC/RTOS/tasks.c **** 	{
1399:SRC/RTOS/tasks.c **** 		extern void vApplicationTickHook( void );
1400:SRC/RTOS/tasks.c **** 
1401:SRC/RTOS/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1402:SRC/RTOS/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1403:SRC/RTOS/tasks.c **** 		if( uxMissedTicks == 0 )
1404:SRC/RTOS/tasks.c **** 		{
1405:SRC/RTOS/tasks.c **** 			vApplicationTickHook();
1406:SRC/RTOS/tasks.c **** 		}
1407:SRC/RTOS/tasks.c **** 	}
1408:SRC/RTOS/tasks.c **** 	#endif
1409:SRC/RTOS/tasks.c **** 
1410:SRC/RTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1411:SRC/RTOS/tasks.c **** }
 1887              	 1556 0
 1888 11f0 0CD08DE2 		ldr	r3, .L165	@ tmp172,
 1889 11f4 04E09DE4 		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.101, uxSchedulerSuspended
 1890 11f8 1EFF2FE1 		cmp	r3, #0	@ uxSchedulerSuspended.101,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 59


 1891              		beq	.L160	@,
 1892              		.loc 1 1560 0
 1893              		ldr	r2, .L165+4	@ tmp173,
 1894 11fc 1C000000 		mov	r3, #1	@ tmp174,
 1895 1200 0C000000 		str	r3, [r2, #0]	@ tmp174, xMissedYield
 1896 1204 AC000000 		b	.L164	@
 1897 1208 B0000000 	.L161:
 1898 120c 28000000 		.loc 1 1586 0
 1899 1210 14000000 		ldr	r3, .L165+8	@ tmp175,
 1900 1214 34000000 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.102, uxTopReadyPriority
 1901 1218 20000000 		sub	r2, r3, #1	@ uxTopReadyPriority.103, uxTopReadyPriority.102,
 1902              		ldr	r3, .L165+8	@ tmp176,
 1903              		str	r2, [r3, #0]	@ uxTopReadyPriority.103, uxTopReadyPriority
 1904              	.L160:
 1905              		.loc 1 1584 0
 1906              		ldr	r3, .L165+8	@ tmp177,
 1907              		ldr	r3, [r3, #0]	@ uxTopReadyPriority.104, uxTopReadyPriority
 1908              		mov	r2, r3, asl #2	@ tmp179, tmp178,
1412:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1413:SRC/RTOS/tasks.c **** 
1414:SRC/RTOS/tasks.c **** #if ( ( INCLUDE_vTaskCleanUpResources == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1415:SRC/RTOS/tasks.c **** 
1416:SRC/RTOS/tasks.c **** 	void vTaskCleanUpResources( void )
1417:SRC/RTOS/tasks.c **** 	{
1418:SRC/RTOS/tasks.c **** 	unsigned short usQueue;
1419:SRC/RTOS/tasks.c **** 	volatile tskTCB *pxTCB;
1420:SRC/RTOS/tasks.c **** 
1421:SRC/RTOS/tasks.c **** 		usQueue = ( unsigned short ) uxTopUsedPriority + ( unsigned short ) 1;
1422:SRC/RTOS/tasks.c **** 
1423:SRC/RTOS/tasks.c **** 		/* Remove any TCB's from the ready queues. */
1424:SRC/RTOS/tasks.c **** 		do
1425:SRC/RTOS/tasks.c **** 		{
1426:SRC/RTOS/tasks.c **** 			usQueue--;
1427:SRC/RTOS/tasks.c **** 
1428:SRC/RTOS/tasks.c **** 			while( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ usQueue ] ) ) )
1429:SRC/RTOS/tasks.c **** 			{
1430:SRC/RTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &( pxReadyTasksLists[ usQueue ] ) );
1431:SRC/RTOS/tasks.c **** 				vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1432:SRC/RTOS/tasks.c **** 
1433:SRC/RTOS/tasks.c **** 				prvDeleteTCB( ( tskTCB * ) pxTCB );
1434:SRC/RTOS/tasks.c **** 			}
1435:SRC/RTOS/tasks.c **** 		}while( usQueue > ( unsigned short ) tskIDLE_PRIORITY );
1436:SRC/RTOS/tasks.c **** 
1437:SRC/RTOS/tasks.c **** 		/* Remove any TCB's from the delayed queue. */
1438:SRC/RTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList1 ) )
1439:SRC/RTOS/tasks.c **** 		{
1440:SRC/RTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList1 );
1441:SRC/RTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1442:SRC/RTOS/tasks.c **** 
1443:SRC/RTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1444:SRC/RTOS/tasks.c **** 		}
1445:SRC/RTOS/tasks.c **** 
1446:SRC/RTOS/tasks.c **** 		/* Remove any TCB's from the overflow delayed queue. */
1447:SRC/RTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xDelayedTaskList2 ) )
1448:SRC/RTOS/tasks.c **** 		{
1449:SRC/RTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xDelayedTaskList2 );
1450:SRC/RTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 60


1451:SRC/RTOS/tasks.c **** 
1452:SRC/RTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1453:SRC/RTOS/tasks.c **** 		}
1454:SRC/RTOS/tasks.c **** 
1455:SRC/RTOS/tasks.c **** 		while( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
1456:SRC/RTOS/tasks.c **** 		{
1457:SRC/RTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxTCB, &xSuspendedTaskList );
1458:SRC/RTOS/tasks.c **** 			vListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) );
1459:SRC/RTOS/tasks.c **** 
1460:SRC/RTOS/tasks.c **** 			prvDeleteTCB( ( tskTCB * ) pxTCB );
1461:SRC/RTOS/tasks.c **** 		}
1462:SRC/RTOS/tasks.c **** 	}
1463:SRC/RTOS/tasks.c **** 
1464:SRC/RTOS/tasks.c **** #endif
1465:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1466:SRC/RTOS/tasks.c **** 
1467:SRC/RTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1468:SRC/RTOS/tasks.c **** 
1469:SRC/RTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxTagValue )
1470:SRC/RTOS/tasks.c **** 	{
1471:SRC/RTOS/tasks.c **** 	tskTCB *xTCB;
1472:SRC/RTOS/tasks.c **** 
1473:SRC/RTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1474:SRC/RTOS/tasks.c **** 		if( xTask == NULL )
1475:SRC/RTOS/tasks.c **** 		{
1476:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1477:SRC/RTOS/tasks.c **** 		}
1478:SRC/RTOS/tasks.c **** 		else
1479:SRC/RTOS/tasks.c **** 		{
1480:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1481:SRC/RTOS/tasks.c **** 		}
1482:SRC/RTOS/tasks.c **** 
1483:SRC/RTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1484:SRC/RTOS/tasks.c **** 		the value can be accessed from an interrupt. */
1485:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
1486:SRC/RTOS/tasks.c **** 			xTCB->pxTaskTag = pxTagValue;
1487:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
1488:SRC/RTOS/tasks.c **** 	}
1489:SRC/RTOS/tasks.c **** 
1490:SRC/RTOS/tasks.c **** #endif
1491:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1492:SRC/RTOS/tasks.c **** 
1493:SRC/RTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1494:SRC/RTOS/tasks.c **** 
1495:SRC/RTOS/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1496:SRC/RTOS/tasks.c **** 	{
1497:SRC/RTOS/tasks.c **** 	tskTCB *xTCB;
1498:SRC/RTOS/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1499:SRC/RTOS/tasks.c **** 
1500:SRC/RTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1501:SRC/RTOS/tasks.c **** 		if( xTask == NULL )
1502:SRC/RTOS/tasks.c **** 		{
1503:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1504:SRC/RTOS/tasks.c **** 		}
1505:SRC/RTOS/tasks.c **** 		else
1506:SRC/RTOS/tasks.c **** 		{
1507:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 61


1508:SRC/RTOS/tasks.c **** 		}
1509:SRC/RTOS/tasks.c **** 
1510:SRC/RTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1511:SRC/RTOS/tasks.c **** 		the value can be accessed from an interrupt. */
1512:SRC/RTOS/tasks.c **** 		portENTER_CRITICAL();
1513:SRC/RTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1514:SRC/RTOS/tasks.c **** 		portEXIT_CRITICAL();
1515:SRC/RTOS/tasks.c **** 
1516:SRC/RTOS/tasks.c **** 		return xReturn;
1517:SRC/RTOS/tasks.c **** 	}
1518:SRC/RTOS/tasks.c **** 
1519:SRC/RTOS/tasks.c **** #endif
1520:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1521:SRC/RTOS/tasks.c **** 
1522:SRC/RTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1523:SRC/RTOS/tasks.c **** 
1524:SRC/RTOS/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1525:SRC/RTOS/tasks.c **** 	{
1526:SRC/RTOS/tasks.c **** 	tskTCB *xTCB;
1527:SRC/RTOS/tasks.c **** 	portBASE_TYPE xReturn;
1528:SRC/RTOS/tasks.c **** 
1529:SRC/RTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1530:SRC/RTOS/tasks.c **** 		if( xTask == NULL )
1531:SRC/RTOS/tasks.c **** 		{
1532:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1533:SRC/RTOS/tasks.c **** 		}
1534:SRC/RTOS/tasks.c **** 		else
1535:SRC/RTOS/tasks.c **** 		{
1536:SRC/RTOS/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1537:SRC/RTOS/tasks.c **** 		}
1538:SRC/RTOS/tasks.c **** 
1539:SRC/RTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1540:SRC/RTOS/tasks.c **** 		{
1541:SRC/RTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1542:SRC/RTOS/tasks.c **** 		}
1543:SRC/RTOS/tasks.c **** 		else
1544:SRC/RTOS/tasks.c **** 		{
1545:SRC/RTOS/tasks.c **** 			xReturn = pdFAIL;
1546:SRC/RTOS/tasks.c **** 		}
1547:SRC/RTOS/tasks.c **** 
1548:SRC/RTOS/tasks.c **** 		return xReturn;
1549:SRC/RTOS/tasks.c **** 	}
1550:SRC/RTOS/tasks.c **** 
1551:SRC/RTOS/tasks.c **** #endif
1552:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1553:SRC/RTOS/tasks.c **** 
1554:SRC/RTOS/tasks.c **** void vTaskSwitchContext( void )
1555:SRC/RTOS/tasks.c **** {
 1909              	tmp180, tmp179,
 1910              		add	r2, r2, r3	@ D.3997, tmp179, tmp180
 1911              		ldr	r3, .L165+12	@ tmp181,
 1912              		add	r3, r2, r3	@ D.3998, D.3997, tmp181
 1913              		ldr	r3, [r3, #0]	@ D.3999, <variable>.uxNumberOfItems
 1914 121c 04D04DE2 		cmp	r3, #0	@ D.3999,
 1915              		beq	.L161	@,
1556:SRC/RTOS/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1916              		.loc 1 1591 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 62


 1917 1220 98319FE5 		ldr	r3, .L165+8	@ tmp182,
 1918 1224 003093E5 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.105, uxTopReadyPriority
 1919 1228 000053E3 		mov	r2, r3, asl #2	@ tmp184, tmp183,
 1920 122c 0800000A 		mov	r3, r2, asl #2	@ tmp185, tmp184,
1557:SRC/RTOS/tasks.c **** 	{
1558:SRC/RTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1559:SRC/RTOS/tasks.c **** 		switch. */
1560:SRC/RTOS/tasks.c **** 		xMissedYield = pdTRUE;
 1921              	r2, r2, r3	@ D.4001, tmp184, tmp185
 1922 1230 8C219FE5 		ldr	r3, .L165+12	@ tmp186,
 1923 1234 0130A0E3 		add	r3, r2, r3	@ tmp187, D.4001, tmp186
 1924 1238 003082E5 		str	r3, [sp, #0]	@ tmp187, pxConstList
 1925 123c 5D0000EA 		ldr	r3, [sp, #0]	@ tmp188, pxConstList
 1926              		ldr	r3, [r3, #4]	@ D.4002, <variable>.pxIndex
1561:SRC/RTOS/tasks.c **** 		return;
1562:SRC/RTOS/tasks.c **** 	}
1563:SRC/RTOS/tasks.c **** 
1564:SRC/RTOS/tasks.c **** 	traceTASK_SWITCHED_OUT();
1565:SRC/RTOS/tasks.c **** 
1566:SRC/RTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1567:SRC/RTOS/tasks.c **** 	{
1568:SRC/RTOS/tasks.c **** 		unsigned long ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
1569:SRC/RTOS/tasks.c **** 
1570:SRC/RTOS/tasks.c **** 			/* Add the amount of time the task has been running to the accumulated
1571:SRC/RTOS/tasks.c **** 			time so far.  The time the task started running was stored in
1572:SRC/RTOS/tasks.c **** 			ulTaskSwitchedInTime.  Note that there is no overflow protection here
1573:SRC/RTOS/tasks.c **** 			so count values are only valid until the timer overflows.  Generally
1574:SRC/RTOS/tasks.c **** 			this will be about 1 hour assuming a 1uS timer increment. */
1575:SRC/RTOS/tasks.c **** 			pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
1576:SRC/RTOS/tasks.c **** 			ulTaskSwitchedInTime = ulTempCounter;
1577:SRC/RTOS/tasks.c **** 	}
1578:SRC/RTOS/tasks.c **** 	#endif
1579:SRC/RTOS/tasks.c **** 
1580:SRC/RTOS/tasks.c **** 	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1581:SRC/RTOS/tasks.c **** 	taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1582:SRC/RTOS/tasks.c **** 
1583:SRC/RTOS/tasks.c **** 	/* Find the highest priority queue that contains ready tasks. */
1584:SRC/RTOS/tasks.c **** 	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
1585:SRC/RTOS/tasks.c **** 	{
1586:SRC/RTOS/tasks.c **** 		--uxTopReadyPriority;
 1927              	2, [r3, #4]	@ D.4003, <variable>.pxNext
 1928 1240 80319FE5 		ldr	r3, [sp, #0]	@ tmp189, pxConstList
 1929 1244 003093E5 		str	r2, [r3, #4]	@ D.4003, <variable>.pxIndex
 1930 1248 012043E2 		ldr	r3, [sp, #0]	@ tmp190, pxConstList
 1931 124c 74319FE5 		ldr	r2, [r3, #4]	@ D.4004, <variable>.pxIndex
 1932 1250 002083E5 		ldr	r3, [sp, #0]	@ tmp191, pxConstList
 1933              		add	r3, r3, #8	@ D.4005, tmp191,
 1934              		cmp	r2, r3	@ D.4004, D.4006
 1935 1254 6C319FE5 		bne	.L162	@,
 1936 1258 003093E5 		ldr	r3, [sp, #0]	@ tmp192, pxConstList
 1937 125c 0321A0E1 		ldr	r3, [r3, #4]	@ D.4007, <variable>.pxIndex
 1938 1260 0231A0E1 		ldr	r2, [r3, #4]	@ D.4008, <variable>.pxNext
 1939 1264 032082E0 		ldr	r3, [sp, #0]	@ tmp193, pxConstList
 1940 1268 5C319FE5 		str	r2, [r3, #4]	@ D.4008, <variable>.pxIndex
 1941 126c 033082E0 	.L162:
 1942 1270 003093E5 		ldr	r3, [sp, #0]	@ tmp194, pxConstList
 1943 1274 000053E3 		ldr	r3, [r3, #4]	@ D.4009, <variable>.pxIndex
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 63


 1944 1278 F0FFFF0A 		ldr	r3, [r3, #12]	@ D.4010, <variable>.pvOwner
 1945              		mov	r2, r3	@ pxCurrentTCB.106, D.4010
1587:SRC/RTOS/tasks.c **** 	}
1588:SRC/RTOS/tasks.c **** 
1589:SRC/RTOS/tasks.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1590:SRC/RTOS/tasks.c **** 	same priority get an equal share of the processor time. */
1591:SRC/RTOS/tasks.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 1946              	 tmp195,
 1947 127c 44319FE5 		str	r2, [r3, #0]	@ pxCurrentTCB.106, pxCurrentTCB
 1948 1280 003093E5 	.LBE6:
 1949 1284 0321A0E1 		.loc 1 1594 0
 1950 1288 0231A0E1 		ldr	r3, .L165+20	@ tmp196,
 1951 128c 032082E0 		ldr	r3, [r3, #0]	@ xTracing.107, xTracing
 1952 1290 34319FE5 		cmp	r3, #0	@ xTracing.107,
 1953 1294 033082E0 		beq	.L164	@,
 1954 1298 00308DE5 		ldr	r3, .L165+16	@ tmp197,
 1955 129c 00309DE5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.108, pxCurrentTCB
 1956 12a0 043093E5 		ldr	r2, [r3, #64]	@ D.4014, <variable>.uxTCBNumber
 1957 12a4 042093E5 		ldr	r3, .L165+24	@ tmp198,
 1958 12a8 00309DE5 		ldr	r3, [r3, #0]	@ uxPreviousTask.109, uxPreviousTask
 1959 12ac 042083E5 		cmp	r2, r3	@ D.4014, uxPreviousTask.109
 1960 12b0 00309DE5 		beq	.L164	@,
 1961 12b4 042093E5 		ldr	r3, .L165+28	@ tmp199,
 1962 12b8 00309DE5 		ldr	r3, [r3, #0]	@ pcTraceBuffer.110, pcTraceBuffer
 1963 12bc 083083E2 		add	r2, r3, #8	@ D.4017, pcTraceBuffer.110,
 1964 12c0 030052E1 		ldr	r3, .L165+32	@ tmp200,
 1965 12c4 0400001A 		ldr	r3, [r3, #0]	@ pcTraceBufferEnd.111, pcTraceBufferEnd
 1966 12c8 00309DE5 		cmp	r2, r3	@ D.4017, pcTraceBufferEnd.112
 1967 12cc 043093E5 		bcs	.L163	@,
 1968 12d0 042093E5 		ldr	r3, .L165+16	@ tmp201,
 1969 12d4 00309DE5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.113, pxCurrentTCB
 1970 12d8 042083E5 		ldr	r2, [r3, #64]	@ uxPreviousTask.114, <variable>.uxTCBNumber
 1971              		ldr	r3, .L165+24	@ tmp202,
 1972 12dc 00309DE5 		str	r2, [r3, #0]	@ uxPreviousTask.114, uxPreviousTask
 1973 12e0 043093E5 		ldr	r3, .L165+28	@ tmp203,
 1974 12e4 0C3093E5 		ldr	r3, [r3, #0]	@ pcTraceBuffer.115, pcTraceBuffer
 1975 12e8 0320A0E1 		mov	r2, r3	@ pcTraceBuffer.116, pcTraceBuffer.115
 1976 12ec DC309FE5 		ldr	r3, .L165+36	@ tmp204,
 1977 12f0 002083E5 		ldr	r3, [r3, #0]	@ xTickCount.117, xTickCount
 1978              		str	r3, [r2, #0]	@ xTickCount.117,* pcTraceBuffer.116
1592:SRC/RTOS/tasks.c **** 
1593:SRC/RTOS/tasks.c **** 	traceTASK_SWITCHED_IN();
1594:SRC/RTOS/tasks.c **** 	vWriteTraceToBuffer();
 1979              	r3, [r3, #0]	@ pcTraceBuffer.118, pcTraceBuffer
 1980 12f4 D8309FE5 		add	r2, r3, #4	@ pcTraceBuffer.119, pcTraceBuffer.118,
 1981 12f8 003093E5 		ldr	r3, .L165+28	@ tmp206,
 1982 12fc 000053E3 		str	r2, [r3, #0]	@ pcTraceBuffer.119, pcTraceBuffer
 1983 1300 2C00000A 		ldr	r3, .L165+28	@ tmp207,
 1984 1304 C4309FE5 		ldr	r3, [r3, #0]	@ pcTraceBuffer.120, pcTraceBuffer
 1985 1308 003093E5 		mov	r2, r3	@ pcTraceBuffer.121, pcTraceBuffer.120
 1986 130c 402093E5 		ldr	r3, .L165+24	@ tmp208,
 1987 1310 C0309FE5 		ldr	r3, [r3, #0]	@ uxPreviousTask.122, uxPreviousTask
 1988 1314 003093E5 		str	r3, [r2, #0]	@ uxPreviousTask.122,* pcTraceBuffer.121
 1989 1318 030052E1 		ldr	r3, .L165+28	@ tmp209,
 1990 131c 2500000A 		ldr	r3, [r3, #0]	@ pcTraceBuffer.123, pcTraceBuffer
 1991 1320 B4309FE5 		add	r2, r3, #4	@ pcTraceBuffer.124, pcTraceBuffer.123,
 1992 1324 003093E5 		ldr	r3, .L165+28	@ tmp210,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 64


 1993 1328 082083E2 		str	r2, [r3, #0]	@ pcTraceBuffer.124, pcTraceBuffer
 1994 132c AC309FE5 		b	.L164	@
 1995 1330 003093E5 	.L163:
 1996 1334 030052E1 		ldr	r2, .L165+20	@ tmp211,
 1997 1338 1B00002A 		mov	r3, #0	@ tmp212,
 1998 133c 8C309FE5 		str	r3, [r2, #0]	@ tmp212, xTracing
 1999 1340 003093E5 	.L164:
 2000 1344 402093E5 		.loc 1 1595 0
 2001 1348 88309FE5 		add	sp, sp, #4	@,,
 2002 134c 002083E5 		bx	lr
 2003 1350 84309FE5 	.L166:
 2004 1354 003093E5 		.align	2
 2005 1358 0320A0E1 	.L165:
 2006 135c 80309FE5 		.word	uxSchedulerSuspended
 2007 1360 003093E5 		.word	xMissedYield
 2008 1364 003082E5 		.word	uxTopReadyPriority
 2009 1368 6C309FE5 		.word	pxReadyTasksLists
 2010 136c 003093E5 		.word	pxCurrentTCB
 2011 1370 042083E2 		.word	xTracing
 2012 1374 60309FE5 		.word	uxPreviousTask
 2013 1378 002083E5 		.word	pcTraceBuffer
 2014 137c 58309FE5 		.word	pcTraceBufferEnd
 2015 1380 003093E5 		.word	xTickCount
 2016 1384 0320A0E1 	.LFE22:
 2017 1388 48309FE5 		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2018 138c 003093E5 		.align	2
 2019 1390 003082E5 		.global	vTaskPlaceOnEventList
 2020 1394 40309FE5 		.type	vTaskPlaceOnEventList, %function
 2021 1398 003093E5 	vTaskPlaceOnEventList:
 2022 139c 042083E2 	.LFB23:
 2023 13a0 34309FE5 		.loc 1 1599 0
 2024 13a4 002083E5 		@ Function supports interworking.
 2025 13a8 020000EA 		@ args = 0, pretend = 0, frame = 12
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027 13ac 20209FE5 		str	lr, [sp, #-4]!	@,
 2028 13b0 0030A0E3 	.LCFI35:
 2029 13b4 003082E5 		sub	sp, sp, #12	@,,
 2030              	.LCFI36:
1595:SRC/RTOS/tasks.c **** }
 2031              	, [sp, #0]	@ xTicksToWait, xTicksToWait
 2032 13b8 04D08DE2 		.loc 1 1608 0
 2033 13bc 1EFF2FE1 		ldr	r2, [sp, #4]	@ pxEventList.125, pxEventList
 2034              		ldr	r3, .L172	@ tmp149,
 2035              		ldr	r3, [r3, #0]	@ pxCurrentTCB.126, pxCurrentTCB
 2036              		add	r3, r3, #24	@ D.4051, pxCurrentTCB.126,
 2037 13c0 1C000000 		mov	r0, r2	@, pxEventList.125
 2038 13c4 24000000 		mov	r1, r3	@, D.4051
 2039 13c8 14000000 		bl	vListInsert	@
 2040 13cc 34000000 		.loc 1 1613 0
 2041 13d0 00000000 		ldr	r3, .L172	@ tmp150,
 2042 13d4 30000000 		ldr	r3, [r3, #0]	@ pxCurrentTCB.127, pxCurrentTCB
 2043 13d8 00000000 		add	r3, r3, #4	@ D.4053, pxCurrentTCB.127,
 2044 13dc F0000000 		mov	r0, r3	@, D.4053
 2045 13e0 F8000000 		bl	vListRemove	@
 2046 13e4 0C000000 		.loc 1 1618 0
 2047              		ldr	r3, [sp, #0]	@ tmp151, xTicksToWait
 2048              		cmn	r3, #1	@ tmp151,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 65


 2049              		bne	.L168	@,
 2050              		.loc 1 1623 0
 2051              		ldr	r3, .L172	@ tmp152,
 2052              		ldr	r3, [r3, #0]	@ pxCurrentTCB.128, pxCurrentTCB
 2053              		add	r3, r3, #4	@ D.4055, pxCurrentTCB.128,
1596:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1597:SRC/RTOS/tasks.c **** 
1598:SRC/RTOS/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1599:SRC/RTOS/tasks.c **** {
 2054              	v	r1, r3	@, D.4055
 2055              		bl	vListInsertEnd	@
 2056              		b	.L171	@
 2057              	.L168:
 2058 13e8 04E02DE5 		.loc 1 1629 0
 2059              		ldr	r3, .L172+8	@ tmp153,
 2060 13ec 0CD04DE2 		ldr	r2, [r3, #0]	@ xTickCount.129, xTickCount
 2061              		ldr	r3, [sp, #0]	@ tmp154, xTicksToWait
 2062 13f0 04008DE5 		add	r3, r2, r3	@ tmp155, xTickCount.129, tmp154
 2063 13f4 00108DE5 		str	r3, [sp, #8]	@ tmp155, xTimeToWake
1600:SRC/RTOS/tasks.c **** portTickType xTimeToWake;
1601:SRC/RTOS/tasks.c **** 
1602:SRC/RTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1603:SRC/RTOS/tasks.c **** 	SCHEDULER SUSPENDED. */
1604:SRC/RTOS/tasks.c **** 
1605:SRC/RTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1606:SRC/RTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1607:SRC/RTOS/tasks.c **** 	is the first to be woken by the event. */
1608:SRC/RTOS/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2064              	31 0
 2065 13f8 04209DE5 		ldr	r3, .L172	@ tmp156,
 2066 13fc D4309FE5 		ldr	r2, [r3, #0]	@ pxCurrentTCB.130, pxCurrentTCB
 2067 1400 003093E5 		ldr	r3, [sp, #8]	@ tmp157, xTimeToWake
 2068 1404 183083E2 		str	r3, [r2, #4]	@ tmp157, <variable>.xGenericListItem.xItemValue
 2069 1408 0200A0E1 		.loc 1 1633 0
 2070 140c 0310A0E1 		ldr	r3, .L172+8	@ tmp158,
 2071 1410 FEFFFFEB 		ldr	r2, [r3, #0]	@ xTickCount.131, xTickCount
1609:SRC/RTOS/tasks.c **** 
1610:SRC/RTOS/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1611:SRC/RTOS/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1612:SRC/RTOS/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1613:SRC/RTOS/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2072              	 [sp, #8]	@ tmp159, xTimeToWake
 2073 1414 BC309FE5 		cmp	r3, r2	@ tmp159, xTickCount.131
 2074 1418 003093E5 		bcs	.L170	@,
 2075 141c 043083E2 		.loc 1 1636 0
 2076 1420 0300A0E1 		ldr	r3, .L172+12	@ tmp160,
 2077 1424 FEFFFFEB 		ldr	r2, [r3, #0]	@ pxOverflowDelayedTaskList.132, pxOverflowDelayedTaskList
1614:SRC/RTOS/tasks.c **** 
1615:SRC/RTOS/tasks.c **** 
1616:SRC/RTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1617:SRC/RTOS/tasks.c **** 	{
1618:SRC/RTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2078              	3, .L172	@ tmp161,
 2079 1428 00309DE5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.133, pxCurrentTCB
 2080 142c 010073E3 		add	r3, r3, #4	@ D.4061, pxCurrentTCB.133,
 2081 1430 0600001A 		mov	r0, r2	@, pxOverflowDelayedTaskList.132
1619:SRC/RTOS/tasks.c **** 		{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 66


1620:SRC/RTOS/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1621:SRC/RTOS/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1622:SRC/RTOS/tasks.c **** 			indefinitely. */
1623:SRC/RTOS/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2082              		r1, r3	@, D.4061
 2083 1434 9C309FE5 		bl	vListInsert	@
 2084 1438 003093E5 		b	.L171	@
 2085 143c 043083E2 	.L170:
 2086 1440 94009FE5 		.loc 1 1641 0
 2087 1444 0310A0E1 		ldr	r3, .L172+16	@ tmp162,
 2088 1448 FEFFFFEB 		ldr	r2, [r3, #0]	@ pxDelayedTaskList.134, pxDelayedTaskList
 2089 144c 1E0000EA 		ldr	r3, .L172	@ tmp163,
 2090              		ldr	r3, [r3, #0]	@ pxCurrentTCB.135, pxCurrentTCB
1624:SRC/RTOS/tasks.c **** 		}
1625:SRC/RTOS/tasks.c **** 		else
1626:SRC/RTOS/tasks.c **** 		{
1627:SRC/RTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1628:SRC/RTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1629:SRC/RTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2091              	r3, #4	@ D.4064, pxCurrentTCB.135,
 2092 1450 88309FE5 		mov	r0, r2	@, pxDelayedTaskList.134
 2093 1454 002093E5 		mov	r1, r3	@, D.4064
 2094 1458 00309DE5 		bl	vListInsert	@
 2095 145c 033082E0 	.L171:
 2096 1460 08308DE5 		.loc 1 1665 0
1630:SRC/RTOS/tasks.c **** 
1631:SRC/RTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 2097              	p, sp, #12	@,,
 2098 1464 6C309FE5 		ldr	lr, [sp], #4
 2099 1468 002093E5 		bx	lr
 2100 146c 08309DE5 	.L173:
 2101 1470 043082E5 		.align	2
1632:SRC/RTOS/tasks.c **** 
1633:SRC/RTOS/tasks.c **** 			if( xTimeToWake < xTickCount )
 2102              	:
 2103 1474 64309FE5 		.word	pxCurrentTCB
 2104 1478 002093E5 		.word	xSuspendedTaskList
 2105 147c 08309DE5 		.word	xTickCount
 2106 1480 020053E1 		.word	pxOverflowDelayedTaskList
 2107 1484 0800002A 		.word	pxDelayedTaskList
1634:SRC/RTOS/tasks.c **** 			{
1635:SRC/RTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1636:SRC/RTOS/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
 2108              	:
 2109 1488 54309FE5 		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2110 148c 002093E5 		.align	2
 2111 1490 40309FE5 		.global	xTaskRemoveFromEventList
 2112 1494 003093E5 		.type	xTaskRemoveFromEventList, %function
 2113 1498 043083E2 	xTaskRemoveFromEventList:
 2114 149c 0200A0E1 	.LFB24:
 2115 14a0 0310A0E1 		.loc 1 1669 0
 2116 14a4 FEFFFFEB 		@ Function supports interworking.
 2117 14a8 070000EA 		@ args = 0, pretend = 0, frame = 16
 2118              		@ frame_needed = 0, uses_anonymous_args = 0
1637:SRC/RTOS/tasks.c **** 			}
1638:SRC/RTOS/tasks.c **** 			else
1639:SRC/RTOS/tasks.c **** 			{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 67


1640:SRC/RTOS/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1641:SRC/RTOS/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
 2119              	p, #-4]!	@,
 2120 14ac 34309FE5 	.LCFI37:
 2121 14b0 002093E5 		sub	sp, sp, #16	@,,
 2122 14b4 1C309FE5 	.LCFI38:
 2123 14b8 003093E5 		str	r0, [sp, #4]	@ pxEventList, pxEventList
 2124 14bc 043083E2 		.loc 1 1683 0
 2125 14c0 0200A0E1 		ldr	r3, [sp, #4]	@ tmp153, pxEventList
 2126 14c4 0310A0E1 		ldr	r3, [r3, #0]	@ D.4077, <variable>.uxNumberOfItems
 2127 14c8 FEFFFFEB 		cmp	r3, #0	@ D.4077,
 2128              		beq	.L175	@,
1642:SRC/RTOS/tasks.c **** 			}
1643:SRC/RTOS/tasks.c **** 		}
1644:SRC/RTOS/tasks.c **** 	}
1645:SRC/RTOS/tasks.c **** 	#else
1646:SRC/RTOS/tasks.c **** 	{
1647:SRC/RTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1648:SRC/RTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1649:SRC/RTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1650:SRC/RTOS/tasks.c **** 
1651:SRC/RTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
1652:SRC/RTOS/tasks.c **** 
1653:SRC/RTOS/tasks.c **** 			if( xTimeToWake < xTickCount )
1654:SRC/RTOS/tasks.c **** 			{
1655:SRC/RTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow list. */
1656:SRC/RTOS/tasks.c **** 				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericLi
1657:SRC/RTOS/tasks.c **** 			}
1658:SRC/RTOS/tasks.c **** 			else
1659:SRC/RTOS/tasks.c **** 			{
1660:SRC/RTOS/tasks.c **** 				/* The wake time has not overflowed, so we can use the current block list. */
1661:SRC/RTOS/tasks.c **** 				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem )
1662:SRC/RTOS/tasks.c **** 			}
1663:SRC/RTOS/tasks.c **** 	}
1664:SRC/RTOS/tasks.c **** 	#endif
1665:SRC/RTOS/tasks.c **** }
 2129              	sp, #4]	@ tmp154, pxEventList
 2130 14cc 0CD08DE2 		ldr	r3, [r3, #12]	@ D.4078, <variable>.xListEnd.pxNext
 2131 14d0 04E09DE4 		ldr	r3, [r3, #12]	@ D.4079, <variable>.pvOwner
 2132 14d4 1EFF2FE1 		str	r3, [sp, #0]	@ D.4079, iftmp.136
 2133              		b	.L176	@
 2134              	.L175:
 2135              		mov	r3, #0	@,
 2136 14d8 00000000 		str	r3, [sp, #0]	@, iftmp.136
 2137 14dc DC000000 	.L176:
 2138 14e0 0C000000 		ldr	r3, [sp, #0]	@, iftmp.136
 2139 14e4 B0000000 		str	r3, [sp, #8]	@, pxUnblockedTCB
 2140 14e8 AC000000 		.loc 1 1684 0
 2141              		ldr	r3, [sp, #8]	@ tmp155, pxUnblockedTCB
 2142              		add	r3, r3, #24	@ D.4080, tmp155,
 2143              		mov	r0, r3	@, D.4080
 2144              		bl	vListRemove	@
 2145              		.loc 1 1686 0
 2146              		ldr	r3, .L183	@ tmp156,
 2147              		ldr	r3, [r3, #0]	@ uxSchedulerSuspended.137, uxSchedulerSuspended
1666:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1667:SRC/RTOS/tasks.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 68


1668:SRC/RTOS/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1669:SRC/RTOS/tasks.c **** {
 2148              	edulerSuspended.137,
 2149              		bne	.L177	@,
 2150              		.loc 1 1688 0
 2151              		ldr	r3, [sp, #8]	@ tmp157, pxUnblockedTCB
 2152 14ec 04E02DE5 		add	r3, r3, #4	@ D.4082, tmp157,
 2153              		mov	r0, r3	@, D.4082
 2154 14f0 10D04DE2 		bl	vListRemove	@
 2155              		.loc 1 1689 0
 2156 14f4 04008DE5 		ldr	r3, [sp, #8]	@ tmp158, pxUnblockedTCB
1670:SRC/RTOS/tasks.c **** tskTCB *pxUnblockedTCB;
1671:SRC/RTOS/tasks.c **** portBASE_TYPE xReturn;
1672:SRC/RTOS/tasks.c **** 
1673:SRC/RTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1674:SRC/RTOS/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1675:SRC/RTOS/tasks.c **** 
1676:SRC/RTOS/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1677:SRC/RTOS/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1678:SRC/RTOS/tasks.c **** 	it to the ready list.
1679:SRC/RTOS/tasks.c **** 
1680:SRC/RTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
1681:SRC/RTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1682:SRC/RTOS/tasks.c **** 	means we can always expect exclusive access to the event list here. */
1683:SRC/RTOS/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2157              	[r3, #44]	@ D.4083, <variable>.uxPriority
 2158 14f8 04309DE5 		ldr	r3, .L183+4	@ tmp159,
 2159 14fc 003093E5 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.138, uxTopReadyPriority
 2160 1500 000053E3 		cmp	r2, r3	@ D.4083, uxTopReadyPriority.138
 2161 1504 0400000A 		bls	.L178	@,
 2162 1508 04309DE5 		ldr	r3, [sp, #8]	@ tmp160, pxUnblockedTCB
 2163 150c 0C3093E5 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.139, <variable>.uxPriority
 2164 1510 0C3093E5 		ldr	r3, .L183+4	@ tmp161,
 2165 1514 00308DE5 		str	r2, [r3, #0]	@ uxTopReadyPriority.139, uxTopReadyPriority
 2166 1518 010000EA 	.L178:
 2167              		ldr	r3, [sp, #8]	@ tmp162, pxUnblockedTCB
 2168 151c 0030A0E3 		ldr	r3, [r3, #44]	@ D.4086, <variable>.uxPriority
 2169 1520 00308DE5 		mov	r2, r3, asl #2	@ tmp164, tmp163,
 2170              		mov	r3, r2, asl #2	@ tmp165, tmp164,
 2171 1524 00309DE5 		add	r2, r2, r3	@ D.4087, tmp164, tmp165
 2172 1528 08308DE5 		ldr	r3, .L183+8	@ tmp166,
1684:SRC/RTOS/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2173              	@ D.4088, D.4087, tmp166
 2174 152c 08309DE5 		ldr	r3, [sp, #8]	@ tmp167, pxUnblockedTCB
 2175 1530 183083E2 		add	r3, r3, #4	@ D.4089, tmp167,
 2176 1534 0300A0E1 		mov	r0, r2	@, D.4088
 2177 1538 FEFFFFEB 		mov	r1, r3	@, D.4089
1685:SRC/RTOS/tasks.c **** 
1686:SRC/RTOS/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2178              	ListInsertEnd	@
 2179 153c CC309FE5 		b	.L179	@
 2180 1540 003093E5 	.L177:
 2181 1544 000053E3 		.loc 1 1695 0
 2182 1548 1A00001A 		ldr	r3, [sp, #8]	@ tmp168, pxUnblockedTCB
1687:SRC/RTOS/tasks.c **** 	{
1688:SRC/RTOS/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2183              	r3, r3, #24	@ D.4090, tmp168,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 69


 2184 154c 08309DE5 		ldr	r0, .L183+12	@,
 2185 1550 043083E2 		mov	r1, r3	@, D.4090
 2186 1554 0300A0E1 		bl	vListInsertEnd	@
 2187 1558 FEFFFFEB 	.L179:
1689:SRC/RTOS/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2188              	 1 1698 0
 2189 155c 08309DE5 		ldr	r3, [sp, #8]	@ tmp169, pxUnblockedTCB
 2190 1560 2C2093E5 		ldr	r2, [r3, #44]	@ D.4091, <variable>.uxPriority
 2191 1564 A8309FE5 		ldr	r3, .L183+16	@ tmp170,
 2192 1568 003093E5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.140, pxCurrentTCB
 2193 156c 030052E1 		ldr	r3, [r3, #44]	@ D.4093, <variable>.uxPriority
 2194 1570 0300009A 		cmp	r2, r3	@ D.4091, D.4093
 2195 1574 08309DE5 		bcc	.L180	@,
 2196 1578 2C2093E5 		.loc 1 1704 0
 2197 157c 90309FE5 		mov	r3, #1	@ tmp171,
 2198 1580 002083E5 		str	r3, [sp, #12]	@ tmp171, xReturn
 2199              		b	.L181	@
 2200 1584 08309DE5 	.L180:
 2201 1588 2C3093E5 		.loc 1 1708 0
 2202 158c 0321A0E1 		mov	r3, #0	@ tmp172,
 2203 1590 0231A0E1 		str	r3, [sp, #12]	@ tmp172, xReturn
 2204 1594 032082E0 	.L181:
 2205 1598 78309FE5 		.loc 1 1711 0
 2206 159c 032082E0 		ldr	r3, [sp, #12]	@ D.4094, xReturn
 2207 15a0 08309DE5 		.loc 1 1712 0
 2208 15a4 043083E2 		mov	r0, r3	@, <result>
 2209 15a8 0200A0E1 		add	sp, sp, #16	@,,
 2210 15ac 0310A0E1 		ldr	lr, [sp], #4
 2211 15b0 FEFFFFEB 		bx	lr
 2212 15b4 040000EA 	.L184:
 2213              		.align	2
1690:SRC/RTOS/tasks.c **** 	}
1691:SRC/RTOS/tasks.c **** 	else
1692:SRC/RTOS/tasks.c **** 	{
1693:SRC/RTOS/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1694:SRC/RTOS/tasks.c **** 		task pending until the scheduler is resumed. */
1695:SRC/RTOS/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2214              	uspended
 2215 15b8 08309DE5 		.word	uxTopReadyPriority
 2216 15bc 183083E2 		.word	pxReadyTasksLists
 2217 15c0 54009FE5 		.word	xPendingReadyList
 2218 15c4 0310A0E1 		.word	pxCurrentTCB
 2219 15c8 FEFFFFEB 	.LFE24:
 2220              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
1696:SRC/RTOS/tasks.c **** 	}
1697:SRC/RTOS/tasks.c **** 
1698:SRC/RTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2221              		2
 2222 15cc 08309DE5 		.global	vTaskSetTimeOutState
 2223 15d0 2C2093E5 		.type	vTaskSetTimeOutState, %function
 2224 15d4 44309FE5 	vTaskSetTimeOutState:
 2225 15d8 003093E5 	.LFB25:
 2226 15dc 2C3093E5 		.loc 1 1716 0
 2227 15e0 030052E1 		@ Function supports interworking.
 2228 15e4 0200003A 		@ args = 0, pretend = 0, frame = 4
1699:SRC/RTOS/tasks.c **** 	{
1700:SRC/RTOS/tasks.c **** 		/* Return true if the task removed from the event list has
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 70


1701:SRC/RTOS/tasks.c **** 		a higher priority than the calling task.  This allows
1702:SRC/RTOS/tasks.c **** 		the calling task to know if it should force a context
1703:SRC/RTOS/tasks.c **** 		switch now. */
1704:SRC/RTOS/tasks.c **** 		xReturn = pdTRUE;
 2229              	_needed = 0, uses_anonymous_args = 0
 2230 15e8 0130A0E3 		@ link register save eliminated.
 2231 15ec 0C308DE5 		sub	sp, sp, #4	@,,
 2232 15f0 010000EA 	.LCFI39:
 2233              		str	r0, [sp, #0]	@ pxTimeOut, pxTimeOut
1705:SRC/RTOS/tasks.c **** 	}
1706:SRC/RTOS/tasks.c **** 	else
1707:SRC/RTOS/tasks.c **** 	{
1708:SRC/RTOS/tasks.c **** 		xReturn = pdFALSE;
 2234              	 1 1717 0
 2235 15f4 0030A0E3 		ldr	r3, .L187	@ tmp135,
 2236 15f8 0C308DE5 		ldr	r2, [r3, #0]	@ xNumOfOverflows.141, xNumOfOverflows
 2237              		ldr	r3, [sp, #0]	@ tmp136, pxTimeOut
1709:SRC/RTOS/tasks.c **** 	}
1710:SRC/RTOS/tasks.c **** 
1711:SRC/RTOS/tasks.c **** 	return xReturn;
 2238              		r2, [r3, #0]	@ xNumOfOverflows.141, <variable>.xOverflowCount
 2239 15fc 0C309DE5 		.loc 1 1718 0
1712:SRC/RTOS/tasks.c **** }
 2240              	dr	r3, .L187+4	@ tmp137,
 2241 1600 0300A0E1 		ldr	r2, [r3, #0]	@ xTickCount.142, xTickCount
 2242 1604 10D08DE2 		ldr	r3, [sp, #0]	@ tmp138, pxTimeOut
 2243 1608 04E09DE4 		str	r2, [r3, #4]	@ xTickCount.142, <variable>.xTimeOnEntering
 2244 160c 1EFF2FE1 		.loc 1 1719 0
 2245              		add	sp, sp, #4	@,,
 2246              		bx	lr
 2247              	.L188:
 2248 1610 1C000000 		.align	2
 2249 1614 14000000 	.L187:
 2250 1618 34000000 		.word	xNumOfOverflows
 2251 161c B4000000 		.word	xTickCount
 2252 1620 00000000 	.LFE25:
 2253              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2254              		.align	2
 2255              		.global	xTaskCheckForTimeOut
 2256              		.type	xTaskCheckForTimeOut, %function
 2257              	xTaskCheckForTimeOut:
 2258              	.LFB26:
 2259              		.loc 1 1723 0
1713:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1714:SRC/RTOS/tasks.c **** 
1715:SRC/RTOS/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1716:SRC/RTOS/tasks.c **** {
 2260              	 interworking.
 2261              		@ args = 0, pretend = 0, frame = 12
 2262              		@ frame_needed = 0, uses_anonymous_args = 0
 2263              		str	lr, [sp, #-4]!	@,
 2264              	.LCFI40:
 2265 1624 04D04DE2 		sub	sp, sp, #12	@,,
 2266              	.LCFI41:
 2267 1628 00008DE5 		str	r0, [sp, #4]	@ pxTimeOut, pxTimeOut
1717:SRC/RTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2268              	 [sp, #0]	@ pxTicksToWait, pxTicksToWait
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 71


 2269 162c 20309FE5 		.loc 1 1726 0
 2270 1630 002093E5 		bl	vPortEnterCritical	@
 2271 1634 00309DE5 		.loc 1 1732 0
 2272 1638 002083E5 		ldr	r3, [sp, #0]	@ tmp149, pxTicksToWait
1718:SRC/RTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2273              	r3, [r3, #0]	@ D.4117,
 2274 163c 14309FE5 		cmn	r3, #1	@ D.4117,
 2275 1640 002093E5 		bne	.L190	@,
 2276 1644 00309DE5 		.loc 1 1734 0
 2277 1648 042083E5 		mov	r3, #0	@ tmp150,
1719:SRC/RTOS/tasks.c **** }
 2278              	r3, [sp, #8]	@ tmp150, xReturn
 2279 164c 04D08DE2 		b	.L191	@
 2280 1650 1EFF2FE1 	.L190:
 2281              		.loc 1 1739 0
 2282              		ldr	r3, [sp, #4]	@ tmp151, pxTimeOut
 2283              		ldr	r2, [r3, #0]	@ D.4120, <variable>.xOverflowCount
 2284 1654 28000000 		ldr	r3, .L195	@ tmp152,
 2285 1658 0C000000 		ldr	r3, [r3, #0]	@ xNumOfOverflows.143, xNumOfOverflows
 2286              		cmp	r2, r3	@ D.4120, xNumOfOverflows.143
 2287              		beq	.L192	@,
 2288              		ldr	r3, [sp, #4]	@ tmp153, pxTimeOut
 2289              		ldr	r2, [r3, #4]	@ D.4122, <variable>.xTimeOnEntering
 2290              		ldr	r3, .L195+4	@ tmp154,
 2291              		ldr	r3, [r3, #0]	@ xTickCount.144, xTickCount
 2292              		cmp	r2, r3	@ D.4122, xTickCount.144
1720:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1721:SRC/RTOS/tasks.c **** 
1722:SRC/RTOS/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1723:SRC/RTOS/tasks.c **** {
 2293              	.loc 1 1745 0
 2294              		mov	r3, #1	@ tmp155,
 2295              		str	r3, [sp, #8]	@ tmp155, xReturn
 2296              		b	.L191	@
 2297 165c 04E02DE5 	.L192:
 2298              		.loc 1 1747 0
 2299 1660 0CD04DE2 		ldr	r3, .L195+4	@ tmp156,
 2300              		ldr	r2, [r3, #0]	@ xTickCount.145, xTickCount
 2301 1664 04008DE5 		ldr	r3, [sp, #4]	@ tmp157, pxTimeOut
 2302 1668 00108DE5 		ldr	r3, [r3, #4]	@ D.4125, <variable>.xTimeOnEntering
1724:SRC/RTOS/tasks.c **** portBASE_TYPE xReturn;
1725:SRC/RTOS/tasks.c **** 
1726:SRC/RTOS/tasks.c **** 	portENTER_CRITICAL();
 2303              	3, r2	@ D.4126, D.4125, xTickCount.145
 2304 166c FEFFFFEB 		ldr	r3, [sp, #0]	@ tmp158, pxTicksToWait
1727:SRC/RTOS/tasks.c **** 	{
1728:SRC/RTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1729:SRC/RTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1730:SRC/RTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1731:SRC/RTOS/tasks.c **** 			therefore never time out. */
1732:SRC/RTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2305              	dr	r3, [r3, #0]	@ D.4127,
 2306 1670 00309DE5 		cmp	r2, r3	@ D.4126, D.4127
 2307 1674 003093E5 		bcs	.L193	@,
 2308 1678 010073E3 		.loc 1 1750 0
 2309 167c 0200001A 		ldr	r3, [sp, #0]	@ tmp159, pxTicksToWait
1733:SRC/RTOS/tasks.c **** 			{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 72


1734:SRC/RTOS/tasks.c **** 				xReturn = pdFALSE;
 2310              	r1, [r3, #0]	@ D.4128,
 2311 1680 0030A0E3 		ldr	r3, [sp, #4]	@ tmp160, pxTimeOut
 2312 1684 08308DE5 		ldr	r2, [r3, #4]	@ D.4129, <variable>.xTimeOnEntering
 2313 1688 280000EA 		ldr	r3, .L195+4	@ tmp161,
 2314              		ldr	r3, [r3, #0]	@ xTickCount.146, xTickCount
1735:SRC/RTOS/tasks.c **** 			}
1736:SRC/RTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1737:SRC/RTOS/tasks.c **** 		#endif
1738:SRC/RTOS/tasks.c **** 
1739:SRC/RTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2315              	r3, r3, r2	@ D.4131, xTickCount.146, D.4129
 2316 168c 04309DE5 		add	r2, r1, r3	@ D.4132, D.4128, D.4131
 2317 1690 002093E5 		ldr	r3, [sp, #0]	@ tmp162, pxTicksToWait
 2318 1694 AC309FE5 		str	r2, [r3, #0]	@ D.4132,
 2319 1698 003093E5 		.loc 1 1751 0
 2320 169c 030052E1 		ldr	r0, [sp, #4]	@, pxTimeOut
 2321 16a0 0800000A 		bl	vTaskSetTimeOutState	@
 2322 16a4 04309DE5 		.loc 1 1752 0
 2323 16a8 042093E5 		mov	r3, #0	@ tmp163,
 2324 16ac 98309FE5 		str	r3, [sp, #8]	@ tmp163, xReturn
 2325 16b0 003093E5 		b	.L191	@
 2326 16b4 030052E1 	.L193:
 2327 16b8 0200008A 		.loc 1 1756 0
1740:SRC/RTOS/tasks.c **** 		{
1741:SRC/RTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1742:SRC/RTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1743:SRC/RTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1744:SRC/RTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1745:SRC/RTOS/tasks.c **** 			xReturn = pdTRUE;
 2328              	 tmp164,
 2329 16bc 0130A0E3 		str	r3, [sp, #8]	@ tmp164, xReturn
 2330 16c0 08308DE5 	.L191:
 2331 16c4 190000EA 		.loc 1 1759 0
 2332              		bl	vPortExitCritical	@
1746:SRC/RTOS/tasks.c **** 		}
1747:SRC/RTOS/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2333              	 1 1761 0
 2334 16c8 7C309FE5 		ldr	r3, [sp, #8]	@ D.4133, xReturn
 2335 16cc 002093E5 		.loc 1 1762 0
 2336 16d0 04309DE5 		mov	r0, r3	@, <result>
 2337 16d4 043093E5 		add	sp, sp, #12	@,,
 2338 16d8 022063E0 		ldr	lr, [sp], #4
 2339 16dc 00309DE5 		bx	lr
 2340 16e0 003093E5 	.L196:
 2341 16e4 030052E1 		.align	2
 2342 16e8 0E00002A 	.L195:
1748:SRC/RTOS/tasks.c **** 		{
1749:SRC/RTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1750:SRC/RTOS/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2343              	mOfOverflows
 2344 16ec 00309DE5 		.word	xTickCount
 2345 16f0 001093E5 	.LFE26:
 2346 16f4 04309DE5 		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2347 16f8 042093E5 		.align	2
 2348 16fc 48309FE5 		.global	vTaskMissedYield
 2349 1700 003093E5 		.type	vTaskMissedYield, %function
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 73


 2350 1704 023063E0 	vTaskMissedYield:
 2351 1708 032081E0 	.LFB27:
 2352 170c 00309DE5 		.loc 1 1766 0
 2353 1710 002083E5 		@ Function supports interworking.
1751:SRC/RTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2354              	, pretend = 0, frame = 0
 2355 1714 04009DE5 		@ frame_needed = 0, uses_anonymous_args = 0
 2356 1718 FEFFFFEB 		@ link register save eliminated.
1752:SRC/RTOS/tasks.c **** 			xReturn = pdFALSE;
 2357              	oc 1 1767 0
 2358 171c 0030A0E3 		ldr	r2, .L199	@ tmp133,
 2359 1720 08308DE5 		mov	r3, #1	@ tmp134,
 2360 1724 010000EA 		str	r3, [r2, #0]	@ tmp134, xMissedYield
 2361              		.loc 1 1768 0
1753:SRC/RTOS/tasks.c **** 		}
1754:SRC/RTOS/tasks.c **** 		else
1755:SRC/RTOS/tasks.c **** 		{
1756:SRC/RTOS/tasks.c **** 			xReturn = pdTRUE;
 2362              	r	@
 2363 1728 0130A0E3 	.L200:
 2364 172c 08308DE5 		.align	2
 2365              	.L199:
1757:SRC/RTOS/tasks.c **** 		}
1758:SRC/RTOS/tasks.c **** 	}
1759:SRC/RTOS/tasks.c **** 	portEXIT_CRITICAL();
 2366              	rd	xMissedYield
 2367 1730 FEFFFFEB 	.LFE27:
1760:SRC/RTOS/tasks.c **** 
1761:SRC/RTOS/tasks.c **** 	return xReturn;
 2368              	size	vTaskMissedYield, .-vTaskMissedYield
 2369 1734 08309DE5 		.align	2
1762:SRC/RTOS/tasks.c **** }
 2370              	type	prvIdleTask, %function
 2371 1738 0300A0E1 	prvIdleTask:
 2372 173c 0CD08DE2 	.LFB28:
 2373 1740 04E09DE4 		.loc 1 1782 0
 2374 1744 1EFF2FE1 		@ Function supports interworking.
 2375              		@ args = 0, pretend = 0, frame = 4
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              		str	lr, [sp, #-4]!	@,
 2378 1748 28000000 	.LCFI42:
 2379 174c 0C000000 		sub	sp, sp, #4	@,,
 2380              	.LCFI43:
 2381              		str	r0, [sp, #0]	@ pvParameters, pvParameters
 2382              	.L203:
 2383              		.loc 1 1789 0
 2384              		bl	prvCheckTasksWaitingTermination	@
 2385              		.loc 1 1812 0
 2386              		ldr	r3, .L205	@ tmp134,
1763:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1764:SRC/RTOS/tasks.c **** 
1765:SRC/RTOS/tasks.c **** void vTaskMissedYield( void )
1766:SRC/RTOS/tasks.c **** {
 2387              		@ D.4150, <variable>.uxNumberOfItems
 2388              		cmp	r3, #1	@ D.4150,
 2389              		bls	.L203	@,
 2390              		.loc 1 1814 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 74


 2391              	@ 1814 "SRC/RTOS/tasks.c" 1
1767:SRC/RTOS/tasks.c **** 	xMissedYield = pdTRUE;
 2392              	0
 2393 1750 08209FE5 	@ 0 "" 2
 2394 1754 0130A0E3 		b	.L203	@
 2395 1758 003082E5 	.L206:
1768:SRC/RTOS/tasks.c **** }
 2396              	ign	2
 2397 175c 1EFF2FE1 	.L205:
 2398              		.word	pxReadyTasksLists
 2399              	.LFE28:
 2400              		.size	prvIdleTask, .-prvIdleTask
 2401 1760 24000000 		.align	2
 2402              		.type	prvInitialiseTCBVariables, %function
 2403              	prvInitialiseTCBVariables:
 2404              	.LFB29:
 2405              		.loc 1 1847 0
 2406              		@ Function supports interworking.
 2407              		@ args = 4, pretend = 0, frame = 20
1769:SRC/RTOS/tasks.c **** 
1770:SRC/RTOS/tasks.c **** /*
1771:SRC/RTOS/tasks.c ****  * -----------------------------------------------------------
1772:SRC/RTOS/tasks.c ****  * The Idle task.
1773:SRC/RTOS/tasks.c ****  * ----------------------------------------------------------
1774:SRC/RTOS/tasks.c ****  *
1775:SRC/RTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1776:SRC/RTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1777:SRC/RTOS/tasks.c ****  *
1778:SRC/RTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
1779:SRC/RTOS/tasks.c ****  *
1780:SRC/RTOS/tasks.c ****  */
1781:SRC/RTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1782:SRC/RTOS/tasks.c **** {
 2408              	ded = 0, uses_anonymous_args = 0
 2409              		str	lr, [sp, #-4]!	@,
 2410              	.LCFI44:
 2411              		sub	sp, sp, #20	@,,
 2412 1764 04E02DE5 	.LCFI45:
 2413              		str	r0, [sp, #16]	@ pxTCB, pxTCB
 2414 1768 04D04DE2 		str	r1, [sp, #12]	@ pcName, pcName
 2415              		str	r2, [sp, #8]	@ uxPriority, uxPriority
 2416 176c 00008DE5 		str	r3, [sp, #4]	@ xRegions, xRegions
 2417              		ldr	r3, [sp, #24]	@ tmp139, usStackDepth
1783:SRC/RTOS/tasks.c **** 	/* Stop warnings. */
1784:SRC/RTOS/tasks.c **** 	( void ) pvParameters;
1785:SRC/RTOS/tasks.c **** 
1786:SRC/RTOS/tasks.c **** 	for( ;; )
1787:SRC/RTOS/tasks.c **** 	{
1788:SRC/RTOS/tasks.c **** 		/* See if any tasks have been deleted. */
1789:SRC/RTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 2418              	[sp, #0]	@ movhi	@ tmp139, usStackDepth
 2419 1770 660000EB 		.loc 1 1852 0
1790:SRC/RTOS/tasks.c **** 
1791:SRC/RTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1792:SRC/RTOS/tasks.c **** 		{
1793:SRC/RTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1794:SRC/RTOS/tasks.c **** 			see if any other task has become available.  If we are using
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 75


1795:SRC/RTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
1796:SRC/RTOS/tasks.c **** 			will automatically get the processor anyway. */
1797:SRC/RTOS/tasks.c **** 			taskYIELD();
1798:SRC/RTOS/tasks.c **** 		}
1799:SRC/RTOS/tasks.c **** 		#endif
1800:SRC/RTOS/tasks.c **** 
1801:SRC/RTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1802:SRC/RTOS/tasks.c **** 		{
1803:SRC/RTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
1804:SRC/RTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1805:SRC/RTOS/tasks.c **** 			to run then the idle task should yield before the end of the
1806:SRC/RTOS/tasks.c **** 			timeslice.
1807:SRC/RTOS/tasks.c **** 
1808:SRC/RTOS/tasks.c **** 			A critical region is not required here as we are just reading from
1809:SRC/RTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1810:SRC/RTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
1811:SRC/RTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
1812:SRC/RTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2420              	dr	r3, [sp, #16]	@ tmp140, pxTCB
 2421 1774 10309FE5 		add	r3, r3, #52	@ D.4160, tmp140,
 2422 1778 003093E5 		ldr	r2, [sp, #12]	@ pcName.147, pcName
 2423 177c 010053E3 		mov	r0, r3	@, D.4161
 2424 1780 FAFFFF9A 		mov	r1, r2	@, pcName.147
1813:SRC/RTOS/tasks.c **** 			{
1814:SRC/RTOS/tasks.c **** 				taskYIELD();
 2425              	r2, #10	@,
 2426              		bl	strncpy	@
 2427 1784 000000EF 		.loc 1 1855 0
 2428              		ldr	r2, [sp, #16]	@ tmp141, pxTCB
 2429 1788 F8FFFFEA 		mov	r3, #0	@ tmp142,
 2430              		strb	r3, [r2, #61]	@ tmp143, <variable>.pcTaskName
 2431              		.loc 1 1859 0
 2432              		ldr	r3, [sp, #8]	@ tmp144, uxPriority
 2433 178c 34000000 		cmp	r3, #3	@ tmp144,
 2434              		bls	.L208	@,
 2435              		.loc 1 1861 0
 2436              		mov	r3, #3	@ tmp145,
 2437              		str	r3, [sp, #8]	@ tmp145, uxPriority
 2438              	.L208:
 2439              		.loc 1 1864 0
1815:SRC/RTOS/tasks.c **** 			}
1816:SRC/RTOS/tasks.c **** 		}
1817:SRC/RTOS/tasks.c **** 		#endif
1818:SRC/RTOS/tasks.c **** 
1819:SRC/RTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1820:SRC/RTOS/tasks.c **** 		{
1821:SRC/RTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
1822:SRC/RTOS/tasks.c **** 
1823:SRC/RTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1824:SRC/RTOS/tasks.c **** 			allows the application designer to add background functionality
1825:SRC/RTOS/tasks.c **** 			without the overhead of a separate task.
1826:SRC/RTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1827:SRC/RTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1828:SRC/RTOS/tasks.c **** 			vApplicationIdleHook();
1829:SRC/RTOS/tasks.c **** 		}
1830:SRC/RTOS/tasks.c **** 		#endif
1831:SRC/RTOS/tasks.c **** 	}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 76


1832:SRC/RTOS/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1833:SRC/RTOS/tasks.c **** 
1834:SRC/RTOS/tasks.c **** 
1835:SRC/RTOS/tasks.c **** 
1836:SRC/RTOS/tasks.c **** 
1837:SRC/RTOS/tasks.c **** 
1838:SRC/RTOS/tasks.c **** 
1839:SRC/RTOS/tasks.c **** 
1840:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------
1841:SRC/RTOS/tasks.c ****  * File private functions documented at the top of the file.
1842:SRC/RTOS/tasks.c ****  *----------------------------------------------------------*/
1843:SRC/RTOS/tasks.c **** 
1844:SRC/RTOS/tasks.c **** 
1845:SRC/RTOS/tasks.c **** 
1846:SRC/RTOS/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1847:SRC/RTOS/tasks.c **** {
 2440              	16]	@ tmp146, pxTCB
 2441              		ldr	r3, [sp, #8]	@ tmp147, uxPriority
 2442              		str	r3, [r2, #44]	@ tmp147, <variable>.uxPriority
 2443              		.loc 1 1867 0
 2444 1790 04E02DE5 		ldr	r2, [sp, #16]	@ tmp148, pxTCB
 2445              		ldr	r3, [sp, #8]	@ tmp149, uxPriority
 2446 1794 14D04DE2 		str	r3, [r2, #68]	@ tmp149, <variable>.uxBasePriority
 2447              		.loc 1 1871 0
 2448 1798 10008DE5 		ldr	r3, [sp, #16]	@ tmp150, pxTCB
 2449 179c 0C108DE5 		add	r3, r3, #4	@ D.4163, tmp150,
 2450 17a0 08208DE5 		mov	r0, r3	@, D.4163
 2451 17a4 04308DE5 		bl	vListInitialiseItem	@
 2452 17a8 18309DE5 		.loc 1 1872 0
 2453 17ac B030CDE1 		ldr	r3, [sp, #16]	@ tmp151, pxTCB
1848:SRC/RTOS/tasks.c **** 	/* Store the function name in the TCB. */
1849:SRC/RTOS/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1850:SRC/RTOS/tasks.c **** 	{
1851:SRC/RTOS/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1852:SRC/RTOS/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2454              	24	@ D.4164, tmp151,
 2455 17b0 10309DE5 		mov	r0, r3	@, D.4164
 2456 17b4 343083E2 		bl	vListInitialiseItem	@
 2457 17b8 0C209DE5 		.loc 1 1876 0
 2458 17bc 0300A0E1 		ldr	r2, [sp, #16]	@ tmp152, pxTCB
 2459 17c0 0210A0E1 		ldr	r3, [sp, #16]	@ tmp153, pxTCB
 2460 17c4 0A20A0E3 		str	r3, [r2, #16]	@ tmp153, <variable>.xGenericListItem.pvOwner
 2461 17c8 FEFFFFEB 		.loc 1 1879 0
1853:SRC/RTOS/tasks.c **** 	}
1854:SRC/RTOS/tasks.c **** 	#endif
1855:SRC/RTOS/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
 2462              	 [sp, #8]	@ tmp154, uxPriority
 2463 17cc 10209DE5 		rsb	r2, r3, #4	@ D.4165, tmp154,
 2464 17d0 0030A0E3 		ldr	r3, [sp, #16]	@ tmp155, pxTCB
 2465 17d4 3D30C2E5 		str	r2, [r3, #24]	@ D.4165, <variable>.xEventListItem.xItemValue
1856:SRC/RTOS/tasks.c **** 
1857:SRC/RTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1858:SRC/RTOS/tasks.c **** 	remove the privilege bit if one is present. */
1859:SRC/RTOS/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 2466              	c 1 1880 0
 2467 17d8 08309DE5 		ldr	r2, [sp, #16]	@ tmp156, pxTCB
 2468 17dc 030053E3 		ldr	r3, [sp, #16]	@ tmp157, pxTCB
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 77


 2469 17e0 0100009A 		str	r3, [r2, #36]	@ tmp157, <variable>.xEventListItem.pvOwner
1860:SRC/RTOS/tasks.c **** 	{
1861:SRC/RTOS/tasks.c **** 		uxPriority = configMAX_PRIORITIES - 1;
 2470              	c 1 1910 0
 2471 17e4 0330A0E3 		add	sp, sp, #20	@,,
 2472 17e8 08308DE5 		ldr	lr, [sp], #4
 2473              		bx	lr
1862:SRC/RTOS/tasks.c **** 	}
1863:SRC/RTOS/tasks.c **** 
1864:SRC/RTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 2474              	29:
 2475 17ec 10209DE5 		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 2476 17f0 08309DE5 		.align	2
 2477 17f4 2C3082E5 		.type	prvInitialiseTaskLists, %function
1865:SRC/RTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
1866:SRC/RTOS/tasks.c **** 	{
1867:SRC/RTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 2478              	nitialiseTaskLists:
 2479 17f8 10209DE5 	.LFB30:
 2480 17fc 08309DE5 		.loc 1 1933 0
 2481 1800 443082E5 		@ Function supports interworking.
1868:SRC/RTOS/tasks.c **** 	}
1869:SRC/RTOS/tasks.c **** 	#endif
1870:SRC/RTOS/tasks.c **** 
1871:SRC/RTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 2482              	rgs = 0, pretend = 0, frame = 4
 2483 1804 10309DE5 		@ frame_needed = 0, uses_anonymous_args = 0
 2484 1808 043083E2 		str	lr, [sp, #-4]!	@,
 2485 180c 0300A0E1 	.LCFI46:
 2486 1810 FEFFFFEB 		sub	sp, sp, #4	@,,
1872:SRC/RTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 2487              	47:
 2488 1814 10309DE5 		.loc 1 1936 0
 2489 1818 183083E2 		mov	r3, #0	@ tmp135,
 2490 181c 0300A0E1 		str	r3, [sp, #0]	@ tmp135, uxPriority
 2491 1820 FEFFFFEB 		b	.L211	@
1873:SRC/RTOS/tasks.c **** 
1874:SRC/RTOS/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
1875:SRC/RTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
1876:SRC/RTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 2492              	:
 2493 1824 10209DE5 		.loc 1 1938 0
 2494 1828 10309DE5 		ldr	r3, [sp, #0]	@ tmp136, uxPriority
 2495 182c 103082E5 		mov	r2, r3, asl #2	@ tmp138, tmp137,
1877:SRC/RTOS/tasks.c **** 
1878:SRC/RTOS/tasks.c **** 	/* Event lists are always in priority order. */
1879:SRC/RTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 2496              		r3, r2, asl #2	@ tmp139, tmp138,
 2497 1830 08309DE5 		add	r2, r2, r3	@ D.4175, tmp138, tmp139
 2498 1834 042063E2 		ldr	r3, .L214	@ tmp140,
 2499 1838 10309DE5 		add	r3, r2, r3	@ D.4176, D.4175, tmp140
 2500 183c 182083E5 		mov	r0, r3	@, D.4176
1880:SRC/RTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 2501              	ListInitialise	@
 2502 1840 10209DE5 		.loc 1 1936 0
 2503 1844 10309DE5 		ldr	r3, [sp, #0]	@ tmp141, uxPriority
 2504 1848 243082E5 		add	r3, r3, #1	@ tmp142, tmp141,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 78


1881:SRC/RTOS/tasks.c **** 
1882:SRC/RTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
1883:SRC/RTOS/tasks.c **** 	{
1884:SRC/RTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0;
1885:SRC/RTOS/tasks.c **** 	}
1886:SRC/RTOS/tasks.c **** 	#endif
1887:SRC/RTOS/tasks.c **** 
1888:SRC/RTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
1889:SRC/RTOS/tasks.c **** 	{
1890:SRC/RTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
1891:SRC/RTOS/tasks.c **** 	}
1892:SRC/RTOS/tasks.c **** 	#endif
1893:SRC/RTOS/tasks.c **** 
1894:SRC/RTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
1895:SRC/RTOS/tasks.c **** 	{
1896:SRC/RTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
1897:SRC/RTOS/tasks.c **** 	}
1898:SRC/RTOS/tasks.c **** 	#endif
1899:SRC/RTOS/tasks.c **** 
1900:SRC/RTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
1901:SRC/RTOS/tasks.c **** 	{
1902:SRC/RTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
1903:SRC/RTOS/tasks.c **** 	}
1904:SRC/RTOS/tasks.c **** 	#else
1905:SRC/RTOS/tasks.c **** 	{
1906:SRC/RTOS/tasks.c **** 		( void ) xRegions;
1907:SRC/RTOS/tasks.c **** 		( void ) usStackDepth;
1908:SRC/RTOS/tasks.c **** 	}
1909:SRC/RTOS/tasks.c **** 	#endif
1910:SRC/RTOS/tasks.c **** }
 2505              		r3, [sp, #0]	@ tmp142, uxPriority
 2506 184c 14D08DE2 	.L211:
 2507 1850 04E09DE4 		ldr	r3, [sp, #0]	@ tmp143, uxPriority
 2508 1854 1EFF2FE1 		cmp	r3, #3	@ tmp143,
 2509              		bls	.L212	@,
 2510              		.loc 1 1941 0
 2511              		ldr	r0, .L214+4	@,
 2512              		bl	vListInitialise	@
 2513              		.loc 1 1942 0
 2514              		ldr	r0, .L214+8	@,
1911:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1912:SRC/RTOS/tasks.c **** 
1913:SRC/RTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
1914:SRC/RTOS/tasks.c **** 
1915:SRC/RTOS/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
1916:SRC/RTOS/tasks.c **** 	{
1917:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
1918:SRC/RTOS/tasks.c **** 
1919:SRC/RTOS/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
1920:SRC/RTOS/tasks.c **** 		{
1921:SRC/RTOS/tasks.c **** 			xTaskToModify = NULL;
1922:SRC/RTOS/tasks.c **** 		}
1923:SRC/RTOS/tasks.c **** 
1924:SRC/RTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
1925:SRC/RTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
1926:SRC/RTOS/tasks.c **** 
1927:SRC/RTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 79


1928:SRC/RTOS/tasks.c **** 	}
1929:SRC/RTOS/tasks.c **** 	/*-----------------------------------------------------------*/
1930:SRC/RTOS/tasks.c **** #endif
1931:SRC/RTOS/tasks.c **** 
1932:SRC/RTOS/tasks.c **** static void prvInitialiseTaskLists( void )
1933:SRC/RTOS/tasks.c **** {
 2515              	nitialise	@
 2516              		.loc 1 1943 0
 2517              		ldr	r0, .L214+12	@,
 2518              		bl	vListInitialise	@
 2519 1858 04E02DE5 		.loc 1 1947 0
 2520              		ldr	r0, .L214+16	@,
 2521 185c 04D04DE2 		bl	vListInitialise	@
 2522              		.loc 1 1953 0
1934:SRC/RTOS/tasks.c **** unsigned portBASE_TYPE uxPriority;
1935:SRC/RTOS/tasks.c **** 
1936:SRC/RTOS/tasks.c **** 	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 2523              	 .L214+20	@,
 2524 1860 0030A0E3 		bl	vListInitialise	@
 2525 1864 00308DE5 		.loc 1 1959 0
 2526 1868 0A0000EA 		ldr	r2, .L214+24	@ tmp144,
 2527              		ldr	r3, .L214+4	@ tmp145,
1937:SRC/RTOS/tasks.c **** 	{
1938:SRC/RTOS/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 2528              	r3, [r2, #0]	@ tmp145, pxDelayedTaskList
 2529 186c 00309DE5 		.loc 1 1960 0
 2530 1870 0321A0E1 		ldr	r2, .L214+28	@ tmp146,
 2531 1874 0231A0E1 		ldr	r3, .L214+8	@ tmp147,
 2532 1878 032082E0 		str	r3, [r2, #0]	@ tmp147, pxOverflowDelayedTaskList
 2533 187c 6C309FE5 		.loc 1 1961 0
 2534 1880 033082E0 		add	sp, sp, #4	@,,
 2535 1884 0300A0E1 		ldr	lr, [sp], #4
 2536 1888 FEFFFFEB 		bx	lr
 2537              	.L215:
 2538 188c 00309DE5 		.align	2
 2539 1890 013083E2 	.L214:
 2540 1894 00308DE5 		.word	pxReadyTasksLists
 2541              		.word	xDelayedTaskList1
 2542 1898 00309DE5 		.word	xDelayedTaskList2
 2543 189c 030053E3 		.word	xPendingReadyList
 2544 18a0 F1FFFF9A 		.word	xTasksWaitingTermination
1939:SRC/RTOS/tasks.c **** 	}
1940:SRC/RTOS/tasks.c **** 
1941:SRC/RTOS/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 2545              	TaskList
 2546 18a4 48009FE5 		.word	pxDelayedTaskList
 2547 18a8 FEFFFFEB 		.word	pxOverflowDelayedTaskList
1942:SRC/RTOS/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 2548              	E30:
 2549 18ac 44009FE5 		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 2550 18b0 FEFFFFEB 		.align	2
1943:SRC/RTOS/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 2551              	ype	prvCheckTasksWaitingTermination, %function
 2552 18b4 40009FE5 	prvCheckTasksWaitingTermination:
 2553 18b8 FEFFFFEB 	.LFB31:
1944:SRC/RTOS/tasks.c **** 
1945:SRC/RTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 80


1946:SRC/RTOS/tasks.c **** 	{
1947:SRC/RTOS/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 2554              	oc 1 1965 0
 2555 18bc 3C009FE5 		@ Function supports interworking.
 2556 18c0 FEFFFFEB 		@ args = 0, pretend = 0, frame = 12
1948:SRC/RTOS/tasks.c **** 	}
1949:SRC/RTOS/tasks.c **** 	#endif
1950:SRC/RTOS/tasks.c **** 
1951:SRC/RTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1952:SRC/RTOS/tasks.c **** 	{
1953:SRC/RTOS/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 2557              	frame_needed = 0, uses_anonymous_args = 0
 2558 18c4 38009FE5 		str	lr, [sp, #-4]!	@,
 2559 18c8 FEFFFFEB 	.LCFI48:
1954:SRC/RTOS/tasks.c **** 	}
1955:SRC/RTOS/tasks.c **** 	#endif
1956:SRC/RTOS/tasks.c **** 
1957:SRC/RTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
1958:SRC/RTOS/tasks.c **** 	using list2. */
1959:SRC/RTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 2560              	b	sp, sp, #12	@,,
 2561 18cc 34209FE5 	.LCFI49:
 2562 18d0 1C309FE5 	.LBB7:
 2563 18d4 003082E5 		.loc 1 1972 0
1960:SRC/RTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2564              		r3, .L221	@ tmp146,
 2565 18d8 2C209FE5 		ldr	r3, [r3, #0]	@ uxTasksDeleted.148, uxTasksDeleted
 2566 18dc 14309FE5 		cmp	r3, #0	@ uxTasksDeleted.148,
 2567 18e0 003082E5 		beq	.L220	@,
1961:SRC/RTOS/tasks.c **** }
 2568              	c 1 1974 0
 2569 18e4 04D08DE2 		bl	vTaskSuspendAll	@
 2570 18e8 04E09DE4 		.loc 1 1975 0
 2571 18ec 1EFF2FE1 		ldr	r3, .L221+4	@ tmp147,
 2572              		ldr	r3, [r3, #0]	@ D.4183, xTasksWaitingTermination.uxNumberOfItems
 2573              		cmp	r3, #0	@ D.4183,
 2574              		movne	r3, #0	@, tmp148
 2575 18f0 34000000 		moveq	r3, #1	@, tmp148
 2576 18f4 84000000 		str	r3, [sp, #4]	@ tmp148, xListIsEmpty
 2577 18f8 98000000 		.loc 1 1976 0
 2578 18fc B4000000 		bl	xTaskResumeAll	@
 2579 1900 C8000000 		.loc 1 1978 0
 2580 1904 DC000000 		ldr	r3, [sp, #4]	@ tmp149, xListIsEmpty
 2581 1908 AC000000 		cmp	r3, #0	@ tmp149,
 2582 190c B0000000 		bne	.L220	@,
 2583              	.LBB8:
 2584              		.loc 1 1982 0
 2585              		bl	vPortEnterCritical	@
 2586              		.loc 1 1984 0
 2587              		ldr	r3, .L221+4	@ xTasksWaitingTermination.150,
 2588              		ldr	r3, [r3, #0]	@ D.4186, <variable>.uxNumberOfItems
1962:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1963:SRC/RTOS/tasks.c **** 
1964:SRC/RTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
1965:SRC/RTOS/tasks.c **** {
 2589              	
 2590              		beq	.L218	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 81


 2591              		ldr	r3, .L221+8	@ D.4187,
 2592              		ldr	r3, [r3, #4]	@ D.4188, <variable>.pxNext
 2593 1910 04E02DE5 		ldr	r3, [r3, #12]	@ D.4189, <variable>.pvOwner
 2594              		str	r3, [sp, #0]	@ D.4189, iftmp.149
 2595 1914 0CD04DE2 		b	.L219	@
 2596              	.L218:
 2597              		mov	r3, #0	@,
1966:SRC/RTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
1967:SRC/RTOS/tasks.c **** 	{
1968:SRC/RTOS/tasks.c **** 		portBASE_TYPE xListIsEmpty;
1969:SRC/RTOS/tasks.c **** 
1970:SRC/RTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
1971:SRC/RTOS/tasks.c **** 		too often in the idle task. */
1972:SRC/RTOS/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
 2598              	 [sp, #0]	@, iftmp.149
 2599 1918 BC309FE5 	.L219:
 2600 191c 003093E5 		ldr	r3, [sp, #0]	@, iftmp.149
 2601 1920 000053E3 		str	r3, [sp, #8]	@, pxTCB
 2602 1924 2900000A 		.loc 1 1985 0
1973:SRC/RTOS/tasks.c **** 		{
1974:SRC/RTOS/tasks.c **** 			vTaskSuspendAll();
 2603              	r3, [sp, #8]	@ tmp150, pxTCB
 2604 1928 FEFFFFEB 		add	r3, r3, #4	@ D.4190, tmp150,
1975:SRC/RTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 2605              	ov	r0, r3	@, D.4190
 2606 192c AC309FE5 		bl	vListRemove	@
 2607 1930 003093E5 		.loc 1 1986 0
 2608 1934 000053E3 		ldr	r3, .L221+12	@ tmp151,
 2609 1938 0030A013 		ldr	r3, [r3, #0]	@ uxCurrentNumberOfTasks.151, uxCurrentNumberOfTasks
 2610 193c 0130A003 		sub	r2, r3, #1	@ uxCurrentNumberOfTasks.152, uxCurrentNumberOfTasks.151,
 2611 1940 04308DE5 		ldr	r3, .L221+12	@ tmp152,
1976:SRC/RTOS/tasks.c **** 			xTaskResumeAll();
 2612              	, [r3, #0]	@ uxCurrentNumberOfTasks.152, uxCurrentNumberOfTasks
 2613 1944 FEFFFFEB 		.loc 1 1987 0
1977:SRC/RTOS/tasks.c **** 
1978:SRC/RTOS/tasks.c **** 			if( !xListIsEmpty )
 2614              	dr	r3, .L221	@ tmp153,
 2615 1948 04309DE5 		ldr	r3, [r3, #0]	@ uxTasksDeleted.153, uxTasksDeleted
 2616 194c 000053E3 		sub	r2, r3, #1	@ uxTasksDeleted.154, uxTasksDeleted.153,
 2617 1950 1E00001A 		ldr	r3, .L221	@ tmp154,
 2618              		str	r2, [r3, #0]	@ uxTasksDeleted.154, uxTasksDeleted
1979:SRC/RTOS/tasks.c **** 			{
1980:SRC/RTOS/tasks.c **** 				tskTCB *pxTCB;
1981:SRC/RTOS/tasks.c **** 
1982:SRC/RTOS/tasks.c **** 				portENTER_CRITICAL();
 2619              	 1 1989 0
 2620 1954 FEFFFFEB 		bl	vPortExitCritical	@
1983:SRC/RTOS/tasks.c **** 				{
1984:SRC/RTOS/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 2621              	loc 1 1991 0
 2622 1958 80309FE5 		ldr	r0, [sp, #8]	@, pxTCB
 2623 195c 003093E5 		bl	prvDeleteTCB	@
 2624 1960 000053E3 	.L220:
 2625 1964 0400000A 	.LBE8:
 2626 1968 74309FE5 	.LBE7:
 2627 196c 043093E5 		.loc 1 1996 0
 2628 1970 0C3093E5 		add	sp, sp, #12	@,,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 82


 2629 1974 00308DE5 		ldr	lr, [sp], #4
 2630 1978 010000EA 		bx	lr
 2631              	.L222:
 2632 197c 0030A0E3 		.align	2
 2633 1980 00308DE5 	.L221:
 2634              		.word	uxTasksDeleted
 2635 1984 00309DE5 		.word	xTasksWaitingTermination
 2636 1988 08308DE5 		.word	xTasksWaitingTermination+8
1985:SRC/RTOS/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 2637              	NumberOfTasks
 2638 198c 08309DE5 	.LFE31:
 2639 1990 043083E2 		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 2640 1994 0300A0E1 		.align	2
 2641 1998 FEFFFFEB 		.type	prvAllocateTCBAndStack, %function
1986:SRC/RTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2642              	locateTCBAndStack:
 2643 199c 44309FE5 	.LFB32:
 2644 19a0 003093E5 		.loc 1 2000 0
 2645 19a4 012043E2 		@ Function supports interworking.
 2646 19a8 38309FE5 		@ args = 0, pretend = 0, frame = 12
 2647 19ac 002083E5 		@ frame_needed = 0, uses_anonymous_args = 0
1987:SRC/RTOS/tasks.c **** 					--uxTasksDeleted;
 2648              	r, [sp, #-4]!	@,
 2649 19b0 24309FE5 	.LCFI50:
 2650 19b4 003093E5 		sub	sp, sp, #12	@,,
 2651 19b8 012043E2 	.LCFI51:
 2652 19bc 18309FE5 		mov	r3, r0	@ tmp144, usStackDepth
 2653 19c0 002083E5 		str	r1, [sp, #0]	@ puxStackBuffer, puxStackBuffer
1988:SRC/RTOS/tasks.c **** 				}
1989:SRC/RTOS/tasks.c **** 				portEXIT_CRITICAL();
 2654              	r3, [sp, #4]	@ movhi	@ tmp144, usStackDepth
 2655 19c4 FEFFFFEB 		.loc 1 2005 0
1990:SRC/RTOS/tasks.c **** 
1991:SRC/RTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 2656              	ov	r0, #72	@,
 2657 19c8 08009DE5 		bl	pvPortMalloc	@
 2658 19cc 9F0000EB 		mov	r3, r0	@ D.4207,
 2659              		str	r3, [sp, #8]	@ D.4207, pxNewTCB
 2660              		.loc 1 2007 0
 2661              		ldr	r3, [sp, #8]	@ tmp145, pxNewTCB
1992:SRC/RTOS/tasks.c **** 			}
1993:SRC/RTOS/tasks.c **** 		}
1994:SRC/RTOS/tasks.c **** 	}
1995:SRC/RTOS/tasks.c **** 	#endif
1996:SRC/RTOS/tasks.c **** }
 2662              	3, #0	@ tmp145,
 2663 19d0 0CD08DE2 		beq	.L224	@,
 2664 19d4 04E09DE4 		.loc 1 2012 0
 2665 19d8 1EFF2FE1 		ldrh	r3, [sp, #4]	@ D.4208, usStackDepth
 2666              		mov	r3, r3, asl #2	@ D.4209, D.4208,
 2667              		mov	r0, r3	@, D.4209
 2668              		bl	pvPortMalloc	@
 2669 19dc 04000000 		mov	r3, r0	@ D.4210,
 2670 19e0 C8000000 		mov	r2, r3	@ D.4211, D.4210
 2671 19e4 D0000000 		ldr	r3, [sp, #8]	@ tmp146, pxNewTCB
 2672 19e8 08000000 		str	r2, [r3, #48]	@ D.4211, <variable>.pxStack
 2673              		.loc 1 2014 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 83


 2674              		ldr	r3, [sp, #8]	@ tmp147, pxNewTCB
 2675              		ldr	r3, [r3, #48]	@ D.4212, <variable>.pxStack
 2676              		cmp	r3, #0	@ D.4212,
 2677              		bne	.L225	@,
 2678              		.loc 1 2017 0
1997:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
1998:SRC/RTOS/tasks.c **** 
1999:SRC/RTOS/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2000:SRC/RTOS/tasks.c **** {
 2679              		@, pxNewTCB
 2680              		bl	vPortFree	@
 2681              		.loc 1 2018 0
 2682              		mov	r3, #0	@ tmp148,
 2683 19ec 04E02DE5 		str	r3, [sp, #8]	@ tmp148, pxNewTCB
 2684              		b	.L224	@
 2685 19f0 0CD04DE2 	.L225:
 2686              		.loc 1 2023 0
 2687 19f4 0030A0E1 		ldr	r3, [sp, #8]	@ tmp149, pxNewTCB
 2688 19f8 00108DE5 		ldr	r2, [r3, #48]	@ D.4213, <variable>.pxStack
 2689 19fc B430CDE1 		ldrh	r3, [sp, #4]	@ D.4214, usStackDepth
2001:SRC/RTOS/tasks.c **** tskTCB *pxNewTCB;
2002:SRC/RTOS/tasks.c **** 
2003:SRC/RTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2004:SRC/RTOS/tasks.c **** 	the implementation of the port malloc function. */
2005:SRC/RTOS/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 2690              	, asl #2	@ D.4215, D.4214,
 2691 1a00 4800A0E3 		mov	r0, r2	@, D.4213
 2692 1a04 FEFFFFEB 		mov	r1, #165	@,
 2693 1a08 0030A0E1 		mov	r2, r3	@, D.4215
 2694 1a0c 08308DE5 		bl	memset	@
2006:SRC/RTOS/tasks.c **** 
2007:SRC/RTOS/tasks.c **** 	if( pxNewTCB != NULL )
 2695              	:
 2696 1a10 08309DE5 		.loc 1 2027 0
 2697 1a14 000053E3 		ldr	r3, [sp, #8]	@ D.4216, pxNewTCB
 2698 1a18 1800000A 		.loc 1 2028 0
2008:SRC/RTOS/tasks.c **** 	{
2009:SRC/RTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2010:SRC/RTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2011:SRC/RTOS/tasks.c **** 		be deleted later if required. */
2012:SRC/RTOS/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 2699              		r0, r3	@, <result>
 2700 1a1c B430DDE1 		add	sp, sp, #12	@,,
 2701 1a20 0331A0E1 		ldr	lr, [sp], #4
 2702 1a24 0300A0E1 		bx	lr
 2703 1a28 FEFFFFEB 	.LFE32:
 2704 1a2c 0030A0E1 		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 2705 1a30 0320A0E1 		.section	.rodata
 2706 1a34 08309DE5 		.align	2
 2707 1a38 302083E5 	.LC2:
2013:SRC/RTOS/tasks.c **** 
2014:SRC/RTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 2708              	%s\011\011%c\011%u\011%u\011%u\015\012\000"
 2709 1a3c 08309DE5 		.text
 2710 1a40 303093E5 		.align	2
 2711 1a44 000053E3 		.type	prvListTaskWithinSingleList, %function
 2712 1a48 0400001A 	prvListTaskWithinSingleList:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 84


2015:SRC/RTOS/tasks.c **** 		{
2016:SRC/RTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2017:SRC/RTOS/tasks.c **** 			vPortFree( pxNewTCB );
 2713              	3:
 2714 1a4c 08009DE5 		.loc 1 2034 0
 2715 1a50 FEFFFFEB 		@ Function supports interworking.
2018:SRC/RTOS/tasks.c **** 			pxNewTCB = NULL;
 2716              	args = 0, pretend = 0, frame = 32
 2717 1a54 0030A0E3 		@ frame_needed = 0, uses_anonymous_args = 0
 2718 1a58 08308DE5 		stmfd	sp!, {r4, lr}	@,
 2719 1a5c 070000EA 	.LCFI52:
 2720              		sub	sp, sp, #44	@,,
2019:SRC/RTOS/tasks.c **** 		}
2020:SRC/RTOS/tasks.c **** 		else
2021:SRC/RTOS/tasks.c **** 		{
2022:SRC/RTOS/tasks.c **** 			/* Just to help debugging. */
2023:SRC/RTOS/tasks.c **** 			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
 2721              	53:
 2722 1a60 08309DE5 		str	r0, [sp, #20]	@ pcWriteBuffer, pcWriteBuffer
 2723 1a64 302093E5 		str	r1, [sp, #16]	@ pxList, pxList
 2724 1a68 B430DDE1 		mov	r3, r2	@ tmp160, cStatus
 2725 1a6c 0331A0E1 		strb	r3, [sp, #12]	@ tmp161, cStatus
 2726 1a70 0200A0E1 	.LBB9:
 2727 1a74 A510A0E3 		.loc 1 2039 0
 2728 1a78 0320A0E1 		ldr	r3, [sp, #16]	@ tmp162, pxList
 2729 1a7c FEFFFFEB 		str	r3, [sp, #36]	@ tmp162, pxConstList
 2730              		ldr	r3, [sp, #36]	@ tmp163, pxConstList
2024:SRC/RTOS/tasks.c **** 		}
2025:SRC/RTOS/tasks.c **** 	}
2026:SRC/RTOS/tasks.c **** 
2027:SRC/RTOS/tasks.c **** 	return pxNewTCB;
 2731              	r3, #4]	@ D.4235, <variable>.pxIndex
 2732 1a80 08309DE5 		ldr	r2, [r3, #4]	@ D.4236, <variable>.pxNext
2028:SRC/RTOS/tasks.c **** }
 2733              	dr	r3, [sp, #36]	@ tmp164, pxConstList
 2734 1a84 0300A0E1 		str	r2, [r3, #4]	@ D.4236, <variable>.pxIndex
 2735 1a88 0CD08DE2 		ldr	r3, [sp, #36]	@ tmp165, pxConstList
 2736 1a8c 04E09DE4 		ldr	r2, [r3, #4]	@ D.4237, <variable>.pxIndex
 2737 1a90 1EFF2FE1 		ldr	r3, [sp, #36]	@ tmp166, pxConstList
 2738              		add	r3, r3, #8	@ D.4238, tmp166,
 2739              		cmp	r2, r3	@ D.4237, D.4239
 2740              		bne	.L228	@,
 2741 000b 00       		ldr	r3, [sp, #36]	@ tmp167, pxConstList
 2742              		ldr	r3, [r3, #4]	@ D.4240, <variable>.pxIndex
 2743 000c 25730909 		ldr	r2, [r3, #4]	@ D.4241, <variable>.pxNext
 2743      25630925 
 2743      75092575 
 2743      0925750D 
 2743      0A00
 2744 001e 0000     		ldr	r3, [sp, #36]	@ tmp168, pxConstList
 2745              		str	r2, [r3, #4]	@ D.4241, <variable>.pxIndex
 2746              	.L228:
 2747              		ldr	r3, [sp, #36]	@ tmp169, pxConstList
 2748              		ldr	r3, [r3, #4]	@ D.4242, <variable>.pxIndex
2029:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2030:SRC/RTOS/tasks.c **** 
2031:SRC/RTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 85


2032:SRC/RTOS/tasks.c **** 
2033:SRC/RTOS/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2034:SRC/RTOS/tasks.c **** 	{
 2749              	2]	@ D.4243, <variable>.pvOwner
 2750              		str	r3, [sp, #28]	@ D.4243, pxFirstTCB
 2751              	.L230:
 2752              	.LBE9:
 2753 1a94 10402DE9 	.LBB10:
 2754              		.loc 1 2042 0
 2755 1a98 2CD04DE2 		ldr	r3, [sp, #16]	@ tmp170, pxList
 2756              		str	r3, [sp, #40]	@ tmp170, pxConstList
 2757 1a9c 14008DE5 		ldr	r3, [sp, #40]	@ tmp171, pxConstList
 2758 1aa0 10108DE5 		ldr	r3, [r3, #4]	@ D.4244, <variable>.pxIndex
 2759 1aa4 0230A0E1 		ldr	r2, [r3, #4]	@ D.4245, <variable>.pxNext
 2760 1aa8 0C30CDE5 		ldr	r3, [sp, #40]	@ tmp172, pxConstList
 2761              		str	r2, [r3, #4]	@ D.4245, <variable>.pxIndex
2035:SRC/RTOS/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2036:SRC/RTOS/tasks.c **** 	unsigned short usStackRemaining;
2037:SRC/RTOS/tasks.c **** 
2038:SRC/RTOS/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2039:SRC/RTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 2762              	 #40]	@ tmp173, pxConstList
 2763 1aac 10309DE5 		ldr	r2, [r3, #4]	@ D.4246, <variable>.pxIndex
 2764 1ab0 24308DE5 		ldr	r3, [sp, #40]	@ tmp174, pxConstList
 2765 1ab4 24309DE5 		add	r3, r3, #8	@ D.4247, tmp174,
 2766 1ab8 043093E5 		cmp	r2, r3	@ D.4246, D.4248
 2767 1abc 042093E5 		bne	.L229	@,
 2768 1ac0 24309DE5 		ldr	r3, [sp, #40]	@ tmp175, pxConstList
 2769 1ac4 042083E5 		ldr	r3, [r3, #4]	@ D.4249, <variable>.pxIndex
 2770 1ac8 24309DE5 		ldr	r2, [r3, #4]	@ D.4250, <variable>.pxNext
 2771 1acc 042093E5 		ldr	r3, [sp, #40]	@ tmp176, pxConstList
 2772 1ad0 24309DE5 		str	r2, [r3, #4]	@ D.4250, <variable>.pxIndex
 2773 1ad4 083083E2 	.L229:
 2774 1ad8 030052E1 		ldr	r3, [sp, #40]	@ tmp177, pxConstList
 2775 1adc 0400001A 		ldr	r3, [r3, #4]	@ D.4251, <variable>.pxIndex
 2776 1ae0 24309DE5 		ldr	r3, [r3, #12]	@ D.4252, <variable>.pvOwner
 2777 1ae4 043093E5 		str	r3, [sp, #24]	@ D.4252, pxNextTCB
 2778 1ae8 042093E5 	.LBE10:
 2779 1aec 24309DE5 		.loc 1 2049 0
 2780 1af0 042083E5 		ldr	r3, [sp, #24]	@ tmp178, pxNextTCB
 2781              		ldr	r3, [r3, #48]	@ D.4253, <variable>.pxStack
 2782 1af4 24309DE5 		mov	r0, r3	@, D.4254
 2783 1af8 043093E5 		bl	usTaskCheckFreeStackSpace	@
 2784 1afc 0C3093E5 		mov	r3, r0	@ tmp179,
 2785 1b00 1C308DE5 		strh	r3, [sp, #34]	@ movhi	@ usStackRemaining.155, usStackRemaining
 2786              		.loc 1 2053 0
 2787              		ldr	r3, [sp, #24]	@ tmp180, pxNextTCB
 2788              		add	ip, r3, #52	@ D.4256, tmp180,
2040:SRC/RTOS/tasks.c **** 		do
2041:SRC/RTOS/tasks.c **** 		{
2042:SRC/RTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 2789              	57, cStatus
 2790 1b04 10309DE5 		ldr	r3, [sp, #24]	@ tmp181, pxNextTCB
 2791 1b08 28308DE5 		ldr	r2, [r3, #44]	@ D.4258, <variable>.uxPriority
 2792 1b0c 28309DE5 		ldrh	r1, [sp, #34]	@ D.4259, usStackRemaining
 2793 1b10 043093E5 		ldr	r3, [sp, #24]	@ tmp182, pxNextTCB
 2794 1b14 042093E5 		ldr	r3, [r3, #64]	@ D.4260, <variable>.uxTCBNumber
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 86


 2795 1b18 28309DE5 		str	r2, [sp, #0]	@ D.4258,
 2796 1b1c 042083E5 		str	r1, [sp, #4]	@ D.4259,
 2797 1b20 28309DE5 		str	r3, [sp, #8]	@ D.4260,
 2798 1b24 042093E5 		ldr	r0, .L232	@,
 2799 1b28 28309DE5 		ldr	r1, .L232+4	@,
 2800 1b2c 083083E2 		mov	r2, ip	@, D.4256
 2801 1b30 030052E1 		mov	r3, r4	@, D.4257
 2802 1b34 0400001A 		bl	sprintf	@
 2803 1b38 28309DE5 		.loc 1 2054 0
 2804 1b3c 043093E5 		ldr	r3, [sp, #20]	@ pcWriteBuffer.156, pcWriteBuffer
 2805 1b40 042093E5 		mov	r0, r3	@, pcWriteBuffer.156
 2806 1b44 28309DE5 		ldr	r1, .L232	@,
 2807 1b48 042083E5 		bl	strcat	@
 2808              		.loc 1 2056 0
 2809 1b4c 28309DE5 		ldr	r2, [sp, #24]	@ tmp183, pxNextTCB
 2810 1b50 043093E5 		ldr	r3, [sp, #28]	@ tmp184, pxFirstTCB
 2811 1b54 0C3093E5 		cmp	r2, r3	@ tmp183, tmp184
 2812 1b58 18308DE5 		bne	.L230	@,
 2813              		.loc 1 2057 0
2043:SRC/RTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2044:SRC/RTOS/tasks.c **** 			{
2045:SRC/RTOS/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2046:SRC/RTOS/tasks.c **** 			}
2047:SRC/RTOS/tasks.c **** 			#else
2048:SRC/RTOS/tasks.c **** 			{
2049:SRC/RTOS/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
 2814              	fd	sp!, {r4, lr}
 2815 1b5c 18309DE5 		bx	lr
 2816 1b60 303093E5 	.L233:
 2817 1b64 0300A0E1 		.align	2
 2818 1b68 1E0000EB 	.L232:
 2819 1b6c 0030A0E1 		.word	pcStatusString
 2820 1b70 B232CDE1 		.word	.LC2
2050:SRC/RTOS/tasks.c **** 			}
2051:SRC/RTOS/tasks.c **** 			#endif
2052:SRC/RTOS/tasks.c **** 
2053:SRC/RTOS/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
 2821              	
 2822 1b74 18309DE5 		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 2823 1b78 34C083E2 		.align	2
 2824 1b7c DC40DDE1 		.type	usTaskCheckFreeStackSpace, %function
 2825 1b80 18309DE5 	usTaskCheckFreeStackSpace:
 2826 1b84 2C2093E5 	.LFB34:
 2827 1b88 B212DDE1 		.loc 1 2115 0
 2828 1b8c 18309DE5 		@ Function supports interworking.
 2829 1b90 403093E5 		@ args = 0, pretend = 0, frame = 8
 2830 1b94 00208DE5 		@ frame_needed = 0, uses_anonymous_args = 0
 2831 1b98 04108DE5 		@ link register save eliminated.
 2832 1b9c 08308DE5 		sub	sp, sp, #8	@,,
 2833 1ba0 38009FE5 	.LCFI54:
 2834 1ba4 38109FE5 		str	r0, [sp, #4]	@ pucStackByte, pucStackByte
 2835 1ba8 0C20A0E1 		.loc 1 2116 0
 2836 1bac 0430A0E1 		mov	r2, #0	@,
 2837 1bb0 FEFFFFEB 		str	r2, [sp, #0]	@, usCount
2054:SRC/RTOS/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
 2838              	:
 2839 1bb4 14309DE5 		.loc 1 2120 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 87


 2840 1bb8 0300A0E1 		ldr	r3, [sp, #4]	@ tmp137, pucStackByte
 2841 1bbc 1C109FE5 		add	r3, r3, #1	@ tmp138, tmp137,
 2842 1bc0 FEFFFFEB 		str	r3, [sp, #4]	@ tmp138, pucStackByte
2055:SRC/RTOS/tasks.c **** 
2056:SRC/RTOS/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 2843              	 1 2121 0
 2844 1bc4 18209DE5 		ldr	r2, [sp, #0]	@, usCount
 2845 1bc8 1C309DE5 		add	r3, r2, #1	@ tmp139,,
 2846 1bcc 030052E1 		mov	r3, r3, asl #16	@ tmp140, tmp139,
 2847 1bd0 CBFFFF1A 		mov	r3, r3, lsr #16	@, tmp140,
2057:SRC/RTOS/tasks.c **** 	}
 2848              	r3, [sp, #0]	@, usCount
 2849 1bd4 2CD08DE2 	.L235:
 2850 1bd8 1040BDE8 		.loc 1 2118 0
 2851 1bdc 1EFF2FE1 		ldr	r3, [sp, #4]	@ tmp141, pucStackByte
 2852              		ldrb	r3, [r3, #0]	@ zero_extendqisi2	@ D.4273,
 2853              		cmp	r3, #165	@ D.4273,
 2854              		beq	.L236	@,
 2855 1be0 FC000000 		.loc 1 2124 0
 2856 1be4 0C000000 		ldr	r2, [sp, #0]	@, usCount
 2857              		mov	r3, r2, lsr #2	@ tmp142,,
 2858              		mov	r3, r3, asl #16	@ tmp143, tmp142,
 2859              		mov	r3, r3, lsr #16	@, tmp143,
 2860              		str	r3, [sp, #0]	@, usCount
 2861              		.loc 1 2126 0
 2862              		ldr	r3, [sp, #0]	@ D.4274, usCount
2058:SRC/RTOS/tasks.c **** 
2059:SRC/RTOS/tasks.c **** #endif
2060:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2061:SRC/RTOS/tasks.c **** 
2062:SRC/RTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2063:SRC/RTOS/tasks.c **** 
2064:SRC/RTOS/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2065:SRC/RTOS/tasks.c **** 	{
2066:SRC/RTOS/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2067:SRC/RTOS/tasks.c **** 	unsigned long ulStatsAsPercentage;
2068:SRC/RTOS/tasks.c **** 
2069:SRC/RTOS/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2070:SRC/RTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2071:SRC/RTOS/tasks.c **** 		do
2072:SRC/RTOS/tasks.c **** 		{
2073:SRC/RTOS/tasks.c **** 			/* Get next TCB in from the list. */
2074:SRC/RTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2075:SRC/RTOS/tasks.c **** 
2076:SRC/RTOS/tasks.c **** 			/* Divide by zero check. */
2077:SRC/RTOS/tasks.c **** 			if( ulTotalRunTime > 0UL )
2078:SRC/RTOS/tasks.c **** 			{
2079:SRC/RTOS/tasks.c **** 				/* Has the task run at all? */
2080:SRC/RTOS/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0 )
2081:SRC/RTOS/tasks.c **** 				{
2082:SRC/RTOS/tasks.c **** 					/* The task has used no CPU time at all. */
2083:SRC/RTOS/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
2084:SRC/RTOS/tasks.c **** 				}
2085:SRC/RTOS/tasks.c **** 				else
2086:SRC/RTOS/tasks.c **** 				{
2087:SRC/RTOS/tasks.c **** 					/* What percentage of the total run time as the task used?
2088:SRC/RTOS/tasks.c **** 					This will always be rounded down to the nearest integer. */
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 88


2089:SRC/RTOS/tasks.c **** 					ulStatsAsPercentage = ( 100UL * pxNextTCB->ulRunTimeCounter ) / ulTotalRunTime;
2090:SRC/RTOS/tasks.c **** 
2091:SRC/RTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
2092:SRC/RTOS/tasks.c **** 					{
2093:SRC/RTOS/tasks.c **** 						sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned 
2094:SRC/RTOS/tasks.c **** 					}
2095:SRC/RTOS/tasks.c **** 					else
2096:SRC/RTOS/tasks.c **** 					{
2097:SRC/RTOS/tasks.c **** 						/* If the percentage is zero here then the task has
2098:SRC/RTOS/tasks.c **** 						consumed less than 1% of the total run time. */
2099:SRC/RTOS/tasks.c **** 						sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned 
2100:SRC/RTOS/tasks.c **** 					}
2101:SRC/RTOS/tasks.c **** 				}
2102:SRC/RTOS/tasks.c **** 
2103:SRC/RTOS/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
2104:SRC/RTOS/tasks.c **** 			}
2105:SRC/RTOS/tasks.c **** 
2106:SRC/RTOS/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2107:SRC/RTOS/tasks.c **** 	}
2108:SRC/RTOS/tasks.c **** 
2109:SRC/RTOS/tasks.c **** #endif
2110:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2111:SRC/RTOS/tasks.c **** 
2112:SRC/RTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2113:SRC/RTOS/tasks.c **** 
2114:SRC/RTOS/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2115:SRC/RTOS/tasks.c **** 	{
 2863              		mov	r0, r3	@, <result>
 2864              		add	sp, sp, #8	@,,
 2865              		bx	lr
 2866              	.LFE34:
 2867              		.size	usTaskCheckFreeStackSpace, .-usTaskCheckFreeStackSpace
 2868 1be8 08D04DE2 		.align	2
 2869              		.type	prvDeleteTCB, %function
 2870 1bec 04008DE5 	prvDeleteTCB:
2116:SRC/RTOS/tasks.c **** 	register unsigned short usCount = 0;
 2871              		.loc 1 2163 0
 2872 1bf0 0020A0E3 		@ Function supports interworking.
 2873 1bf4 00208DE5 		@ args = 0, pretend = 0, frame = 4
 2874 1bf8 070000EA 		@ frame_needed = 0, uses_anonymous_args = 0
 2875              		str	lr, [sp, #-4]!	@,
2117:SRC/RTOS/tasks.c **** 
2118:SRC/RTOS/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2119:SRC/RTOS/tasks.c **** 		{
2120:SRC/RTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 2876              	55:
 2877 1bfc 04309DE5 		sub	sp, sp, #4	@,,
 2878 1c00 013083E2 	.LCFI56:
 2879 1c04 04308DE5 		str	r0, [sp, #0]	@ pxTCB, pxTCB
2121:SRC/RTOS/tasks.c **** 			usCount++;
 2880              	c 1 2166 0
 2881 1c08 00209DE5 		ldr	r3, [sp, #0]	@ tmp134, pxTCB
 2882 1c0c 013082E2 		ldr	r3, [r3, #48]	@ D.4279, <variable>.pxStack
 2883 1c10 0338A0E1 		mov	r0, r3	@, D.4279
 2884 1c14 2338A0E1 		bl	vPortFree	@
 2885 1c18 00308DE5 		.loc 1 2167 0
 2886              		ldr	r0, [sp, #0]	@, pxTCB
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 89


 2887              		bl	vPortFree	@
 2888 1c1c 04309DE5 		.loc 1 2168 0
 2889 1c20 0030D3E5 		add	sp, sp, #4	@,,
 2890 1c24 A50053E3 		ldr	lr, [sp], #4
 2891 1c28 F3FFFF0A 		bx	lr
2122:SRC/RTOS/tasks.c **** 		}
2123:SRC/RTOS/tasks.c **** 
2124:SRC/RTOS/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 2892              	ze	prvDeleteTCB, .-prvDeleteTCB
 2893 1c2c 00209DE5 		.align	2
 2894 1c30 2231A0E1 		.global	xTaskGetCurrentTaskHandle
 2895 1c34 0338A0E1 		.type	xTaskGetCurrentTaskHandle, %function
 2896 1c38 2338A0E1 	xTaskGetCurrentTaskHandle:
 2897 1c3c 00308DE5 	.LFB36:
2125:SRC/RTOS/tasks.c **** 
2126:SRC/RTOS/tasks.c **** 		return usCount;
 2898              	1 2178 0
 2899 1c40 00309DE5 		@ Function supports interworking.
2127:SRC/RTOS/tasks.c **** 	}
 2900              	 args = 0, pretend = 0, frame = 4
 2901 1c44 0300A0E1 		@ frame_needed = 0, uses_anonymous_args = 0
 2902 1c48 08D08DE2 		@ link register save eliminated.
 2903 1c4c 1EFF2FE1 		sub	sp, sp, #4	@,,
 2904              	.LCFI57:
 2905              		.loc 1 2184 0
 2906              		ldr	r3, .L242	@ tmp135,
 2907              		ldr	r3, [r3, #0]	@ tmp136, pxCurrentTCB
 2908              		str	r3, [sp, #0]	@ tmp136, xReturn
 2909              		.loc 1 2186 0
2128:SRC/RTOS/tasks.c **** 
2129:SRC/RTOS/tasks.c **** #endif
2130:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2131:SRC/RTOS/tasks.c **** 
2132:SRC/RTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2133:SRC/RTOS/tasks.c **** 
2134:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2135:SRC/RTOS/tasks.c **** 	{
2136:SRC/RTOS/tasks.c **** 	tskTCB *pxTCB;
2137:SRC/RTOS/tasks.c **** 	unsigned char *pcEndOfStack;
2138:SRC/RTOS/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2139:SRC/RTOS/tasks.c **** 
2140:SRC/RTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2141:SRC/RTOS/tasks.c **** 
2142:SRC/RTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
2143:SRC/RTOS/tasks.c **** 		{
2144:SRC/RTOS/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
2145:SRC/RTOS/tasks.c **** 		}
2146:SRC/RTOS/tasks.c **** 		#else
2147:SRC/RTOS/tasks.c **** 		{
2148:SRC/RTOS/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2149:SRC/RTOS/tasks.c **** 		}
2150:SRC/RTOS/tasks.c **** 		#endif
2151:SRC/RTOS/tasks.c **** 
2152:SRC/RTOS/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
2153:SRC/RTOS/tasks.c **** 
2154:SRC/RTOS/tasks.c **** 		return uxReturn;
2155:SRC/RTOS/tasks.c **** 	}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 90


2156:SRC/RTOS/tasks.c **** 
2157:SRC/RTOS/tasks.c **** #endif
2158:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2159:SRC/RTOS/tasks.c **** 
2160:SRC/RTOS/tasks.c **** #if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )
2161:SRC/RTOS/tasks.c **** 
2162:SRC/RTOS/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2163:SRC/RTOS/tasks.c **** 	{
 2910              	sp, #0]	@ D.4284, xReturn
 2911              		.loc 1 2187 0
 2912              		mov	r0, r3	@, <result>
 2913              		add	sp, sp, #4	@,,
 2914 1c50 04E02DE5 		bx	lr
 2915              	.L243:
 2916 1c54 04D04DE2 		.align	2
 2917              	.L242:
 2918 1c58 00008DE5 		.word	pxCurrentTCB
2164:SRC/RTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2165:SRC/RTOS/tasks.c **** 		the task to free any memory allocated at the application level. */
2166:SRC/RTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 2919              	.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 2920 1c5c 00309DE5 		.align	2
 2921 1c60 303093E5 		.global	vTaskPriorityInherit
 2922 1c64 0300A0E1 		.type	vTaskPriorityInherit, %function
 2923 1c68 FEFFFFEB 	vTaskPriorityInherit:
2167:SRC/RTOS/tasks.c **** 		vPortFree( pxTCB );
 2924              	7:
 2925 1c6c 00009DE5 		.loc 1 2224 0
 2926 1c70 FEFFFFEB 		@ Function supports interworking.
2168:SRC/RTOS/tasks.c **** 	}
 2927              	args = 0, pretend = 0, frame = 8
 2928 1c74 04D08DE2 		@ frame_needed = 0, uses_anonymous_args = 0
 2929 1c78 04E09DE4 		str	lr, [sp, #-4]!	@,
 2930 1c7c 1EFF2FE1 	.LCFI58:
 2931              		sub	sp, sp, #8	@,,
 2932              	.LCFI59:
 2933              		str	r0, [sp, #0]	@ pxMutexHolder, pxMutexHolder
 2934              		.loc 1 2225 0
 2935              		ldr	r3, [sp, #0]	@ tmp155, pxMutexHolder
 2936              		str	r3, [sp, #4]	@ tmp155, pxTCB
 2937              		.loc 1 2227 0
2169:SRC/RTOS/tasks.c **** 
2170:SRC/RTOS/tasks.c **** #endif
2171:SRC/RTOS/tasks.c **** 
2172:SRC/RTOS/tasks.c **** 
2173:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2174:SRC/RTOS/tasks.c **** 
2175:SRC/RTOS/tasks.c **** #if ( INCLUDE_xTaskGetCurrentTaskHandle == 1 )
2176:SRC/RTOS/tasks.c **** 
2177:SRC/RTOS/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2178:SRC/RTOS/tasks.c **** 	{
 2938              	p, #4]	@ tmp156, pxTCB
 2939              		ldr	r2, [r3, #44]	@ D.4290, <variable>.uxPriority
 2940              		ldr	r3, .L249	@ tmp157,
 2941              		ldr	r3, [r3, #0]	@ pxCurrentTCB.157, pxCurrentTCB
 2942              		ldr	r3, [r3, #44]	@ D.4292, <variable>.uxPriority
 2943 1c80 04D04DE2 		cmp	r2, r3	@ D.4290, D.4292
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 91


 2944              		bcs	.L248	@,
2179:SRC/RTOS/tasks.c **** 	xTaskHandle xReturn;
2180:SRC/RTOS/tasks.c **** 
2181:SRC/RTOS/tasks.c **** 		/* A critical section is not required as this is not called from
2182:SRC/RTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2183:SRC/RTOS/tasks.c **** 		individual execution thread. */
2184:SRC/RTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 2945              	 2230 0
 2946 1c84 14309FE5 		ldr	r3, .L249	@ tmp158,
 2947 1c88 003093E5 		ldr	r3, [r3, #0]	@ pxCurrentTCB.158, pxCurrentTCB
 2948 1c8c 00308DE5 		ldr	r3, [r3, #44]	@ D.4294, <variable>.uxPriority
2185:SRC/RTOS/tasks.c **** 
2186:SRC/RTOS/tasks.c **** 		return xReturn;
 2949              		r2, r3, #4	@ D.4295, D.4294,
 2950 1c90 00309DE5 		ldr	r3, [sp, #4]	@ tmp159, pxTCB
2187:SRC/RTOS/tasks.c **** 	}
 2951              	tr	r2, [r3, #24]	@ D.4295, <variable>.xEventListItem.xItemValue
 2952 1c94 0300A0E1 		.loc 1 2234 0
 2953 1c98 04D08DE2 		ldr	r3, [sp, #4]	@ tmp160, pxTCB
 2954 1c9c 1EFF2FE1 		ldr	r1, [r3, #20]	@ D.4296, <variable>.xGenericListItem.pvContainer
 2955              		ldr	r3, [sp, #4]	@ tmp161, pxTCB
 2956              		ldr	r3, [r3, #44]	@ D.4297, <variable>.uxPriority
 2957              		mov	r2, r3, asl #2	@ tmp163, tmp162,
 2958 1ca0 00000000 		mov	r3, r2, asl #2	@ tmp164, tmp163,
 2959              		add	r2, r2, r3	@ D.4298, tmp163, tmp164
 2960              		ldr	r3, .L249+4	@ tmp165,
 2961              		add	r3, r2, r3	@ D.4299, D.4298, tmp165
 2962              		cmp	r1, r3	@ D.4296, D.4299
 2963              		bne	.L246	@,
 2964              		.loc 1 2236 0
 2965              		ldr	r3, [sp, #4]	@ tmp166, pxTCB
2188:SRC/RTOS/tasks.c **** 
2189:SRC/RTOS/tasks.c **** #endif
2190:SRC/RTOS/tasks.c **** 
2191:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2192:SRC/RTOS/tasks.c **** 
2193:SRC/RTOS/tasks.c **** #if ( INCLUDE_xTaskGetSchedulerState == 1 )
2194:SRC/RTOS/tasks.c **** 
2195:SRC/RTOS/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2196:SRC/RTOS/tasks.c **** 	{
2197:SRC/RTOS/tasks.c **** 	portBASE_TYPE xReturn;
2198:SRC/RTOS/tasks.c **** 
2199:SRC/RTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2200:SRC/RTOS/tasks.c **** 		{
2201:SRC/RTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2202:SRC/RTOS/tasks.c **** 		}
2203:SRC/RTOS/tasks.c **** 		else
2204:SRC/RTOS/tasks.c **** 		{
2205:SRC/RTOS/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2206:SRC/RTOS/tasks.c **** 			{
2207:SRC/RTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2208:SRC/RTOS/tasks.c **** 			}
2209:SRC/RTOS/tasks.c **** 			else
2210:SRC/RTOS/tasks.c **** 			{
2211:SRC/RTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2212:SRC/RTOS/tasks.c **** 			}
2213:SRC/RTOS/tasks.c **** 		}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 92


2214:SRC/RTOS/tasks.c **** 
2215:SRC/RTOS/tasks.c **** 		return xReturn;
2216:SRC/RTOS/tasks.c **** 	}
2217:SRC/RTOS/tasks.c **** 
2218:SRC/RTOS/tasks.c **** #endif
2219:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2220:SRC/RTOS/tasks.c **** 
2221:SRC/RTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2222:SRC/RTOS/tasks.c **** 
2223:SRC/RTOS/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2224:SRC/RTOS/tasks.c **** 	{
 2966              		@ D.4300, tmp166,
 2967              		mov	r0, r3	@, D.4300
 2968              		bl	vListRemove	@
 2969              		.loc 1 2239 0
 2970 1ca4 04E02DE5 		ldr	r3, .L249	@ tmp167,
 2971              		ldr	r3, [r3, #0]	@ pxCurrentTCB.159, pxCurrentTCB
 2972 1ca8 08D04DE2 		ldr	r2, [r3, #44]	@ D.4302, <variable>.uxPriority
 2973              		ldr	r3, [sp, #4]	@ tmp168, pxTCB
 2974 1cac 00008DE5 		str	r2, [r3, #44]	@ D.4302, <variable>.uxPriority
2225:SRC/RTOS/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 2975              	240 0
 2976 1cb0 00309DE5 		ldr	r3, [sp, #4]	@ tmp169, pxTCB
 2977 1cb4 04308DE5 		ldr	r2, [r3, #44]	@ D.4303, <variable>.uxPriority
2226:SRC/RTOS/tasks.c **** 
2227:SRC/RTOS/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2978              	r	r3, .L249+8	@ tmp170,
 2979 1cb8 04309DE5 		ldr	r3, [r3, #0]	@ uxTopReadyPriority.160, uxTopReadyPriority
 2980 1cbc 2C2093E5 		cmp	r2, r3	@ D.4303, uxTopReadyPriority.160
 2981 1cc0 F0309FE5 		bls	.L247	@,
 2982 1cc4 003093E5 		ldr	r3, [sp, #4]	@ tmp171, pxTCB
 2983 1cc8 2C3093E5 		ldr	r2, [r3, #44]	@ uxTopReadyPriority.161, <variable>.uxPriority
 2984 1ccc 030052E1 		ldr	r3, .L249+8	@ tmp172,
 2985 1cd0 3500002A 		str	r2, [r3, #0]	@ uxTopReadyPriority.161, uxTopReadyPriority
2228:SRC/RTOS/tasks.c **** 		{
2229:SRC/RTOS/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2230:SRC/RTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 2986              	ldr	r3, [sp, #4]	@ tmp173, pxTCB
 2987 1cd4 DC309FE5 		ldr	r3, [r3, #44]	@ D.4306, <variable>.uxPriority
 2988 1cd8 003093E5 		mov	r2, r3, asl #2	@ tmp175, tmp174,
 2989 1cdc 2C3093E5 		mov	r3, r2, asl #2	@ tmp176, tmp175,
 2990 1ce0 042063E2 		add	r2, r2, r3	@ D.4307, tmp175, tmp176
 2991 1ce4 04309DE5 		ldr	r3, .L249+4	@ tmp177,
 2992 1ce8 182083E5 		add	r2, r2, r3	@ D.4308, D.4307, tmp177
2231:SRC/RTOS/tasks.c **** 
2232:SRC/RTOS/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2233:SRC/RTOS/tasks.c **** 			be moved in to a new list. */
2234:SRC/RTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 2993              	, [sp, #4]	@ tmp178, pxTCB
 2994 1cec 04309DE5 		add	r3, r3, #4	@ D.4309, tmp178,
 2995 1cf0 141093E5 		mov	r0, r2	@, D.4308
 2996 1cf4 04309DE5 		mov	r1, r3	@, D.4309
 2997 1cf8 2C3093E5 		bl	vListInsertEnd	@
 2998 1cfc 0321A0E1 		b	.L248	@
 2999 1d00 0231A0E1 	.L246:
 3000 1d04 032082E0 		.loc 1 2245 0
 3001 1d08 AC309FE5 		ldr	r3, .L249	@ tmp179,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 93


 3002 1d0c 033082E0 		ldr	r3, [r3, #0]	@ pxCurrentTCB.162, pxCurrentTCB
 3003 1d10 030051E1 		ldr	r2, [r3, #44]	@ D.4311, <variable>.uxPriority
 3004 1d14 1F00001A 		ldr	r3, [sp, #4]	@ tmp180, pxTCB
2235:SRC/RTOS/tasks.c **** 			{
2236:SRC/RTOS/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3005              	, #44]	@ D.4311, <variable>.uxPriority
 3006 1d18 04309DE5 	.L248:
 3007 1d1c 043083E2 		.loc 1 2248 0
 3008 1d20 0300A0E1 		add	sp, sp, #8	@,,
 3009 1d24 FEFFFFEB 		ldr	lr, [sp], #4
2237:SRC/RTOS/tasks.c **** 
2238:SRC/RTOS/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2239:SRC/RTOS/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3010              	r
 3011 1d28 88309FE5 	.L250:
 3012 1d2c 003093E5 		.align	2
 3013 1d30 2C2093E5 	.L249:
 3014 1d34 04309DE5 		.word	pxCurrentTCB
 3015 1d38 2C2083E5 		.word	pxReadyTasksLists
2240:SRC/RTOS/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3016              		uxTopReadyPriority
 3017 1d3c 04309DE5 	.LFE37:
 3018 1d40 2C2093E5 		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3019 1d44 74309FE5 		.align	2
 3020 1d48 003093E5 		.global	vTaskPriorityDisinherit
 3021 1d4c 030052E1 		.type	vTaskPriorityDisinherit, %function
 3022 1d50 0300009A 	vTaskPriorityDisinherit:
 3023 1d54 04309DE5 	.LFB38:
 3024 1d58 2C2093E5 		.loc 1 2256 0
 3025 1d5c 5C309FE5 		@ Function supports interworking.
 3026 1d60 002083E5 		@ args = 0, pretend = 0, frame = 8
 3027              		@ frame_needed = 0, uses_anonymous_args = 0
 3028 1d64 04309DE5 		str	lr, [sp, #-4]!	@,
 3029 1d68 2C3093E5 	.LCFI60:
 3030 1d6c 0321A0E1 		sub	sp, sp, #8	@,,
 3031 1d70 0231A0E1 	.LCFI61:
 3032 1d74 032082E0 		str	r0, [sp, #0]	@ pxMutexHolder, pxMutexHolder
 3033 1d78 3C309FE5 		.loc 1 2257 0
 3034 1d7c 032082E0 		ldr	r3, [sp, #0]	@ tmp146, pxMutexHolder
 3035 1d80 04309DE5 		str	r3, [sp, #4]	@ tmp146, pxTCB
 3036 1d84 043083E2 		.loc 1 2259 0
 3037 1d88 0200A0E1 		ldr	r3, [sp, #0]	@ tmp147, pxMutexHolder
 3038 1d8c 0310A0E1 		cmp	r3, #0	@ tmp147,
 3039 1d90 FEFFFFEB 		beq	.L254	@,
 3040 1d94 040000EA 		.loc 1 2261 0
 3041              		ldr	r3, [sp, #4]	@ tmp148, pxTCB
2241:SRC/RTOS/tasks.c **** 			}
2242:SRC/RTOS/tasks.c **** 			else
2243:SRC/RTOS/tasks.c **** 			{
2244:SRC/RTOS/tasks.c **** 				/* Just inherit the priority. */
2245:SRC/RTOS/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3042              	3, <variable>.uxPriority
 3043 1d98 18309FE5 		ldr	r3, [sp, #4]	@ tmp149, pxTCB
 3044 1d9c 003093E5 		ldr	r3, [r3, #68]	@ D.4324, <variable>.uxBasePriority
 3045 1da0 2C2093E5 		cmp	r2, r3	@ D.4323, D.4324
 3046 1da4 04309DE5 		beq	.L254	@,
 3047 1da8 2C2083E5 		.loc 1 2265 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 94


 3048              		ldr	r3, [sp, #4]	@ tmp150, pxTCB
2246:SRC/RTOS/tasks.c **** 			}
2247:SRC/RTOS/tasks.c **** 		}
2248:SRC/RTOS/tasks.c **** 	}
 3049              	, r3, #4	@ D.4325, tmp150,
 3050 1dac 08D08DE2 		mov	r0, r3	@, D.4325
 3051 1db0 04E09DE4 		bl	vListRemove	@
 3052 1db4 1EFF2FE1 		.loc 1 2269 0
 3053              		ldr	r3, [sp, #4]	@ tmp151, pxTCB
 3054              		ldr	r2, [r3, #68]	@ D.4326, <variable>.uxBasePriority
 3055              		ldr	r3, [sp, #4]	@ tmp152, pxTCB
 3056 1db8 00000000 		str	r2, [r3, #44]	@ D.4326, <variable>.uxPriority
 3057 1dbc 34000000 		.loc 1 2270 0
 3058 1dc0 14000000 		ldr	r3, [sp, #4]	@ tmp153, pxTCB
 3059              		ldr	r3, [r3, #44]	@ D.4327, <variable>.uxPriority
 3060              		rsb	r2, r3, #4	@ D.4328, D.4327,
 3061              		ldr	r3, [sp, #4]	@ tmp154, pxTCB
 3062              		str	r2, [r3, #24]	@ D.4328, <variable>.xEventListItem.xItemValue
 3063              		.loc 1 2271 0
 3064              		ldr	r3, [sp, #4]	@ tmp155, pxTCB
 3065              		ldr	r2, [r3, #44]	@ D.4329, <variable>.uxPriority
2249:SRC/RTOS/tasks.c **** 
2250:SRC/RTOS/tasks.c **** #endif
2251:SRC/RTOS/tasks.c **** /*-----------------------------------------------------------*/
2252:SRC/RTOS/tasks.c **** 
2253:SRC/RTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2254:SRC/RTOS/tasks.c **** 
2255:SRC/RTOS/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2256:SRC/RTOS/tasks.c **** 	{
 3066              	tmp156,
 3067              		ldr	r3, [r3, #0]	@ uxTopReadyPriority.163, uxTopReadyPriority
 3068              		cmp	r2, r3	@ D.4329, uxTopReadyPriority.163
 3069              		bls	.L253	@,
 3070 1dc4 04E02DE5 		ldr	r3, [sp, #4]	@ tmp157, pxTCB
 3071              		ldr	r2, [r3, #44]	@ uxTopReadyPriority.164, <variable>.uxPriority
 3072 1dc8 08D04DE2 		ldr	r3, .L255	@ tmp158,
 3073              		str	r2, [r3, #0]	@ uxTopReadyPriority.164, uxTopReadyPriority
 3074 1dcc 00008DE5 	.L253:
2257:SRC/RTOS/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3075              	[sp, #4]	@ tmp159, pxTCB
 3076 1dd0 00309DE5 		ldr	r3, [r3, #44]	@ D.4332, <variable>.uxPriority
 3077 1dd4 04308DE5 		mov	r2, r3, asl #2	@ tmp161, tmp160,
2258:SRC/RTOS/tasks.c **** 
2259:SRC/RTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 3078              	v	r3, r2, asl #2	@ tmp162, tmp161,
 3079 1dd8 00309DE5 		add	r2, r2, r3	@ D.4333, tmp161, tmp162
 3080 1ddc 000053E3 		ldr	r3, .L255+4	@ tmp163,
 3081 1de0 2800000A 		add	r2, r2, r3	@ D.4334, D.4333, tmp163
2260:SRC/RTOS/tasks.c **** 		{
2261:SRC/RTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3082              		r3, [sp, #4]	@ tmp164, pxTCB
 3083 1de4 04309DE5 		add	r3, r3, #4	@ D.4335, tmp164,
 3084 1de8 2C2093E5 		mov	r0, r2	@, D.4334
 3085 1dec 04309DE5 		mov	r1, r3	@, D.4335
 3086 1df0 443093E5 		bl	vListInsertEnd	@
 3087 1df4 030052E1 	.L254:
 3088 1df8 2200000A 		.loc 1 2274 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 95


2262:SRC/RTOS/tasks.c **** 			{
2263:SRC/RTOS/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2264:SRC/RTOS/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2265:SRC/RTOS/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3089              	, sp, #8	@,,
 3090 1dfc 04309DE5 		ldr	lr, [sp], #4
 3091 1e00 043083E2 		bx	lr
 3092 1e04 0300A0E1 	.L256:
 3093 1e08 FEFFFFEB 		.align	2
2266:SRC/RTOS/tasks.c **** 
2267:SRC/RTOS/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2268:SRC/RTOS/tasks.c **** 				ready list. */
2269:SRC/RTOS/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3094              	:
 3095 1e0c 04309DE5 		.word	uxTopReadyPriority
 3096 1e10 442093E5 		.word	pxReadyTasksLists
 3097 1e14 04309DE5 	.LFE38:
 3098 1e18 2C2083E5 		.size	vTaskPriorityDisinherit, .-vTaskPriorityDisinherit
2270:SRC/RTOS/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3099              	
 3100 1e1c 04309DE5 		.align	2
 3101 1e20 2C3093E5 	pxReadyTasksLists:
 3102 1e24 042063E2 		.space	80
 3103 1e28 04309DE5 		.align	2
 3104 1e2c 182083E5 	xDelayedTaskList1:
2271:SRC/RTOS/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3105              	ce	20
 3106 1e30 04309DE5 		.align	2
 3107 1e34 2C2093E5 	xDelayedTaskList2:
 3108 1e38 54309FE5 		.space	20
 3109 1e3c 003093E5 		.align	2
 3110 1e40 030052E1 	pxDelayedTaskList:
 3111 1e44 0300009A 		.space	4
 3112 1e48 04309DE5 		.align	2
 3113 1e4c 2C2093E5 	pxOverflowDelayedTaskList:
 3114 1e50 3C309FE5 		.space	4
 3115 1e54 002083E5 		.align	2
 3116              	xPendingReadyList:
 3117 1e58 04309DE5 		.space	20
 3118 1e5c 2C3093E5 		.align	2
 3119 1e60 0321A0E1 	xTasksWaitingTermination:
 3120 1e64 0231A0E1 		.space	20
 3121 1e68 032082E0 		.align	2
 3122 1e6c 24309FE5 	xSuspendedTaskList:
 3123 1e70 032082E0 		.space	20
 3124 1e74 04309DE5 		.align	2
 3125 1e78 043083E2 	pcTraceBuffer:
 3126 1e7c 0200A0E1 		.space	4
 3127 1e80 0310A0E1 		.align	2
 3128 1e84 FEFFFFEB 	pcTraceBufferStart:
 3129              		.space	4
2272:SRC/RTOS/tasks.c **** 			}
2273:SRC/RTOS/tasks.c **** 		}
2274:SRC/RTOS/tasks.c **** 	}
 3130              	d:
 3131 1e88 08D08DE2 		.space	4
 3132 1e8c 04E09DE4 	pcStatusString:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 96


 3133 1e90 1EFF2FE1 		.space	50
 3134              		.section	.debug_frame,"",%progbits
 3135              	.Lframe0:
 3136              		.4byte	.LECIE0-.LSCIE0
 3137 1e94 14000000 	.LSCIE0:
 3138 1e98 34000000 		.4byte	0xffffffff
 3139              		.byte	0x1
 3140              		.ascii	"\000"
 3141              		.uleb128 0x1
 3142              		.sleb128 -4
 3143              		.byte	0xe
 3144 0034 00000000 		.byte	0xc
 3144      00000000 
 3144      00000000 
 3144      00000000 
 3144      00000000 
 3145              		.uleb128 0xd
 3146              		.uleb128 0x0
 3147 0084 00000000 		.align	2
 3147      00000000 
 3147      00000000 
 3147      00000000 
 3147      00000000 
 3148              	.LECIE0:
 3149              	.LSFDE0:
 3150 0098 00000000 		.4byte	.LEFDE0-.LASFDE0
 3150      00000000 
 3150      00000000 
 3150      00000000 
 3150      00000000 
 3151              	.LASFDE0:
 3152              		.4byte	.Lframe0
 3153 00ac 00000000 		.4byte	.LFB2
 3154              		.4byte	.LFE2-.LFB2
 3155              		.byte	0x4
 3156 00b0 00000000 		.4byte	.LCFI0-.LFB2
 3157              		.byte	0xe
 3158              		.uleb128 0x4
 3159 00b4 00000000 		.byte	0x4
 3159      00000000 
 3159      00000000 
 3159      00000000 
 3159      00000000 
 3160              		.4byte	.LCFI1-.LCFI0
 3161              		.byte	0xe
 3162 00c8 00000000 		.uleb128 0x24
 3162      00000000 
 3162      00000000 
 3162      00000000 
 3162      00000000 
 3163              		.byte	0x8e
 3164              		.uleb128 0x1
 3165 00dc 00000000 		.align	2
 3165      00000000 
 3165      00000000 
 3165      00000000 
 3165      00000000 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 97


 3166              	.LEFDE0:
 3167              	.LSFDE2:
 3168 00f0 00000000 		.4byte	.LEFDE2-.LASFDE2
 3169              	.LASFDE2:
 3170              		.4byte	.Lframe0
 3171 00f4 00000000 		.4byte	.LFB3
 3172              		.4byte	.LFE3-.LFB3
 3173              		.byte	0x4
 3174 00f8 00000000 		.4byte	.LCFI2-.LFB3
 3175              		.byte	0xe
 3176 00fc 00000000 		.uleb128 0x4
 3176      00000000 
 3176      00000000 
 3176      00000000 
 3176      00000000 
 3177 012e 0000     		.byte	0x4
 3178              		.4byte	.LCFI3-.LCFI2
 3179 0000 0C000000 		.byte	0xe
 3180              		.uleb128 0x10
 3181 0004 FFFFFFFF 		.byte	0x8e
 3182 0008 01       		.uleb128 0x1
 3183 0009 00       		.align	2
 3184 000a 01       	.LEFDE2:
 3185 000b 7C       	.LSFDE4:
 3186 000c 0E       		.4byte	.LEFDE4-.LASFDE4
 3187 000d 0C       	.LASFDE4:
 3188 000e 0D       		.4byte	.Lframe0
 3189 000f 00       		.4byte	.LFB4
 3190              		.4byte	.LFE4-.LFB4
 3191              		.byte	0x4
 3192              		.4byte	.LCFI4-.LFB4
 3193 0010 14000000 		.byte	0xe
 3194              		.uleb128 0x4
 3195 0014 00000000 		.byte	0x4
 3196 0018 00000000 		.4byte	.LCFI5-.LCFI4
 3197 001c 50020000 		.byte	0xe
 3198 0020 44       		.uleb128 0x18
 3199              		.byte	0x8e
 3200 0021 0E       		.uleb128 0x1
 3201 0022 04       		.align	2
 3202 0023 44       	.LEFDE4:
 3203              	.LSFDE6:
 3204 0024 0E       		.4byte	.LEFDE6-.LASFDE6
 3205 0025 24       	.LASFDE6:
 3206 0026 8E       		.4byte	.Lframe0
 3207 0027 01       		.4byte	.LFB5
 3208              		.4byte	.LFE5-.LFB5
 3209              		.byte	0x4
 3210              		.4byte	.LCFI6-.LFB5
 3211 0028 14000000 		.byte	0xe
 3212              		.uleb128 0x4
 3213 002c 00000000 		.byte	0x4
 3214 0030 50020000 		.4byte	.LCFI7-.LCFI6
 3215 0034 08010000 		.byte	0xe
 3216 0038 44       		.uleb128 0x10
 3217              		.byte	0x8e
 3218 0039 0E       		.uleb128 0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 98


 3219 003a 04       		.align	2
 3220 003b 44       	.LEFDE6:
 3221              	.LSFDE8:
 3222 003c 0E       		.4byte	.LEFDE8-.LASFDE8
 3223 003d 10       	.LASFDE8:
 3224 003e 8E       		.4byte	.Lframe0
 3225 003f 01       		.4byte	.LFB6
 3226              		.4byte	.LFE6-.LFB6
 3227              		.byte	0x4
 3228              		.4byte	.LCFI8-.LFB6
 3229 0040 14000000 		.byte	0xe
 3230              		.uleb128 0x4
 3231 0044 00000000 		.byte	0x4
 3232 0048 58030000 		.4byte	.LCFI9-.LCFI8
 3233 004c 78010000 		.byte	0xe
 3234 0050 44       		.uleb128 0x14
 3235              		.byte	0x8e
 3236 0051 0E       		.uleb128 0x1
 3237 0052 04       		.align	2
 3238 0053 44       	.LEFDE8:
 3239              	.LSFDE10:
 3240 0054 0E       		.4byte	.LEFDE10-.LASFDE10
 3241 0055 18       	.LASFDE10:
 3242 0056 8E       		.4byte	.Lframe0
 3243 0057 01       		.4byte	.LFB7
 3244              		.4byte	.LFE7-.LFB7
 3245              		.byte	0x4
 3246              		.4byte	.LCFI10-.LFB7
 3247 0058 14000000 		.byte	0xe
 3248              		.uleb128 0x4
 3249 005c 00000000 		.byte	0x4
 3250 0060 D0040000 		.4byte	.LCFI11-.LCFI10
 3251 0064 EC000000 		.byte	0xe
 3252 0068 44       		.uleb128 0x1c
 3253              		.byte	0x8e
 3254 0069 0E       		.uleb128 0x1
 3255 006a 04       		.align	2
 3256 006b 44       	.LEFDE10:
 3257              	.LSFDE12:
 3258 006c 0E       		.4byte	.LEFDE12-.LASFDE12
 3259 006d 10       	.LASFDE12:
 3260 006e 8E       		.4byte	.Lframe0
 3261 006f 01       		.4byte	.LFB8
 3262              		.4byte	.LFE8-.LFB8
 3263              		.byte	0x4
 3264              		.4byte	.LCFI12-.LFB8
 3265 0070 14000000 		.byte	0xe
 3266              		.uleb128 0x4
 3267 0074 00000000 		.byte	0x4
 3268 0078 BC050000 		.4byte	.LCFI13-.LCFI12
 3269 007c 64000000 		.byte	0xe
 3270 0080 44       		.uleb128 0x10
 3271              		.byte	0x8e
 3272 0081 0E       		.uleb128 0x1
 3273 0082 04       		.align	2
 3274 0083 44       	.LEFDE12:
 3275              	.LSFDE14:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 99


 3276 0084 0E       		.4byte	.LEFDE14-.LASFDE14
 3277 0085 14       	.LASFDE14:
 3278 0086 8E       		.4byte	.Lframe0
 3279 0087 01       		.4byte	.LFB9
 3280              		.4byte	.LFE9-.LFB9
 3281              		.byte	0x4
 3282              		.4byte	.LCFI14-.LFB9
 3283 0088 14000000 		.byte	0xe
 3284              		.uleb128 0xc
 3285 008c 00000000 		.align	2
 3286 0090 20060000 	.LEFDE14:
 3287 0094 CC010000 	.LSFDE16:
 3288 0098 44       		.4byte	.LEFDE16-.LASFDE16
 3289              	.LASFDE16:
 3290 0099 0E       		.4byte	.Lframe0
 3291 009a 04       		.4byte	.LFB10
 3292 009b 44       		.4byte	.LFE10-.LFB10
 3293              		.byte	0x4
 3294 009c 0E       		.4byte	.LCFI15-.LFB10
 3295 009d 1C       		.byte	0xe
 3296 009e 8E       		.uleb128 0x4
 3297 009f 01       		.byte	0x4
 3298              		.4byte	.LCFI16-.LCFI15
 3299              		.byte	0xe
 3300              		.uleb128 0xc
 3301 00a0 14000000 		.byte	0x8e
 3302              		.uleb128 0x1
 3303 00a4 00000000 		.align	2
 3304 00a8 EC070000 	.LEFDE16:
 3305 00ac C4000000 	.LSFDE18:
 3306 00b0 44       		.4byte	.LEFDE18-.LASFDE18
 3307              	.LASFDE18:
 3308 00b1 0E       		.4byte	.Lframe0
 3309 00b2 04       		.4byte	.LFB11
 3310 00b3 44       		.4byte	.LFE11-.LFB11
 3311              		.byte	0x4
 3312 00b4 0E       		.4byte	.LCFI17-.LFB11
 3313 00b5 10       		.byte	0xe
 3314 00b6 8E       		.uleb128 0x4
 3315 00b7 01       		.byte	0x4
 3316              		.4byte	.LCFI18-.LCFI17
 3317              		.byte	0xe
 3318              		.uleb128 0x10
 3319 00b8 10000000 		.byte	0x8e
 3320              		.uleb128 0x1
 3321 00bc 00000000 		.align	2
 3322 00c0 B0080000 	.LEFDE18:
 3323 00c4 70000000 	.LSFDE20:
 3324 00c8 44       		.4byte	.LEFDE20-.LASFDE20
 3325              	.LASFDE20:
 3326 00c9 0E       		.4byte	.Lframe0
 3327 00ca 0C       		.4byte	.LFB12
 3328 00cb 00       		.4byte	.LFE12-.LFB12
 3329              		.byte	0x4
 3330              		.4byte	.LCFI19-.LFB12
 3331 00cc 14000000 		.byte	0xe
 3332              		.uleb128 0x4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 100


 3333 00d0 00000000 		.byte	0x4
 3334 00d4 20090000 		.4byte	.LCFI20-.LCFI19
 3335 00d8 F0000000 		.byte	0xe
 3336 00dc 44       		.uleb128 0x18
 3337              		.byte	0x8e
 3338 00dd 0E       		.uleb128 0x1
 3339 00de 04       		.align	2
 3340 00df 44       	.LEFDE20:
 3341              	.LSFDE22:
 3342 00e0 0E       		.4byte	.LEFDE22-.LASFDE22
 3343 00e1 0C       	.LASFDE22:
 3344 00e2 8E       		.4byte	.Lframe0
 3345 00e3 01       		.4byte	.LFB13
 3346              		.4byte	.LFE13-.LFB13
 3347              		.byte	0x4
 3348              		.4byte	.LCFI21-.LFB13
 3349 00e4 14000000 		.byte	0xe
 3350              		.uleb128 0x4
 3351 00e8 00000000 		.byte	0x8e
 3352 00ec 100A0000 		.uleb128 0x1
 3353 00f0 0C010000 		.align	2
 3354 00f4 44       	.LEFDE22:
 3355              	.LSFDE24:
 3356 00f5 0E       		.4byte	.LEFDE24-.LASFDE24
 3357 00f6 04       	.LASFDE24:
 3358 00f7 44       		.4byte	.Lframe0
 3359              		.4byte	.LFB14
 3360 00f8 0E       		.4byte	.LFE14-.LFB14
 3361 00f9 10       		.align	2
 3362 00fa 8E       	.LEFDE24:
 3363 00fb 01       	.LSFDE26:
 3364              		.4byte	.LEFDE26-.LASFDE26
 3365              	.LASFDE26:
 3366              		.4byte	.Lframe0
 3367 00fc 14000000 		.4byte	.LFB15
 3368              		.4byte	.LFE15-.LFB15
 3369 0100 00000000 		.byte	0x4
 3370 0104 1C0B0000 		.4byte	.LCFI22-.LFB15
 3371 0108 A0000000 		.byte	0xe
 3372 010c 44       		.uleb128 0x4
 3373              		.byte	0x4
 3374 010d 0E       		.4byte	.LCFI23-.LCFI22
 3375 010e 04       		.byte	0xe
 3376 010f 44       		.uleb128 0x14
 3377              		.byte	0x8e
 3378 0110 0E       		.uleb128 0x1
 3379 0111 18       		.align	2
 3380 0112 8E       	.LEFDE26:
 3381 0113 01       	.LSFDE28:
 3382              		.4byte	.LEFDE28-.LASFDE28
 3383              	.LASFDE28:
 3384              		.4byte	.Lframe0
 3385 0114 14000000 		.4byte	.LFB16
 3386              		.4byte	.LFE16-.LFB16
 3387 0118 00000000 		.byte	0x4
 3388 011c BC0B0000 		.4byte	.LCFI24-.LFB16
 3389 0120 34000000 		.byte	0xe
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 101


 3390 0124 44       		.uleb128 0x4
 3391              		.byte	0x4
 3392 0125 0E       		.4byte	.LCFI25-.LCFI24
 3393 0126 04       		.byte	0xe
 3394 0127 8E       		.uleb128 0x8
 3395 0128 01       		.byte	0x8e
 3396 0129 000000   		.uleb128 0x1
 3397              		.align	2
 3398              	.LEFDE28:
 3399 012c 0C000000 	.LSFDE30:
 3400              		.4byte	.LEFDE30-.LASFDE30
 3401 0130 00000000 	.LASFDE30:
 3402 0134 F00B0000 		.4byte	.Lframe0
 3403 0138 1C000000 		.4byte	.LFB17
 3404              		.4byte	.LFE17-.LFB17
 3405              		.align	2
 3406              	.LEFDE30:
 3407 013c 14000000 	.LSFDE32:
 3408              		.4byte	.LEFDE32-.LASFDE32
 3409 0140 00000000 	.LASFDE32:
 3410 0144 0C0C0000 		.4byte	.Lframe0
 3411 0148 E0010000 		.4byte	.LFB18
 3412 014c 44       		.4byte	.LFE18-.LFB18
 3413              		.byte	0x4
 3414 014d 0E       		.4byte	.LCFI26-.LFB18
 3415 014e 04       		.byte	0xe
 3416 014f 44       		.uleb128 0x8
 3417              		.byte	0x4
 3418 0150 0E       		.4byte	.LCFI27-.LCFI26
 3419 0151 14       		.byte	0xe
 3420 0152 8E       		.uleb128 0x10
 3421 0153 01       		.byte	0x8e
 3422              		.uleb128 0x1
 3423              		.byte	0x84
 3424              		.uleb128 0x2
 3425 0154 14000000 		.align	2
 3426              	.LEFDE32:
 3427 0158 00000000 	.LSFDE34:
 3428 015c EC0D0000 		.4byte	.LEFDE34-.LASFDE34
 3429 0160 34000000 	.LASFDE34:
 3430 0164 44       		.4byte	.Lframe0
 3431              		.4byte	.LFB19
 3432 0165 0E       		.4byte	.LFE19-.LFB19
 3433 0166 04       		.byte	0x4
 3434 0167 44       		.4byte	.LCFI28-.LFB19
 3435              		.byte	0xe
 3436 0168 0E       		.uleb128 0x4
 3437 0169 08       		.byte	0x4
 3438 016a 8E       		.4byte	.LCFI29-.LCFI28
 3439 016b 01       		.byte	0xe
 3440              		.uleb128 0xc
 3441              		.byte	0x8e
 3442              		.uleb128 0x1
 3443 016c 0C000000 		.align	2
 3444              	.LEFDE34:
 3445 0170 00000000 	.LSFDE36:
 3446 0174 200E0000 		.4byte	.LEFDE36-.LASFDE36
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 102


 3447 0178 14000000 	.LASFDE36:
 3448              		.4byte	.Lframe0
 3449              		.4byte	.LFB20
 3450              		.4byte	.LFE20-.LFB20
 3451 017c 18000000 		.byte	0x4
 3452              		.4byte	.LCFI30-.LFB20
 3453 0180 00000000 		.byte	0xe
 3454 0184 340E0000 		.uleb128 0x4
 3455 0188 78010000 		.byte	0x4
 3456 018c 44       		.4byte	.LCFI31-.LCFI30
 3457              		.byte	0xe
 3458 018d 0E       		.uleb128 0x8
 3459 018e 08       		.byte	0x8e
 3460 018f 44       		.uleb128 0x1
 3461              		.align	2
 3462 0190 0E       	.LEFDE36:
 3463 0191 10       	.LSFDE38:
 3464 0192 8E       		.4byte	.LEFDE38-.LASFDE38
 3465 0193 01       	.LASFDE38:
 3466 0194 84       		.4byte	.Lframe0
 3467 0195 02       		.4byte	.LFB21
 3468 0196 0000     		.4byte	.LFE21-.LFB21
 3469              		.byte	0x4
 3470              		.4byte	.LCFI32-.LFB21
 3471 0198 14000000 		.byte	0xe
 3472              		.uleb128 0x4
 3473 019c 00000000 		.byte	0x4
 3474 01a0 AC0F0000 		.4byte	.LCFI33-.LCFI32
 3475 01a4 70000000 		.byte	0xe
 3476 01a8 44       		.uleb128 0x10
 3477              		.byte	0x8e
 3478 01a9 0E       		.uleb128 0x1
 3479 01aa 04       		.align	2
 3480 01ab 44       	.LEFDE38:
 3481              	.LSFDE40:
 3482 01ac 0E       		.4byte	.LEFDE40-.LASFDE40
 3483 01ad 0C       	.LASFDE40:
 3484 01ae 8E       		.4byte	.Lframe0
 3485 01af 01       		.4byte	.LFB22
 3486              		.4byte	.LFE22-.LFB22
 3487              		.byte	0x4
 3488              		.4byte	.LCFI34-.LFB22
 3489 01b0 14000000 		.byte	0xe
 3490              		.uleb128 0x4
 3491 01b4 00000000 		.align	2
 3492 01b8 1C100000 	.LEFDE40:
 3493 01bc 58000000 	.LSFDE42:
 3494 01c0 44       		.4byte	.LEFDE42-.LASFDE42
 3495              	.LASFDE42:
 3496 01c1 0E       		.4byte	.Lframe0
 3497 01c2 04       		.4byte	.LFB23
 3498 01c3 44       		.4byte	.LFE23-.LFB23
 3499              		.byte	0x4
 3500 01c4 0E       		.4byte	.LCFI35-.LFB23
 3501 01c5 08       		.byte	0xe
 3502 01c6 8E       		.uleb128 0x4
 3503 01c7 01       		.byte	0x4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 103


 3504              		.4byte	.LCFI36-.LCFI35
 3505              		.byte	0xe
 3506              		.uleb128 0x10
 3507 01c8 14000000 		.byte	0x8e
 3508              		.uleb128 0x1
 3509 01cc 00000000 		.align	2
 3510 01d0 74100000 	.LEFDE42:
 3511 01d4 A8010000 	.LSFDE44:
 3512 01d8 44       		.4byte	.LEFDE44-.LASFDE44
 3513              	.LASFDE44:
 3514 01d9 0E       		.4byte	.Lframe0
 3515 01da 04       		.4byte	.LFB24
 3516 01db 44       		.4byte	.LFE24-.LFB24
 3517              		.byte	0x4
 3518 01dc 0E       		.4byte	.LCFI37-.LFB24
 3519 01dd 10       		.byte	0xe
 3520 01de 8E       		.uleb128 0x4
 3521 01df 01       		.byte	0x4
 3522              		.4byte	.LCFI38-.LCFI37
 3523              		.byte	0xe
 3524              		.uleb128 0x14
 3525 01e0 10000000 		.byte	0x8e
 3526              		.uleb128 0x1
 3527 01e4 00000000 		.align	2
 3528 01e8 1C120000 	.LEFDE44:
 3529 01ec CC010000 	.LSFDE46:
 3530 01f0 44       		.4byte	.LEFDE46-.LASFDE46
 3531              	.LASFDE46:
 3532 01f1 0E       		.4byte	.Lframe0
 3533 01f2 04       		.4byte	.LFB25
 3534 01f3 00       		.4byte	.LFE25-.LFB25
 3535              		.byte	0x4
 3536              		.4byte	.LCFI39-.LFB25
 3537 01f4 14000000 		.byte	0xe
 3538              		.uleb128 0x4
 3539 01f8 00000000 		.align	2
 3540 01fc E8130000 	.LEFDE46:
 3541 0200 04010000 	.LSFDE48:
 3542 0204 44       		.4byte	.LEFDE48-.LASFDE48
 3543              	.LASFDE48:
 3544 0205 0E       		.4byte	.Lframe0
 3545 0206 04       		.4byte	.LFB26
 3546 0207 44       		.4byte	.LFE26-.LFB26
 3547              		.byte	0x4
 3548 0208 0E       		.4byte	.LCFI40-.LFB26
 3549 0209 10       		.byte	0xe
 3550 020a 8E       		.uleb128 0x4
 3551 020b 01       		.byte	0x4
 3552              		.4byte	.LCFI41-.LCFI40
 3553              		.byte	0xe
 3554              		.uleb128 0x10
 3555 020c 14000000 		.byte	0x8e
 3556              		.uleb128 0x1
 3557 0210 00000000 		.align	2
 3558 0214 EC140000 	.LEFDE48:
 3559 0218 38010000 	.LSFDE50:
 3560 021c 44       		.4byte	.LEFDE50-.LASFDE50
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 104


 3561              	.LASFDE50:
 3562 021d 0E       		.4byte	.Lframe0
 3563 021e 04       		.4byte	.LFB27
 3564 021f 44       		.4byte	.LFE27-.LFB27
 3565              		.align	2
 3566 0220 0E       	.LEFDE50:
 3567 0221 14       	.LSFDE52:
 3568 0222 8E       		.4byte	.LEFDE52-.LASFDE52
 3569 0223 01       	.LASFDE52:
 3570              		.4byte	.Lframe0
 3571              		.4byte	.LFB28
 3572              		.4byte	.LFE28-.LFB28
 3573 0224 10000000 		.byte	0x4
 3574              		.4byte	.LCFI42-.LFB28
 3575 0228 00000000 		.byte	0xe
 3576 022c 24160000 		.uleb128 0x4
 3577 0230 38000000 		.byte	0x4
 3578 0234 44       		.4byte	.LCFI43-.LCFI42
 3579              		.byte	0xe
 3580 0235 0E       		.uleb128 0x8
 3581 0236 04       		.byte	0x8e
 3582 0237 00       		.uleb128 0x1
 3583              		.align	2
 3584              	.LEFDE52:
 3585 0238 14000000 	.LSFDE54:
 3586              		.4byte	.LEFDE54-.LASFDE54
 3587 023c 00000000 	.LASFDE54:
 3588 0240 5C160000 		.4byte	.Lframe0
 3589 0244 F4000000 		.4byte	.LFB29
 3590 0248 44       		.4byte	.LFE29-.LFB29
 3591              		.byte	0x4
 3592 0249 0E       		.4byte	.LCFI44-.LFB29
 3593 024a 04       		.byte	0xe
 3594 024b 44       		.uleb128 0x4
 3595              		.byte	0x4
 3596 024c 0E       		.4byte	.LCFI45-.LCFI44
 3597 024d 10       		.byte	0xe
 3598 024e 8E       		.uleb128 0x18
 3599 024f 01       		.byte	0x8e
 3600              		.uleb128 0x1
 3601              		.align	2
 3602              	.LEFDE54:
 3603 0250 0C000000 	.LSFDE56:
 3604              		.4byte	.LEFDE56-.LASFDE56
 3605 0254 00000000 	.LASFDE56:
 3606 0258 50170000 		.4byte	.Lframe0
 3607 025c 14000000 		.4byte	.LFB30
 3608              		.4byte	.LFE30-.LFB30
 3609              		.byte	0x4
 3610              		.4byte	.LCFI46-.LFB30
 3611 0260 14000000 		.byte	0xe
 3612              		.uleb128 0x4
 3613 0264 00000000 		.byte	0x4
 3614 0268 64170000 		.4byte	.LCFI47-.LCFI46
 3615 026c 2C000000 		.byte	0xe
 3616 0270 44       		.uleb128 0x8
 3617              		.byte	0x8e
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 105


 3618 0271 0E       		.uleb128 0x1
 3619 0272 04       		.align	2
 3620 0273 44       	.LEFDE56:
 3621              	.LSFDE58:
 3622 0274 0E       		.4byte	.LEFDE58-.LASFDE58
 3623 0275 08       	.LASFDE58:
 3624 0276 8E       		.4byte	.Lframe0
 3625 0277 01       		.4byte	.LFB31
 3626              		.4byte	.LFE31-.LFB31
 3627              		.byte	0x4
 3628              		.4byte	.LCFI48-.LFB31
 3629 0278 14000000 		.byte	0xe
 3630              		.uleb128 0x4
 3631 027c 00000000 		.byte	0x4
 3632 0280 90170000 		.4byte	.LCFI49-.LCFI48
 3633 0284 C8000000 		.byte	0xe
 3634 0288 44       		.uleb128 0x10
 3635              		.byte	0x8e
 3636 0289 0E       		.uleb128 0x1
 3637 028a 04       		.align	2
 3638 028b 44       	.LEFDE58:
 3639              	.LSFDE60:
 3640 028c 0E       		.4byte	.LEFDE60-.LASFDE60
 3641 028d 18       	.LASFDE60:
 3642 028e 8E       		.4byte	.Lframe0
 3643 028f 01       		.4byte	.LFB32
 3644              		.4byte	.LFE32-.LFB32
 3645              		.byte	0x4
 3646              		.4byte	.LCFI50-.LFB32
 3647 0290 14000000 		.byte	0xe
 3648              		.uleb128 0x4
 3649 0294 00000000 		.byte	0x4
 3650 0298 58180000 		.4byte	.LCFI51-.LCFI50
 3651 029c B8000000 		.byte	0xe
 3652 02a0 44       		.uleb128 0x10
 3653              		.byte	0x8e
 3654 02a1 0E       		.uleb128 0x1
 3655 02a2 04       		.align	2
 3656 02a3 44       	.LEFDE60:
 3657              	.LSFDE62:
 3658 02a4 0E       		.4byte	.LEFDE62-.LASFDE62
 3659 02a5 08       	.LASFDE62:
 3660 02a6 8E       		.4byte	.Lframe0
 3661 02a7 01       		.4byte	.LFB33
 3662              		.4byte	.LFE33-.LFB33
 3663              		.byte	0x4
 3664              		.4byte	.LCFI52-.LFB33
 3665 02a8 14000000 		.byte	0xe
 3666              		.uleb128 0x8
 3667 02ac 00000000 		.byte	0x4
 3668 02b0 10190000 		.4byte	.LCFI53-.LCFI52
 3669 02b4 DC000000 		.byte	0xe
 3670 02b8 44       		.uleb128 0x34
 3671              		.byte	0x8e
 3672 02b9 0E       		.uleb128 0x1
 3673 02ba 04       		.byte	0x84
 3674 02bb 44       		.uleb128 0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 106


 3675              		.align	2
 3676 02bc 0E       	.LEFDE62:
 3677 02bd 10       	.LSFDE64:
 3678 02be 8E       		.4byte	.LEFDE64-.LASFDE64
 3679 02bf 01       	.LASFDE64:
 3680              		.4byte	.Lframe0
 3681              		.4byte	.LFB34
 3682              		.4byte	.LFE34-.LFB34
 3683 02c0 14000000 		.byte	0x4
 3684              		.4byte	.LCFI54-.LFB34
 3685 02c4 00000000 		.byte	0xe
 3686 02c8 EC190000 		.uleb128 0x8
 3687 02cc A8000000 		.align	2
 3688 02d0 44       	.LEFDE64:
 3689              	.LSFDE66:
 3690 02d1 0E       		.4byte	.LEFDE66-.LASFDE66
 3691 02d2 04       	.LASFDE66:
 3692 02d3 44       		.4byte	.Lframe0
 3693              		.4byte	.LFB35
 3694 02d4 0E       		.4byte	.LFE35-.LFB35
 3695 02d5 10       		.byte	0x4
 3696 02d6 8E       		.4byte	.LCFI55-.LFB35
 3697 02d7 01       		.byte	0xe
 3698              		.uleb128 0x4
 3699              		.byte	0x4
 3700              		.4byte	.LCFI56-.LCFI55
 3701 02d8 18000000 		.byte	0xe
 3702              		.uleb128 0x8
 3703 02dc 00000000 		.byte	0x8e
 3704 02e0 941A0000 		.uleb128 0x1
 3705 02e4 54010000 		.align	2
 3706 02e8 44       	.LEFDE66:
 3707              	.LSFDE68:
 3708 02e9 0E       		.4byte	.LEFDE68-.LASFDE68
 3709 02ea 08       	.LASFDE68:
 3710 02eb 44       		.4byte	.Lframe0
 3711              		.4byte	.LFB36
 3712 02ec 0E       		.4byte	.LFE36-.LFB36
 3713 02ed 34       		.byte	0x4
 3714 02ee 8E       		.4byte	.LCFI57-.LFB36
 3715 02ef 01       		.byte	0xe
 3716 02f0 84       		.uleb128 0x4
 3717 02f1 02       		.align	2
 3718 02f2 0000     	.LEFDE68:
 3719              	.LSFDE70:
 3720              		.4byte	.LEFDE70-.LASFDE70
 3721 02f4 10000000 	.LASFDE70:
 3722              		.4byte	.Lframe0
 3723 02f8 00000000 		.4byte	.LFB37
 3724 02fc E81B0000 		.4byte	.LFE37-.LFB37
 3725 0300 68000000 		.byte	0x4
 3726 0304 44       		.4byte	.LCFI58-.LFB37
 3727              		.byte	0xe
 3728 0305 0E       		.uleb128 0x4
 3729 0306 08       		.byte	0x4
 3730 0307 00       		.4byte	.LCFI59-.LCFI58
 3731              		.byte	0xe
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 107


 3732              		.uleb128 0xc
 3733 0308 14000000 		.byte	0x8e
 3734              		.uleb128 0x1
 3735 030c 00000000 		.align	2
 3736 0310 501C0000 	.LEFDE70:
 3737 0314 30000000 	.LSFDE72:
 3738 0318 44       		.4byte	.LEFDE72-.LASFDE72
 3739              	.LASFDE72:
 3740 0319 0E       		.4byte	.Lframe0
 3741 031a 04       		.4byte	.LFB38
 3742 031b 44       		.4byte	.LFE38-.LFB38
 3743              		.byte	0x4
 3744 031c 0E       		.4byte	.LCFI60-.LFB38
 3745 031d 08       		.byte	0xe
 3746 031e 8E       		.uleb128 0x4
 3747 031f 01       		.byte	0x4
 3748              		.4byte	.LCFI61-.LCFI60
 3749              		.byte	0xe
 3750              		.uleb128 0xc
 3751 0320 10000000 		.byte	0x8e
 3752              		.uleb128 0x1
 3753 0324 00000000 		.align	2
 3754 0328 801C0000 	.LEFDE72:
 3755 032c 24000000 		.text
 3756 0330 44       	.Letext0:
 3757              		.section	.debug_loc,"",%progbits
 3758 0331 0E       	.Ldebug_loc0:
 3759 0332 04       	.LLST0:
 3760 0333 00       		.4byte	.LFB2-.Ltext0
 3761              		.4byte	.LCFI0-.Ltext0
 3762              		.2byte	0x1
 3763 0334 14000000 		.byte	0x5d
 3764              		.4byte	.LCFI0-.Ltext0
 3765 0338 00000000 		.4byte	.LCFI1-.Ltext0
 3766 033c A41C0000 		.2byte	0x2
 3767 0340 20010000 		.byte	0x7d
 3768 0344 44       		.sleb128 4
 3769              		.4byte	.LCFI1-.Ltext0
 3770 0345 0E       		.4byte	.LFE2-.Ltext0
 3771 0346 04       		.2byte	0x2
 3772 0347 44       		.byte	0x7d
 3773              		.sleb128 36
 3774 0348 0E       		.4byte	0x0
 3775 0349 0C       		.4byte	0x0
 3776 034a 8E       	.LLST1:
 3777 034b 01       		.4byte	.LFB3-.Ltext0
 3778              		.4byte	.LCFI2-.Ltext0
 3779              		.2byte	0x1
 3780              		.byte	0x5d
 3781 034c 14000000 		.4byte	.LCFI2-.Ltext0
 3782              		.4byte	.LCFI3-.Ltext0
 3783 0350 00000000 		.2byte	0x2
 3784 0354 C41D0000 		.byte	0x7d
 3785 0358 D8000000 		.sleb128 4
 3786 035c 44       		.4byte	.LCFI3-.Ltext0
 3787              		.4byte	.LFE3-.Ltext0
 3788 035d 0E       		.2byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 108


 3789 035e 04       		.byte	0x7d
 3790 035f 44       		.sleb128 16
 3791              		.4byte	0x0
 3792 0360 0E       		.4byte	0x0
 3793 0361 0C       	.LLST2:
 3794 0362 8E       		.4byte	.LFB4-.Ltext0
 3795 0363 01       		.4byte	.LCFI4-.Ltext0
 3796              		.2byte	0x1
 3797              		.byte	0x5d
 3798              		.4byte	.LCFI4-.Ltext0
 3799              		.4byte	.LCFI5-.Ltext0
 3800              		.2byte	0x2
 3801              		.byte	0x7d
 3802              		.sleb128 4
 3803 0000 00000000 		.4byte	.LCFI5-.Ltext0
 3804 0004 04000000 		.4byte	.LFE4-.Ltext0
 3805 0008 0100     		.2byte	0x2
 3806 000a 5D       		.byte	0x7d
 3807 000b 04000000 		.sleb128 24
 3808 000f 08000000 		.4byte	0x0
 3809 0013 0200     		.4byte	0x0
 3810 0015 7D       	.LLST3:
 3811 0016 04       		.4byte	.LFB5-.Ltext0
 3812 0017 08000000 		.4byte	.LCFI6-.Ltext0
 3813 001b 50020000 		.2byte	0x1
 3814 001f 0200     		.byte	0x5d
 3815 0021 7D       		.4byte	.LCFI6-.Ltext0
 3816 0022 24       		.4byte	.LCFI7-.Ltext0
 3817 0023 00000000 		.2byte	0x2
 3818 0027 00000000 		.byte	0x7d
 3819              		.sleb128 4
 3820 002b 50020000 		.4byte	.LCFI7-.Ltext0
 3821 002f 54020000 		.4byte	.LFE5-.Ltext0
 3822 0033 0100     		.2byte	0x2
 3823 0035 5D       		.byte	0x7d
 3824 0036 54020000 		.sleb128 16
 3825 003a 58020000 		.4byte	0x0
 3826 003e 0200     		.4byte	0x0
 3827 0040 7D       	.LLST4:
 3828 0041 04       		.4byte	.LFB6-.Ltext0
 3829 0042 58020000 		.4byte	.LCFI8-.Ltext0
 3830 0046 58030000 		.2byte	0x1
 3831 004a 0200     		.byte	0x5d
 3832 004c 7D       		.4byte	.LCFI8-.Ltext0
 3833 004d 10       		.4byte	.LCFI9-.Ltext0
 3834 004e 00000000 		.2byte	0x2
 3835 0052 00000000 		.byte	0x7d
 3836              		.sleb128 4
 3837 0056 58030000 		.4byte	.LCFI9-.Ltext0
 3838 005a 5C030000 		.4byte	.LFE6-.Ltext0
 3839 005e 0100     		.2byte	0x2
 3840 0060 5D       		.byte	0x7d
 3841 0061 5C030000 		.sleb128 20
 3842 0065 60030000 		.4byte	0x0
 3843 0069 0200     		.4byte	0x0
 3844 006b 7D       	.LLST5:
 3845 006c 04       		.4byte	.LFB7-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 109


 3846 006d 60030000 		.4byte	.LCFI10-.Ltext0
 3847 0071 D0040000 		.2byte	0x1
 3848 0075 0200     		.byte	0x5d
 3849 0077 7D       		.4byte	.LCFI10-.Ltext0
 3850 0078 18       		.4byte	.LCFI11-.Ltext0
 3851 0079 00000000 		.2byte	0x2
 3852 007d 00000000 		.byte	0x7d
 3853              		.sleb128 4
 3854 0081 D0040000 		.4byte	.LCFI11-.Ltext0
 3855 0085 D4040000 		.4byte	.LFE7-.Ltext0
 3856 0089 0100     		.2byte	0x2
 3857 008b 5D       		.byte	0x7d
 3858 008c D4040000 		.sleb128 28
 3859 0090 D8040000 		.4byte	0x0
 3860 0094 0200     		.4byte	0x0
 3861 0096 7D       	.LLST6:
 3862 0097 04       		.4byte	.LFB8-.Ltext0
 3863 0098 D8040000 		.4byte	.LCFI12-.Ltext0
 3864 009c BC050000 		.2byte	0x1
 3865 00a0 0200     		.byte	0x5d
 3866 00a2 7D       		.4byte	.LCFI12-.Ltext0
 3867 00a3 10       		.4byte	.LCFI13-.Ltext0
 3868 00a4 00000000 		.2byte	0x2
 3869 00a8 00000000 		.byte	0x7d
 3870              		.sleb128 4
 3871 00ac BC050000 		.4byte	.LCFI13-.Ltext0
 3872 00b0 C0050000 		.4byte	.LFE8-.Ltext0
 3873 00b4 0100     		.2byte	0x2
 3874 00b6 5D       		.byte	0x7d
 3875 00b7 C0050000 		.sleb128 16
 3876 00bb C4050000 		.4byte	0x0
 3877 00bf 0200     		.4byte	0x0
 3878 00c1 7D       	.LLST7:
 3879 00c2 04       		.4byte	.LFB9-.Ltext0
 3880 00c3 C4050000 		.4byte	.LCFI14-.Ltext0
 3881 00c7 20060000 		.2byte	0x1
 3882 00cb 0200     		.byte	0x5d
 3883 00cd 7D       		.4byte	.LCFI14-.Ltext0
 3884 00ce 14       		.4byte	.LFE9-.Ltext0
 3885 00cf 00000000 		.2byte	0x2
 3886 00d3 00000000 		.byte	0x7d
 3887              		.sleb128 12
 3888 00d7 20060000 		.4byte	0x0
 3889 00db 24060000 		.4byte	0x0
 3890 00df 0100     	.LLST8:
 3891 00e1 5D       		.4byte	.LFB10-.Ltext0
 3892 00e2 24060000 		.4byte	.LCFI15-.Ltext0
 3893 00e6 28060000 		.2byte	0x1
 3894 00ea 0200     		.byte	0x5d
 3895 00ec 7D       		.4byte	.LCFI15-.Ltext0
 3896 00ed 04       		.4byte	.LCFI16-.Ltext0
 3897 00ee 28060000 		.2byte	0x2
 3898 00f2 EC070000 		.byte	0x7d
 3899 00f6 0200     		.sleb128 4
 3900 00f8 7D       		.4byte	.LCFI16-.Ltext0
 3901 00f9 1C       		.4byte	.LFE10-.Ltext0
 3902 00fa 00000000 		.2byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 110


 3903 00fe 00000000 		.byte	0x7d
 3904              		.sleb128 12
 3905 0102 EC070000 		.4byte	0x0
 3906 0106 F0070000 		.4byte	0x0
 3907 010a 0100     	.LLST9:
 3908 010c 5D       		.4byte	.LFB11-.Ltext0
 3909 010d F0070000 		.4byte	.LCFI17-.Ltext0
 3910 0111 F4070000 		.2byte	0x1
 3911 0115 0200     		.byte	0x5d
 3912 0117 7D       		.4byte	.LCFI17-.Ltext0
 3913 0118 04       		.4byte	.LCFI18-.Ltext0
 3914 0119 F4070000 		.2byte	0x2
 3915 011d B0080000 		.byte	0x7d
 3916 0121 0200     		.sleb128 4
 3917 0123 7D       		.4byte	.LCFI18-.Ltext0
 3918 0124 10       		.4byte	.LFE11-.Ltext0
 3919 0125 00000000 		.2byte	0x2
 3920 0129 00000000 		.byte	0x7d
 3921              		.sleb128 16
 3922 012d B0080000 		.4byte	0x0
 3923 0131 B4080000 		.4byte	0x0
 3924 0135 0100     	.LLST10:
 3925 0137 5D       		.4byte	.LFB12-.Ltext0
 3926 0138 B4080000 		.4byte	.LCFI19-.Ltext0
 3927 013c 20090000 		.2byte	0x1
 3928 0140 0200     		.byte	0x5d
 3929 0142 7D       		.4byte	.LCFI19-.Ltext0
 3930 0143 0C       		.4byte	.LCFI20-.Ltext0
 3931 0144 00000000 		.2byte	0x2
 3932 0148 00000000 		.byte	0x7d
 3933              		.sleb128 4
 3934 014c 20090000 		.4byte	.LCFI20-.Ltext0
 3935 0150 24090000 		.4byte	.LFE12-.Ltext0
 3936 0154 0100     		.2byte	0x2
 3937 0156 5D       		.byte	0x7d
 3938 0157 24090000 		.sleb128 24
 3939 015b 28090000 		.4byte	0x0
 3940 015f 0200     		.4byte	0x0
 3941 0161 7D       	.LLST11:
 3942 0162 04       		.4byte	.LFB13-.Ltext0
 3943 0163 28090000 		.4byte	.LCFI21-.Ltext0
 3944 0167 100A0000 		.2byte	0x1
 3945 016b 0200     		.byte	0x5d
 3946 016d 7D       		.4byte	.LCFI21-.Ltext0
 3947 016e 0C       		.4byte	.LFE13-.Ltext0
 3948 016f 00000000 		.2byte	0x2
 3949 0173 00000000 		.byte	0x7d
 3950              		.sleb128 4
 3951 0177 100A0000 		.4byte	0x0
 3952 017b 140A0000 		.4byte	0x0
 3953 017f 0100     	.LLST13:
 3954 0181 5D       		.4byte	.LFB15-.Ltext0
 3955 0182 140A0000 		.4byte	.LCFI22-.Ltext0
 3956 0186 180A0000 		.2byte	0x1
 3957 018a 0200     		.byte	0x5d
 3958 018c 7D       		.4byte	.LCFI22-.Ltext0
 3959 018d 04       		.4byte	.LCFI23-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 111


 3960 018e 180A0000 		.2byte	0x2
 3961 0192 1C0B0000 		.byte	0x7d
 3962 0196 0200     		.sleb128 4
 3963 0198 7D       		.4byte	.LCFI23-.Ltext0
 3964 0199 10       		.4byte	.LFE15-.Ltext0
 3965 019a 00000000 		.2byte	0x2
 3966 019e 00000000 		.byte	0x7d
 3967              		.sleb128 20
 3968 01a2 1C0B0000 		.4byte	0x0
 3969 01a6 200B0000 		.4byte	0x0
 3970 01aa 0100     	.LLST14:
 3971 01ac 5D       		.4byte	.LFB16-.Ltext0
 3972 01ad 200B0000 		.4byte	.LCFI24-.Ltext0
 3973 01b1 240B0000 		.2byte	0x1
 3974 01b5 0200     		.byte	0x5d
 3975 01b7 7D       		.4byte	.LCFI24-.Ltext0
 3976 01b8 04       		.4byte	.LCFI25-.Ltext0
 3977 01b9 240B0000 		.2byte	0x2
 3978 01bd BC0B0000 		.byte	0x7d
 3979 01c1 0200     		.sleb128 4
 3980 01c3 7D       		.4byte	.LCFI25-.Ltext0
 3981 01c4 18       		.4byte	.LFE16-.Ltext0
 3982 01c5 00000000 		.2byte	0x2
 3983 01c9 00000000 		.byte	0x7d
 3984              		.sleb128 8
 3985 01cd BC0B0000 		.4byte	0x0
 3986 01d1 C00B0000 		.4byte	0x0
 3987 01d5 0100     	.LLST16:
 3988 01d7 5D       		.4byte	.LFB18-.Ltext0
 3989 01d8 C00B0000 		.4byte	.LCFI26-.Ltext0
 3990 01dc F00B0000 		.2byte	0x1
 3991 01e0 0200     		.byte	0x5d
 3992 01e2 7D       		.4byte	.LCFI26-.Ltext0
 3993 01e3 04       		.4byte	.LCFI27-.Ltext0
 3994 01e4 00000000 		.2byte	0x2
 3995 01e8 00000000 		.byte	0x7d
 3996              		.sleb128 8
 3997 01ec 0C0C0000 		.4byte	.LCFI27-.Ltext0
 3998 01f0 100C0000 		.4byte	.LFE18-.Ltext0
 3999 01f4 0100     		.2byte	0x2
 4000 01f6 5D       		.byte	0x7d
 4001 01f7 100C0000 		.sleb128 16
 4002 01fb 140C0000 		.4byte	0x0
 4003 01ff 0200     		.4byte	0x0
 4004 0201 7D       	.LLST17:
 4005 0202 04       		.4byte	.LFB19-.Ltext0
 4006 0203 140C0000 		.4byte	.LCFI28-.Ltext0
 4007 0207 EC0D0000 		.2byte	0x1
 4008 020b 0200     		.byte	0x5d
 4009 020d 7D       		.4byte	.LCFI28-.Ltext0
 4010 020e 14       		.4byte	.LCFI29-.Ltext0
 4011 020f 00000000 		.2byte	0x2
 4012 0213 00000000 		.byte	0x7d
 4013              		.sleb128 4
 4014 0217 EC0D0000 		.4byte	.LCFI29-.Ltext0
 4015 021b F00D0000 		.4byte	.LFE19-.Ltext0
 4016 021f 0100     		.2byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 112


 4017 0221 5D       		.byte	0x7d
 4018 0222 F00D0000 		.sleb128 12
 4019 0226 F40D0000 		.4byte	0x0
 4020 022a 0200     		.4byte	0x0
 4021 022c 7D       	.LLST18:
 4022 022d 04       		.4byte	.LFB20-.Ltext0
 4023 022e F40D0000 		.4byte	.LCFI30-.Ltext0
 4024 0232 200E0000 		.2byte	0x1
 4025 0236 0200     		.byte	0x5d
 4026 0238 7D       		.4byte	.LCFI30-.Ltext0
 4027 0239 08       		.4byte	.LCFI31-.Ltext0
 4028 023a 00000000 		.2byte	0x2
 4029 023e 00000000 		.byte	0x7d
 4030              		.sleb128 4
 4031 0242 340E0000 		.4byte	.LCFI31-.Ltext0
 4032 0246 380E0000 		.4byte	.LFE20-.Ltext0
 4033 024a 0100     		.2byte	0x2
 4034 024c 5D       		.byte	0x7d
 4035 024d 380E0000 		.sleb128 8
 4036 0251 3C0E0000 		.4byte	0x0
 4037 0255 0200     		.4byte	0x0
 4038 0257 7D       	.LLST19:
 4039 0258 08       		.4byte	.LFB21-.Ltext0
 4040 0259 3C0E0000 		.4byte	.LCFI32-.Ltext0
 4041 025d AC0F0000 		.2byte	0x1
 4042 0261 0200     		.byte	0x5d
 4043 0263 7D       		.4byte	.LCFI32-.Ltext0
 4044 0264 10       		.4byte	.LCFI33-.Ltext0
 4045 0265 00000000 		.2byte	0x2
 4046 0269 00000000 		.byte	0x7d
 4047              		.sleb128 4
 4048 026d AC0F0000 		.4byte	.LCFI33-.Ltext0
 4049 0271 B00F0000 		.4byte	.LFE21-.Ltext0
 4050 0275 0100     		.2byte	0x2
 4051 0277 5D       		.byte	0x7d
 4052 0278 B00F0000 		.sleb128 16
 4053 027c B40F0000 		.4byte	0x0
 4054 0280 0200     		.4byte	0x0
 4055 0282 7D       	.LLST20:
 4056 0283 04       		.4byte	.LFB22-.Ltext0
 4057 0284 B40F0000 		.4byte	.LCFI34-.Ltext0
 4058 0288 1C100000 		.2byte	0x1
 4059 028c 0200     		.byte	0x5d
 4060 028e 7D       		.4byte	.LCFI34-.Ltext0
 4061 028f 0C       		.4byte	.LFE22-.Ltext0
 4062 0290 00000000 		.2byte	0x2
 4063 0294 00000000 		.byte	0x7d
 4064              		.sleb128 4
 4065 0298 1C100000 		.4byte	0x0
 4066 029c 20100000 		.4byte	0x0
 4067 02a0 0100     	.LLST21:
 4068 02a2 5D       		.4byte	.LFB23-.Ltext0
 4069 02a3 20100000 		.4byte	.LCFI35-.Ltext0
 4070 02a7 24100000 		.2byte	0x1
 4071 02ab 0200     		.byte	0x5d
 4072 02ad 7D       		.4byte	.LCFI35-.Ltext0
 4073 02ae 04       		.4byte	.LCFI36-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 113


 4074 02af 24100000 		.2byte	0x2
 4075 02b3 74100000 		.byte	0x7d
 4076 02b7 0200     		.sleb128 4
 4077 02b9 7D       		.4byte	.LCFI36-.Ltext0
 4078 02ba 08       		.4byte	.LFE23-.Ltext0
 4079 02bb 00000000 		.2byte	0x2
 4080 02bf 00000000 		.byte	0x7d
 4081              		.sleb128 16
 4082 02c3 74100000 		.4byte	0x0
 4083 02c7 78100000 		.4byte	0x0
 4084 02cb 0100     	.LLST22:
 4085 02cd 5D       		.4byte	.LFB24-.Ltext0
 4086 02ce 78100000 		.4byte	.LCFI37-.Ltext0
 4087 02d2 7C100000 		.2byte	0x1
 4088 02d6 0200     		.byte	0x5d
 4089 02d8 7D       		.4byte	.LCFI37-.Ltext0
 4090 02d9 04       		.4byte	.LCFI38-.Ltext0
 4091 02da 7C100000 		.2byte	0x2
 4092 02de 1C120000 		.byte	0x7d
 4093 02e2 0200     		.sleb128 4
 4094 02e4 7D       		.4byte	.LCFI38-.Ltext0
 4095 02e5 10       		.4byte	.LFE24-.Ltext0
 4096 02e6 00000000 		.2byte	0x2
 4097 02ea 00000000 		.byte	0x7d
 4098              		.sleb128 20
 4099 02ee 1C120000 		.4byte	0x0
 4100 02f2 20120000 		.4byte	0x0
 4101 02f6 0100     	.LLST23:
 4102 02f8 5D       		.4byte	.LFB25-.Ltext0
 4103 02f9 20120000 		.4byte	.LCFI39-.Ltext0
 4104 02fd E8130000 		.2byte	0x1
 4105 0301 0200     		.byte	0x5d
 4106 0303 7D       		.4byte	.LCFI39-.Ltext0
 4107 0304 04       		.4byte	.LFE25-.Ltext0
 4108 0305 00000000 		.2byte	0x2
 4109 0309 00000000 		.byte	0x7d
 4110              		.sleb128 4
 4111 030d E8130000 		.4byte	0x0
 4112 0311 EC130000 		.4byte	0x0
 4113 0315 0100     	.LLST24:
 4114 0317 5D       		.4byte	.LFB26-.Ltext0
 4115 0318 EC130000 		.4byte	.LCFI40-.Ltext0
 4116 031c F0130000 		.2byte	0x1
 4117 0320 0200     		.byte	0x5d
 4118 0322 7D       		.4byte	.LCFI40-.Ltext0
 4119 0323 04       		.4byte	.LCFI41-.Ltext0
 4120 0324 F0130000 		.2byte	0x2
 4121 0328 EC140000 		.byte	0x7d
 4122 032c 0200     		.sleb128 4
 4123 032e 7D       		.4byte	.LCFI41-.Ltext0
 4124 032f 10       		.4byte	.LFE26-.Ltext0
 4125 0330 00000000 		.2byte	0x2
 4126 0334 00000000 		.byte	0x7d
 4127              		.sleb128 16
 4128 0338 EC140000 		.4byte	0x0
 4129 033c F0140000 		.4byte	0x0
 4130 0340 0100     	.LLST26:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 114


 4131 0342 5D       		.4byte	.LFB28-.Ltext0
 4132 0343 F0140000 		.4byte	.LCFI42-.Ltext0
 4133 0347 F4140000 		.2byte	0x1
 4134 034b 0200     		.byte	0x5d
 4135 034d 7D       		.4byte	.LCFI42-.Ltext0
 4136 034e 04       		.4byte	.LCFI43-.Ltext0
 4137 034f F4140000 		.2byte	0x2
 4138 0353 24160000 		.byte	0x7d
 4139 0357 0200     		.sleb128 4
 4140 0359 7D       		.4byte	.LCFI43-.Ltext0
 4141 035a 14       		.4byte	.LFE28-.Ltext0
 4142 035b 00000000 		.2byte	0x2
 4143 035f 00000000 		.byte	0x7d
 4144              		.sleb128 8
 4145 0363 24160000 		.4byte	0x0
 4146 0367 28160000 		.4byte	0x0
 4147 036b 0100     	.LLST27:
 4148 036d 5D       		.4byte	.LFB29-.Ltext0
 4149 036e 28160000 		.4byte	.LCFI44-.Ltext0
 4150 0372 5C160000 		.2byte	0x1
 4151 0376 0200     		.byte	0x5d
 4152 0378 7D       		.4byte	.LCFI44-.Ltext0
 4153 0379 04       		.4byte	.LCFI45-.Ltext0
 4154 037a 00000000 		.2byte	0x2
 4155 037e 00000000 		.byte	0x7d
 4156              		.sleb128 4
 4157 0382 5C160000 		.4byte	.LCFI45-.Ltext0
 4158 0386 60160000 		.4byte	.LFE29-.Ltext0
 4159 038a 0100     		.2byte	0x2
 4160 038c 5D       		.byte	0x7d
 4161 038d 60160000 		.sleb128 24
 4162 0391 64160000 		.4byte	0x0
 4163 0395 0200     		.4byte	0x0
 4164 0397 7D       	.LLST28:
 4165 0398 04       		.4byte	.LFB30-.Ltext0
 4166 0399 64160000 		.4byte	.LCFI46-.Ltext0
 4167 039d 50170000 		.2byte	0x1
 4168 03a1 0200     		.byte	0x5d
 4169 03a3 7D       		.4byte	.LCFI46-.Ltext0
 4170 03a4 10       		.4byte	.LCFI47-.Ltext0
 4171 03a5 00000000 		.2byte	0x2
 4172 03a9 00000000 		.byte	0x7d
 4173              		.sleb128 4
 4174 03ad 64170000 		.4byte	.LCFI47-.Ltext0
 4175 03b1 68170000 		.4byte	.LFE30-.Ltext0
 4176 03b5 0100     		.2byte	0x2
 4177 03b7 5D       		.byte	0x7d
 4178 03b8 68170000 		.sleb128 8
 4179 03bc 6C170000 		.4byte	0x0
 4180 03c0 0200     		.4byte	0x0
 4181 03c2 7D       	.LLST29:
 4182 03c3 04       		.4byte	.LFB31-.Ltext0
 4183 03c4 6C170000 		.4byte	.LCFI48-.Ltext0
 4184 03c8 90170000 		.2byte	0x1
 4185 03cc 0200     		.byte	0x5d
 4186 03ce 7D       		.4byte	.LCFI48-.Ltext0
 4187 03cf 08       		.4byte	.LCFI49-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 115


 4188 03d0 00000000 		.2byte	0x2
 4189 03d4 00000000 		.byte	0x7d
 4190              		.sleb128 4
 4191 03d8 90170000 		.4byte	.LCFI49-.Ltext0
 4192 03dc 94170000 		.4byte	.LFE31-.Ltext0
 4193 03e0 0100     		.2byte	0x2
 4194 03e2 5D       		.byte	0x7d
 4195 03e3 94170000 		.sleb128 16
 4196 03e7 98170000 		.4byte	0x0
 4197 03eb 0200     		.4byte	0x0
 4198 03ed 7D       	.LLST30:
 4199 03ee 04       		.4byte	.LFB32-.Ltext0
 4200 03ef 98170000 		.4byte	.LCFI50-.Ltext0
 4201 03f3 58180000 		.2byte	0x1
 4202 03f7 0200     		.byte	0x5d
 4203 03f9 7D       		.4byte	.LCFI50-.Ltext0
 4204 03fa 18       		.4byte	.LCFI51-.Ltext0
 4205 03fb 00000000 		.2byte	0x2
 4206 03ff 00000000 		.byte	0x7d
 4207              		.sleb128 4
 4208 0403 58180000 		.4byte	.LCFI51-.Ltext0
 4209 0407 5C180000 		.4byte	.LFE32-.Ltext0
 4210 040b 0100     		.2byte	0x2
 4211 040d 5D       		.byte	0x7d
 4212 040e 5C180000 		.sleb128 16
 4213 0412 60180000 		.4byte	0x0
 4214 0416 0200     		.4byte	0x0
 4215 0418 7D       	.LLST31:
 4216 0419 04       		.4byte	.LFB33-.Ltext0
 4217 041a 60180000 		.4byte	.LCFI52-.Ltext0
 4218 041e 10190000 		.2byte	0x1
 4219 0422 0200     		.byte	0x5d
 4220 0424 7D       		.4byte	.LCFI52-.Ltext0
 4221 0425 08       		.4byte	.LCFI53-.Ltext0
 4222 0426 00000000 		.2byte	0x2
 4223 042a 00000000 		.byte	0x7d
 4224              		.sleb128 8
 4225 042e 10190000 		.4byte	.LCFI53-.Ltext0
 4226 0432 14190000 		.4byte	.LFE33-.Ltext0
 4227 0436 0100     		.2byte	0x2
 4228 0438 5D       		.byte	0x7d
 4229 0439 14190000 		.sleb128 52
 4230 043d 18190000 		.4byte	0x0
 4231 0441 0200     		.4byte	0x0
 4232 0443 7D       	.LLST32:
 4233 0444 04       		.4byte	.LFB34-.Ltext0
 4234 0445 18190000 		.4byte	.LCFI54-.Ltext0
 4235 0449 EC190000 		.2byte	0x1
 4236 044d 0200     		.byte	0x5d
 4237 044f 7D       		.4byte	.LCFI54-.Ltext0
 4238 0450 10       		.4byte	.LFE34-.Ltext0
 4239 0451 00000000 		.2byte	0x2
 4240 0455 00000000 		.byte	0x7d
 4241              		.sleb128 8
 4242 0459 EC190000 		.4byte	0x0
 4243 045d F0190000 		.4byte	0x0
 4244 0461 0100     	.LLST33:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 116


 4245 0463 5D       		.4byte	.LFB35-.Ltext0
 4246 0464 F0190000 		.4byte	.LCFI55-.Ltext0
 4247 0468 F4190000 		.2byte	0x1
 4248 046c 0200     		.byte	0x5d
 4249 046e 7D       		.4byte	.LCFI55-.Ltext0
 4250 046f 04       		.4byte	.LCFI56-.Ltext0
 4251 0470 F4190000 		.2byte	0x2
 4252 0474 941A0000 		.byte	0x7d
 4253 0478 0200     		.sleb128 4
 4254 047a 7D       		.4byte	.LCFI56-.Ltext0
 4255 047b 10       		.4byte	.LFE35-.Ltext0
 4256 047c 00000000 		.2byte	0x2
 4257 0480 00000000 		.byte	0x7d
 4258              		.sleb128 8
 4259 0484 941A0000 		.4byte	0x0
 4260 0488 981A0000 		.4byte	0x0
 4261 048c 0100     	.LLST34:
 4262 048e 5D       		.4byte	.LFB36-.Ltext0
 4263 048f 981A0000 		.4byte	.LCFI57-.Ltext0
 4264 0493 9C1A0000 		.2byte	0x1
 4265 0497 0200     		.byte	0x5d
 4266 0499 7D       		.4byte	.LCFI57-.Ltext0
 4267 049a 08       		.4byte	.LFE36-.Ltext0
 4268 049b 9C1A0000 		.2byte	0x2
 4269 049f E81B0000 		.byte	0x7d
 4270 04a3 0200     		.sleb128 4
 4271 04a5 7D       		.4byte	0x0
 4272 04a6 34       		.4byte	0x0
 4273 04a7 00000000 	.LLST35:
 4274 04ab 00000000 		.4byte	.LFB37-.Ltext0
 4275              		.4byte	.LCFI58-.Ltext0
 4276 04af E81B0000 		.2byte	0x1
 4277 04b3 EC1B0000 		.byte	0x5d
 4278 04b7 0100     		.4byte	.LCFI58-.Ltext0
 4279 04b9 5D       		.4byte	.LCFI59-.Ltext0
 4280 04ba EC1B0000 		.2byte	0x2
 4281 04be 501C0000 		.byte	0x7d
 4282 04c2 0200     		.sleb128 4
 4283 04c4 7D       		.4byte	.LCFI59-.Ltext0
 4284 04c5 08       		.4byte	.LFE37-.Ltext0
 4285 04c6 00000000 		.2byte	0x2
 4286 04ca 00000000 		.byte	0x7d
 4287              		.sleb128 12
 4288 04ce 501C0000 		.4byte	0x0
 4289 04d2 541C0000 		.4byte	0x0
 4290 04d6 0100     	.LLST36:
 4291 04d8 5D       		.4byte	.LFB38-.Ltext0
 4292 04d9 541C0000 		.4byte	.LCFI60-.Ltext0
 4293 04dd 581C0000 		.2byte	0x1
 4294 04e1 0200     		.byte	0x5d
 4295 04e3 7D       		.4byte	.LCFI60-.Ltext0
 4296 04e4 04       		.4byte	.LCFI61-.Ltext0
 4297 04e5 581C0000 		.2byte	0x2
 4298 04e9 801C0000 		.byte	0x7d
 4299 04ed 0200     		.sleb128 4
 4300 04ef 7D       		.4byte	.LCFI61-.Ltext0
 4301 04f0 08       		.4byte	.LFE38-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 117


 4302 04f1 00000000 		.2byte	0x2
 4303 04f5 00000000 		.byte	0x7d
 4304              		.sleb128 12
 4305 04f9 801C0000 		.4byte	0x0
 4306 04fd 841C0000 		.4byte	0x0
 4307 0501 0100     		.file 2 "INC/RTOS/projdefs.h"
 4308 0503 5D       		.file 3 "INC/RTOS/portmacro.h"
 4309 0504 841C0000 		.file 4 "INC/RTOS/list.h"
 4310 0508 A41C0000 		.file 5 "INC/RTOS/task.h"
 4311 050c 0200     		.section	.debug_info
 4312 050e 7D       		.4byte	0xeff
 4313 050f 04       		.2byte	0x2
 4314 0510 00000000 		.4byte	.Ldebug_abbrev0
 4315 0514 00000000 		.byte	0x4
 4316              		.uleb128 0x1
 4317 0518 A41C0000 		.4byte	.LASF154
 4318 051c A81C0000 		.byte	0x1
 4319 0520 0100     		.4byte	.LASF155
 4320 0522 5D       		.4byte	.LASF156
 4321 0523 A81C0000 		.4byte	.Ltext0
 4322 0527 AC1C0000 		.4byte	.Letext0
 4323 052b 0200     		.4byte	.Ldebug_line0
 4324 052d 7D       		.uleb128 0x2
 4325 052e 04       		.byte	0x4
 4326 052f AC1C0000 		.byte	0x7
 4327 0533 C41D0000 		.4byte	.LASF0
 4328 0537 0200     		.uleb128 0x2
 4329 0539 7D       		.byte	0x1
 4330 053a 0C       		.byte	0x6
 4331 053b 00000000 		.4byte	.LASF1
 4332 053f 00000000 		.uleb128 0x2
 4333              		.byte	0x1
 4334 0543 C41D0000 		.byte	0x8
 4335 0547 C81D0000 		.4byte	.LASF2
 4336 054b 0100     		.uleb128 0x2
 4337 054d 5D       		.byte	0x2
 4338 054e C81D0000 		.byte	0x5
 4339 0552 CC1D0000 		.4byte	.LASF3
 4340 0556 0200     		.uleb128 0x2
 4341 0558 7D       		.byte	0x2
 4342 0559 04       		.byte	0x7
 4343 055a CC1D0000 		.4byte	.LASF4
 4344 055e 9C1E0000 		.uleb128 0x3
 4345 0562 0200     		.byte	0x4
 4346 0564 7D       		.byte	0x5
 4347 0565 0C       		.ascii	"int\000"
 4348 0566 00000000 		.uleb128 0x2
 4349 056a 00000000 		.byte	0x4
 4350              		.byte	0x7
 4351              		.4byte	.LASF5
 4352              		.uleb128 0x2
 4353              		.byte	0x8
 4354              		.byte	0x5
 4355 0000 FF0E0000 		.4byte	.LASF6
 4356 0004 0200     		.uleb128 0x2
 4357 0006 00000000 		.byte	0x8
 4358 000a 04       		.byte	0x7
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 118


 4359 000b 01       		.4byte	.LASF7
 4360 000c 77020000 		.uleb128 0x2
 4361 0010 01       		.byte	0x4
 4362 0011 7A010000 		.byte	0x5
 4363 0015 60070000 		.4byte	.LASF8
 4364 0019 00000000 		.uleb128 0x4
 4365 001d 9C1E0000 		.byte	0x4
 4366 0021 00000000 		.byte	0x7
 4367 0025 02       		.uleb128 0x5
 4368 0026 04       		.byte	0x4
 4369 0027 07       		.uleb128 0x2
 4370 0028 12030000 		.byte	0x1
 4371 002c 02       		.byte	0x8
 4372 002d 01       		.4byte	.LASF9
 4373 002e 06       		.uleb128 0x6
 4374 002f 3C010000 		.4byte	.LASF10
 4375 0033 02       		.byte	0x2
 4376 0034 01       		.byte	0x3a
 4377 0035 08       		.4byte	0x82
 4378 0036 FC050000 		.uleb128 0x7
 4379 003a 02       		.byte	0x4
 4380 003b 02       		.4byte	0x88
 4381 003c 05       		.uleb128 0x8
 4382 003d F0010000 		.byte	0x1
 4383 0041 02       		.4byte	0x94
 4384 0042 02       		.uleb128 0x9
 4385 0043 07       		.4byte	0x6e
 4386 0044 51030000 		.byte	0x0
 4387 0048 03       		.uleb128 0x6
 4388 0049 04       		.4byte	.LASF11
 4389 004a 05       		.byte	0x3
 4390 004b 696E7400 		.byte	0x6b
 4391 004f 02       		.4byte	0x25
 4392 0050 04       		.uleb128 0xa
 4393 0051 07       		.4byte	.LASF18
 4394 0052 B0020000 		.byte	0x14
 4395 0056 02       		.byte	0x4
 4396 0057 08       		.byte	0x63
 4397 0058 05       		.4byte	0xf2
 4398 0059 2E010000 		.uleb128 0xb
 4399 005d 02       		.4byte	.LASF12
 4400 005e 08       		.byte	0x4
 4401 005f 07       		.byte	0x64
 4402 0060 A9000000 		.4byte	0x94
 4403 0064 02       		.byte	0x2
 4404 0065 04       		.byte	0x23
 4405 0066 05       		.uleb128 0x0
 4406 0067 8D000000 		.uleb128 0xb
 4407 006b 04       		.4byte	.LASF13
 4408 006c 04       		.byte	0x4
 4409 006d 07       		.byte	0x65
 4410 006e 05       		.4byte	0xf2
 4411 006f 04       		.byte	0x2
 4412 0070 02       		.byte	0x23
 4413 0071 01       		.uleb128 0x4
 4414 0072 08       		.uleb128 0xb
 4415 0073 22070000 		.4byte	.LASF14
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 119


 4416 0077 06       		.byte	0x4
 4417 0078 16070000 		.byte	0x66
 4418 007c 02       		.4byte	0xf2
 4419 007d 3A       		.byte	0x2
 4420 007e 82000000 		.byte	0x23
 4421 0082 07       		.uleb128 0x8
 4422 0083 04       		.uleb128 0xb
 4423 0084 88000000 		.4byte	.LASF15
 4424 0088 08       		.byte	0x4
 4425 0089 01       		.byte	0x67
 4426 008a 94000000 		.4byte	0x6e
 4427 008e 09       		.byte	0x2
 4428 008f 6E000000 		.byte	0x23
 4429 0093 00       		.uleb128 0xc
 4430 0094 06       		.uleb128 0xb
 4431 0095 FA010000 		.4byte	.LASF16
 4432 0099 03       		.byte	0x4
 4433 009a 6B       		.byte	0x68
 4434 009b 25000000 		.4byte	0x6e
 4435 009f 0A       		.byte	0x2
 4436 00a0 A7080000 		.byte	0x23
 4437 00a4 14       		.uleb128 0x10
 4438 00a5 04       		.byte	0x0
 4439 00a6 63       		.uleb128 0x7
 4440 00a7 F2000000 		.byte	0x4
 4441 00ab 0B       		.4byte	0xf8
 4442 00ac 47070000 		.uleb128 0xc
 4443 00b0 04       		.4byte	.LASF18
 4444 00b1 64       		.4byte	0x9f
 4445 00b2 94000000 		.uleb128 0x6
 4446 00b6 02       		.4byte	.LASF17
 4447 00b7 23       		.byte	0x4
 4448 00b8 00       		.byte	0x6a
 4449 00b9 0B       		.4byte	0x9f
 4450 00ba A0080000 		.uleb128 0xa
 4451 00be 04       		.4byte	.LASF19
 4452 00bf 65       		.byte	0xc
 4453 00c0 F2000000 		.byte	0x4
 4454 00c4 02       		.byte	0x6d
 4455 00c5 23       		.4byte	0x143
 4456 00c6 04       		.uleb128 0xb
 4457 00c7 0B       		.4byte	.LASF12
 4458 00c8 7D050000 		.byte	0x4
 4459 00cc 04       		.byte	0x6e
 4460 00cd 66       		.4byte	0x94
 4461 00ce F2000000 		.byte	0x2
 4462 00d2 02       		.byte	0x23
 4463 00d3 23       		.uleb128 0x0
 4464 00d4 08       		.uleb128 0xb
 4465 00d5 0B       		.4byte	.LASF13
 4466 00d6 96050000 		.byte	0x4
 4467 00da 04       		.byte	0x6f
 4468 00db 67       		.4byte	0xf2
 4469 00dc 6E000000 		.byte	0x2
 4470 00e0 02       		.byte	0x23
 4471 00e1 23       		.uleb128 0x4
 4472 00e2 0C       		.uleb128 0xb
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 120


 4473 00e3 0B       		.4byte	.LASF14
 4474 00e4 C9050000 		.byte	0x4
 4475 00e8 04       		.byte	0x70
 4476 00e9 68       		.4byte	0xf2
 4477 00ea 6E000000 		.byte	0x2
 4478 00ee 02       		.byte	0x23
 4479 00ef 23       		.uleb128 0x8
 4480 00f0 10       		.byte	0x0
 4481 00f1 00       		.uleb128 0x6
 4482 00f2 07       		.4byte	.LASF20
 4483 00f3 04       		.byte	0x4
 4484 00f4 F8000000 		.byte	0x72
 4485 00f8 0C       		.4byte	0x10c
 4486 00f9 A7080000 		.uleb128 0xa
 4487 00fd 9F000000 		.4byte	.LASF21
 4488 0101 06       		.byte	0x14
 4489 0102 B0050000 		.byte	0x4
 4490 0106 04       		.byte	0x78
 4491 0107 6A       		.4byte	0x185
 4492 0108 9F000000 		.uleb128 0xb
 4493 010c 0A       		.4byte	.LASF22
 4494 010d ED000000 		.byte	0x4
 4495 0111 0C       		.byte	0x79
 4496 0112 04       		.4byte	0x185
 4497 0113 6D       		.byte	0x2
 4498 0114 43010000 		.byte	0x23
 4499 0118 0B       		.uleb128 0x0
 4500 0119 47070000 		.uleb128 0xb
 4501 011d 04       		.4byte	.LASF23
 4502 011e 6E       		.byte	0x4
 4503 011f 94000000 		.byte	0x7a
 4504 0123 02       		.4byte	0x18a
 4505 0124 23       		.byte	0x2
 4506 0125 00       		.byte	0x23
 4507 0126 0B       		.uleb128 0x4
 4508 0127 A0080000 		.uleb128 0xb
 4509 012b 04       		.4byte	.LASF24
 4510 012c 6F       		.byte	0x4
 4511 012d F2000000 		.byte	0x7b
 4512 0131 02       		.4byte	0x195
 4513 0132 23       		.byte	0x2
 4514 0133 04       		.byte	0x23
 4515 0134 0B       		.uleb128 0x8
 4516 0135 7D050000 		.byte	0x0
 4517 0139 04       		.uleb128 0xd
 4518 013a 70       		.4byte	0x25
 4519 013b F2000000 		.uleb128 0x7
 4520 013f 02       		.byte	0x4
 4521 0140 23       		.4byte	0x190
 4522 0141 08       		.uleb128 0xd
 4523 0142 00       		.4byte	0x101
 4524 0143 06       		.uleb128 0xd
 4525 0144 6C010000 		.4byte	0x143
 4526 0148 04       		.uleb128 0x6
 4527 0149 72       		.4byte	.LASF25
 4528 014a 0C010000 		.byte	0x4
 4529 014e 0A       		.byte	0x7c
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 121


 4530 014f 5F060000 		.4byte	0x14e
 4531 0153 14       		.uleb128 0x6
 4532 0154 04       		.4byte	.LASF26
 4533 0155 78       		.byte	0x5
 4534 0156 85010000 		.byte	0x57
 4535 015a 0B       		.4byte	0x6e
 4536 015b ED020000 		.uleb128 0xa
 4537 015f 04       		.4byte	.LASF27
 4538 0160 79       		.byte	0x8
 4539 0161 85010000 		.byte	0x5
 4540 0165 02       		.byte	0x5d
 4541 0166 23       		.4byte	0x1d9
 4542 0167 00       		.uleb128 0xb
 4543 0168 0B       		.4byte	.LASF28
 4544 0169 A8050000 		.byte	0x5
 4545 016d 04       		.byte	0x5e
 4546 016e 7A       		.4byte	0x64
 4547 016f 8A010000 		.byte	0x2
 4548 0173 02       		.byte	0x23
 4549 0174 23       		.uleb128 0x0
 4550 0175 04       		.uleb128 0xb
 4551 0176 0B       		.4byte	.LASF29
 4552 0177 DA000000 		.byte	0x5
 4553 017b 04       		.byte	0x5f
 4554 017c 7B       		.4byte	0x94
 4555 017d 95010000 		.byte	0x2
 4556 0181 02       		.byte	0x23
 4557 0182 23       		.uleb128 0x4
 4558 0183 08       		.byte	0x0
 4559 0184 00       		.uleb128 0x6
 4560 0185 0D       		.4byte	.LASF30
 4561 0186 25000000 		.byte	0x5
 4562 018a 07       		.byte	0x60
 4563 018b 04       		.4byte	0x1b0
 4564 018c 90010000 		.uleb128 0xa
 4565 0190 0D       		.4byte	.LASF31
 4566 0191 01010000 		.byte	0xc
 4567 0195 0D       		.byte	0x5
 4568 0196 43010000 		.byte	0x66
 4569 019a 06       		.4byte	0x21b
 4570 019b 98010000 		.uleb128 0xb
 4571 019f 04       		.4byte	.LASF32
 4572 01a0 7C       		.byte	0x5
 4573 01a1 4E010000 		.byte	0x67
 4574 01a5 06       		.4byte	0x6e
 4575 01a6 60010000 		.byte	0x2
 4576 01aa 05       		.byte	0x23
 4577 01ab 57       		.uleb128 0x0
 4578 01ac 6E000000 		.uleb128 0xb
 4579 01b0 0A       		.4byte	.LASF33
 4580 01b1 E3000000 		.byte	0x5
 4581 01b5 08       		.byte	0x68
 4582 01b6 05       		.4byte	0x25
 4583 01b7 5D       		.byte	0x2
 4584 01b8 D9010000 		.byte	0x23
 4585 01bc 0B       		.uleb128 0x4
 4586 01bd 3F020000 		.uleb128 0xb
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 122


 4587 01c1 05       		.4byte	.LASF34
 4588 01c2 5E       		.byte	0x5
 4589 01c3 64000000 		.byte	0x69
 4590 01c7 02       		.4byte	0x25
 4591 01c8 23       		.byte	0x2
 4592 01c9 00       		.byte	0x23
 4593 01ca 0B       		.uleb128 0x8
 4594 01cb CF020000 		.byte	0x0
 4595 01cf 05       		.uleb128 0x6
 4596 01d0 5F       		.4byte	.LASF35
 4597 01d1 94000000 		.byte	0x5
 4598 01d5 02       		.byte	0x6a
 4599 01d6 23       		.4byte	0x1e4
 4600 01d7 04       		.uleb128 0xe
 4601 01d8 00       		.4byte	0x22b
 4602 01d9 06       		.uleb128 0x7
 4603 01da 8B010000 		.byte	0x4
 4604 01de 05       		.4byte	0x231
 4605 01df 60       		.uleb128 0xe
 4606 01e0 B0010000 		.4byte	0x2c
 4607 01e4 0A       		.uleb128 0x7
 4608 01e5 D5050000 		.byte	0x4
 4609 01e9 0C       		.4byte	0x25
 4610 01ea 05       		.uleb128 0xa
 4611 01eb 66       		.4byte	.LASF36
 4612 01ec 1B020000 		.byte	0x48
 4613 01f0 0B       		.byte	0x1
 4614 01f1 0D090000 		.byte	0x52
 4615 01f5 05       		.4byte	0x2b9
 4616 01f6 67       		.uleb128 0xb
 4617 01f7 6E000000 		.4byte	.LASF37
 4618 01fb 02       		.byte	0x1
 4619 01fc 23       		.byte	0x53
 4620 01fd 00       		.4byte	0x2b9
 4621 01fe 0B       		.byte	0x2
 4622 01ff 57050000 		.byte	0x23
 4623 0203 05       		.uleb128 0x0
 4624 0204 68       		.uleb128 0xb
 4625 0205 25000000 		.4byte	.LASF38
 4626 0209 02       		.byte	0x1
 4627 020a 23       		.byte	0x59
 4628 020b 04       		.4byte	0x101
 4629 020c 0B       		.byte	0x2
 4630 020d 79040000 		.byte	0x23
 4631 0211 05       		.uleb128 0x4
 4632 0212 69       		.uleb128 0xb
 4633 0213 25000000 		.4byte	.LASF39
 4634 0217 02       		.byte	0x1
 4635 0218 23       		.byte	0x5a
 4636 0219 08       		.4byte	0x101
 4637 021a 00       		.byte	0x2
 4638 021b 06       		.byte	0x23
 4639 021c 08070000 		.uleb128 0x18
 4640 0220 05       		.uleb128 0xb
 4641 0221 6A       		.4byte	.LASF40
 4642 0222 E4010000 		.byte	0x1
 4643 0226 0E       		.byte	0x5b
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 123


 4644 0227 2B020000 		.4byte	0x25
 4645 022b 07       		.byte	0x2
 4646 022c 04       		.byte	0x23
 4647 022d 31020000 		.uleb128 0x2c
 4648 0231 0E       		.uleb128 0xb
 4649 0232 2C000000 		.4byte	.LASF41
 4650 0236 07       		.byte	0x1
 4651 0237 04       		.byte	0x5c
 4652 0238 25000000 		.4byte	0x236
 4653 023c 0A       		.byte	0x2
 4654 023d AA010000 		.byte	0x23
 4655 0241 48       		.uleb128 0x30
 4656 0242 01       		.uleb128 0xb
 4657 0243 52       		.4byte	.LASF42
 4658 0244 B9020000 		.byte	0x1
 4659 0248 0B       		.byte	0x5d
 4660 0249 24030000 		.4byte	0x2bf
 4661 024d 01       		.byte	0x2
 4662 024e 53       		.byte	0x23
 4663 024f B9020000 		.uleb128 0x34
 4664 0253 02       		.uleb128 0xb
 4665 0254 23       		.4byte	.LASF43
 4666 0255 00       		.byte	0x1
 4667 0256 0B       		.byte	0x68
 4668 0257 76060000 		.4byte	0x25
 4669 025b 01       		.byte	0x2
 4670 025c 59       		.byte	0x23
 4671 025d 01010000 		.uleb128 0x40
 4672 0261 02       		.uleb128 0xb
 4673 0262 23       		.4byte	.LASF44
 4674 0263 04       		.byte	0x1
 4675 0264 0B       		.byte	0x6c
 4676 0265 0F050000 		.4byte	0x25
 4677 0269 01       		.byte	0x2
 4678 026a 5A       		.byte	0x23
 4679 026b 01010000 		.uleb128 0x44
 4680 026f 02       		.byte	0x0
 4681 0270 23       		.uleb128 0x7
 4682 0271 18       		.byte	0x4
 4683 0272 0B       		.4byte	0x185
 4684 0273 B2080000 		.uleb128 0xf
 4685 0277 01       		.4byte	0x2c
 4686 0278 5B       		.4byte	0x2cf
 4687 0279 25000000 		.uleb128 0x10
 4688 027d 02       		.4byte	0x6b
 4689 027e 23       		.byte	0x9
 4690 027f 2C       		.byte	0x0
 4691 0280 0B       		.uleb128 0x6
 4692 0281 4F040000 		.4byte	.LASF45
 4693 0285 01       		.byte	0x1
 4694 0286 5C       		.byte	0x77
 4695 0287 36020000 		.4byte	0x23c
 4696 028b 02       		.uleb128 0x11
 4697 028c 23       		.byte	0x1
 4698 028d 30       		.4byte	.LASF66
 4699 028e 0B       		.byte	0x1
 4700 028f 66080000 		.2byte	0x185
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 124


 4701 0293 01       		.byte	0x1
 4702 0294 5D       		.4byte	0x64
 4703 0295 BF020000 		.4byte	.LFB2
 4704 0299 02       		.4byte	.LFE2
 4705 029a 23       		.4byte	.LLST0
 4706 029b 34       		.4byte	0x3a8
 4707 029c 0B       		.uleb128 0x12
 4708 029d 6B020000 		.4byte	.LASF46
 4709 02a1 01       		.byte	0x1
 4710 02a2 68       		.2byte	0x184
 4711 02a3 25000000 		.4byte	0x77
 4712 02a7 02       		.byte	0x2
 4713 02a8 23       		.byte	0x91
 4714 02a9 40       		.sleb128 -20
 4715 02aa 0B       		.uleb128 0x12
 4716 02ab 87060000 		.4byte	.LASF47
 4717 02af 01       		.byte	0x1
 4718 02b0 6C       		.2byte	0x184
 4719 02b1 25000000 		.4byte	0x226
 4720 02b5 02       		.byte	0x2
 4721 02b6 23       		.byte	0x91
 4722 02b7 44       		.sleb128 -24
 4723 02b8 00       		.uleb128 0x12
 4724 02b9 07       		.4byte	.LASF48
 4725 02ba 04       		.byte	0x1
 4726 02bb 85010000 		.2byte	0x184
 4727 02bf 0F       		.4byte	0x41
 4728 02c0 2C000000 		.byte	0x2
 4729 02c4 CF020000 		.byte	0x91
 4730 02c8 10       		.sleb128 -28
 4731 02c9 6B000000 		.uleb128 0x12
 4732 02cd 09       		.4byte	.LASF49
 4733 02ce 00       		.byte	0x1
 4734 02cf 06       		.2byte	0x184
 4735 02d0 3E030000 		.4byte	0x6e
 4736 02d4 01       		.byte	0x2
 4737 02d5 77       		.byte	0x91
 4738 02d6 3C020000 		.sleb128 -32
 4739 02da 11       		.uleb128 0x12
 4740 02db 01       		.4byte	.LASF40
 4741 02dc 96000000 		.byte	0x1
 4742 02e0 01       		.2byte	0x184
 4743 02e1 8501     		.4byte	0x25
 4744 02e3 01       		.byte	0x2
 4745 02e4 64000000 		.byte	0x91
 4746 02e8 00000000 		.sleb128 0
 4747 02ec 50020000 		.uleb128 0x12
 4748 02f0 00000000 		.4byte	.LASF50
 4749 02f4 A8030000 		.byte	0x1
 4750 02f8 12       		.2byte	0x184
 4751 02f9 04050000 		.4byte	0x3a8
 4752 02fd 01       		.byte	0x2
 4753 02fe 8401     		.byte	0x91
 4754 0300 77000000 		.sleb128 4
 4755 0304 02       		.uleb128 0x12
 4756 0305 91       		.4byte	.LASF51
 4757 0306 6C       		.byte	0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 125


 4758 0307 12       		.2byte	0x184
 4759 0308 CF080000 		.4byte	0x236
 4760 030c 01       		.byte	0x2
 4761 030d 8401     		.byte	0x91
 4762 030f 26020000 		.sleb128 8
 4763 0313 02       		.uleb128 0x12
 4764 0314 91       		.4byte	.LASF52
 4765 0315 68       		.byte	0x1
 4766 0316 12       		.2byte	0x184
 4767 0317 12020000 		.4byte	0x3ae
 4768 031b 01       		.byte	0x2
 4769 031c 8401     		.byte	0x91
 4770 031e 41000000 		.sleb128 12
 4771 0322 02       		.uleb128 0x13
 4772 0323 91       		.4byte	.LASF53
 4773 0324 64       		.byte	0x1
 4774 0325 12       		.2byte	0x186
 4775 0326 31030000 		.4byte	0x64
 4776 032a 01       		.byte	0x2
 4777 032b 8401     		.byte	0x91
 4778 032d 6E000000 		.sleb128 -16
 4779 0331 02       		.uleb128 0x13
 4780 0332 91       		.4byte	.LASF54
 4781 0333 60       		.byte	0x1
 4782 0334 12       		.2byte	0x187
 4783 0335 B2080000 		.4byte	0x3be
 4784 0339 01       		.byte	0x2
 4785 033a 8401     		.byte	0x91
 4786 033c 25000000 		.sleb128 -12
 4787 0340 02       		.uleb128 0x14
 4788 0341 91       		.4byte	.LBB2
 4789 0342 00       		.4byte	.LBE2
 4790 0343 12       		.uleb128 0x13
 4791 0344 DF020000 		.4byte	.LASF37
 4792 0348 01       		.byte	0x1
 4793 0349 8401     		.2byte	0x18f
 4794 034b A8030000 		.4byte	0x236
 4795 034f 02       		.byte	0x2
 4796 0350 91       		.byte	0x91
 4797 0351 04       		.sleb128 -8
 4798 0352 12       		.byte	0x0
 4799 0353 1F020000 		.byte	0x0
 4800 0357 01       		.uleb128 0x7
 4801 0358 8401     		.byte	0x4
 4802 035a 36020000 		.4byte	0x1a5
 4803 035e 02       		.uleb128 0xe
 4804 035f 91       		.4byte	0x3b3
 4805 0360 08       		.uleb128 0x7
 4806 0361 12       		.byte	0x4
 4807 0362 9E040000 		.4byte	0x3b9
 4808 0366 01       		.uleb128 0xe
 4809 0367 8401     		.4byte	0x21b
 4810 0369 AE030000 		.uleb128 0x7
 4811 036d 02       		.byte	0x4
 4812 036e 91       		.4byte	0x2cf
 4813 036f 0C       		.uleb128 0x15
 4814 0370 13       		.byte	0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 126


 4815 0371 BD020000 		.4byte	.LASF57
 4816 0375 01       		.byte	0x1
 4817 0376 8601     		.2byte	0x219
 4818 0378 64000000 		.byte	0x1
 4819 037c 02       		.4byte	.LFB3
 4820 037d 91       		.4byte	.LFE3
 4821 037e 70       		.4byte	.LLST1
 4822 037f 13       		.4byte	0x3fd
 4823 0380 BE010000 		.uleb128 0x12
 4824 0384 01       		.4byte	.LASF55
 4825 0385 8701     		.byte	0x1
 4826 0387 BE030000 		.2byte	0x218
 4827 038b 02       		.4byte	0x1a5
 4828 038c 91       		.byte	0x2
 4829 038d 74       		.byte	0x91
 4830 038e 14       		.sleb128 -12
 4831 038f 3C000000 		.uleb128 0x13
 4832 0393 C8010000 		.4byte	.LASF56
 4833 0397 13       		.byte	0x1
 4834 0398 24030000 		.2byte	0x21a
 4835 039c 01       		.4byte	0x3be
 4836 039d 8F01     		.byte	0x2
 4837 039f 36020000 		.byte	0x91
 4838 03a3 02       		.sleb128 -8
 4839 03a4 91       		.byte	0x0
 4840 03a5 78       		.uleb128 0x15
 4841 03a6 00       		.byte	0x1
 4842 03a7 00       		.4byte	.LASF58
 4843 03a8 07       		.byte	0x1
 4844 03a9 04       		.2byte	0x25b
 4845 03aa A5010000 		.byte	0x1
 4846 03ae 0E       		.4byte	.LFB4
 4847 03af B3030000 		.4byte	.LFE4
 4848 03b3 07       		.4byte	.LLST2
 4849 03b4 04       		.4byte	0x463
 4850 03b5 B9030000 		.uleb128 0x12
 4851 03b9 0E       		.4byte	.LASF59
 4852 03ba 1B020000 		.byte	0x1
 4853 03be 07       		.2byte	0x25a
 4854 03bf 04       		.4byte	0x463
 4855 03c0 CF020000 		.byte	0x2
 4856 03c4 15       		.byte	0x91
 4857 03c5 01       		.sleb128 -20
 4858 03c6 8A070000 		.uleb128 0x12
 4859 03ca 01       		.4byte	.LASF60
 4860 03cb 1902     		.byte	0x1
 4861 03cd 01       		.2byte	0x25a
 4862 03ce 50020000 		.4byte	0x94
 4863 03d2 58030000 		.byte	0x2
 4864 03d6 2B000000 		.byte	0x91
 4865 03da FD030000 		.sleb128 -24
 4866 03de 12       		.uleb128 0x13
 4867 03df 86040000 		.4byte	.LASF61
 4868 03e3 01       		.byte	0x1
 4869 03e4 1802     		.2byte	0x25c
 4870 03e6 A5010000 		.4byte	0x94
 4871 03ea 02       		.byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 127


 4872 03eb 91       		.byte	0x91
 4873 03ec 74       		.sleb128 -16
 4874 03ed 13       		.uleb128 0x13
 4875 03ee 64030000 		.4byte	.LASF62
 4876 03f2 01       		.byte	0x1
 4877 03f3 1A02     		.2byte	0x25d
 4878 03f5 BE030000 		.4byte	0x64
 4879 03f9 02       		.byte	0x2
 4880 03fa 91       		.byte	0x91
 4881 03fb 78       		.sleb128 -12
 4882 03fc 00       		.uleb128 0x13
 4883 03fd 15       		.4byte	.LASF63
 4884 03fe 01       		.byte	0x1
 4885 03ff E4050000 		.2byte	0x25d
 4886 0403 01       		.4byte	0x64
 4887 0404 5B02     		.byte	0x2
 4888 0406 01       		.byte	0x91
 4889 0407 58030000 		.sleb128 -8
 4890 040b D0040000 		.byte	0x0
 4891 040f 56000000 		.uleb128 0xe
 4892 0413 63040000 		.4byte	0x468
 4893 0417 12       		.uleb128 0x7
 4894 0418 44050000 		.byte	0x4
 4895 041c 01       		.4byte	0x94
 4896 041d 5A02     		.uleb128 0x15
 4897 041f 63040000 		.byte	0x1
 4898 0423 02       		.4byte	.LASF64
 4899 0424 91       		.byte	0x1
 4900 0425 6C       		.2byte	0x2a8
 4901 0426 12       		.byte	0x1
 4902 0427 57080000 		.4byte	.LFB5
 4903 042b 01       		.4byte	.LFE5
 4904 042c 5A02     		.4byte	.LLST3
 4905 042e 94000000 		.4byte	0x4b6
 4906 0432 02       		.uleb128 0x12
 4907 0433 91       		.4byte	.LASF65
 4908 0434 68       		.byte	0x1
 4909 0435 13       		.2byte	0x2a7
 4910 0436 9E010000 		.4byte	0x94
 4911 043a 01       		.byte	0x2
 4912 043b 5C02     		.byte	0x91
 4913 043d 94000000 		.sleb128 -16
 4914 0441 02       		.uleb128 0x13
 4915 0442 91       		.4byte	.LASF61
 4916 0443 70       		.byte	0x1
 4917 0444 13       		.2byte	0x2a9
 4918 0445 C0000000 		.4byte	0x94
 4919 0449 01       		.byte	0x2
 4920 044a 5D02     		.byte	0x91
 4921 044c 64000000 		.sleb128 -12
 4922 0450 02       		.uleb128 0x13
 4923 0451 91       		.4byte	.LASF62
 4924 0452 74       		.byte	0x1
 4925 0453 13       		.2byte	0x2aa
 4926 0454 A9060000 		.4byte	0x64
 4927 0458 01       		.byte	0x2
 4928 0459 5D02     		.byte	0x91
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 128


 4929 045b 64000000 		.sleb128 -8
 4930 045f 02       		.byte	0x0
 4931 0460 91       		.uleb128 0x11
 4932 0461 78       		.byte	0x1
 4933 0462 00       		.4byte	.LASF67
 4934 0463 0E       		.byte	0x1
 4935 0464 68040000 		.2byte	0x2e5
 4936 0468 07       		.byte	0x1
 4937 0469 04       		.4byte	0x25
 4938 046a 94000000 		.4byte	.LFB6
 4939 046e 15       		.4byte	.LFE6
 4940 046f 01       		.4byte	.LLST4
 4941 0470 55010000 		.4byte	0x502
 4942 0474 01       		.uleb128 0x12
 4943 0475 A802     		.4byte	.LASF68
 4944 0477 01       		.byte	0x1
 4945 0478 D0040000 		.2byte	0x2e4
 4946 047c BC050000 		.4byte	0x1a5
 4947 0480 81000000 		.byte	0x2
 4948 0484 B6040000 		.byte	0x91
 4949 0488 12       		.sleb128 -16
 4950 0489 49080000 		.uleb128 0x13
 4951 048d 01       		.4byte	.LASF56
 4952 048e A702     		.byte	0x1
 4953 0490 94000000 		.2byte	0x2e6
 4954 0494 02       		.4byte	0x3be
 4955 0495 91       		.byte	0x2
 4956 0496 70       		.byte	0x91
 4957 0497 13       		.sleb128 -12
 4958 0498 9E010000 		.uleb128 0x13
 4959 049c 01       		.4byte	.LASF69
 4960 049d A902     		.byte	0x1
 4961 049f 94000000 		.2byte	0x2e7
 4962 04a3 02       		.4byte	0x25
 4963 04a4 91       		.byte	0x2
 4964 04a5 74       		.byte	0x91
 4965 04a6 13       		.sleb128 -8
 4966 04a7 C0000000 		.byte	0x0
 4967 04ab 01       		.uleb128 0x15
 4968 04ac AA02     		.byte	0x1
 4969 04ae 64000000 		.4byte	.LASF70
 4970 04b2 02       		.byte	0x1
 4971 04b3 91       		.2byte	0x2fb
 4972 04b4 78       		.byte	0x1
 4973 04b5 00       		.4byte	.LFB7
 4974 04b6 11       		.4byte	.LFE7
 4975 04b7 01       		.4byte	.LLST5
 4976 04b8 D6080000 		.4byte	0x568
 4977 04bc 01       		.uleb128 0x12
 4978 04bd E502     		.4byte	.LASF68
 4979 04bf 01       		.byte	0x1
 4980 04c0 25000000 		.2byte	0x2fa
 4981 04c4 BC050000 		.4byte	0x1a5
 4982 04c8 20060000 		.byte	0x2
 4983 04cc AC000000 		.byte	0x91
 4984 04d0 02050000 		.sleb128 -20
 4985 04d4 12       		.uleb128 0x12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 129


 4986 04d5 94020000 		.4byte	.LASF71
 4987 04d9 01       		.byte	0x1
 4988 04da E402     		.2byte	0x2fa
 4989 04dc A5010000 		.4byte	0x25
 4990 04e0 02       		.byte	0x2
 4991 04e1 91       		.byte	0x91
 4992 04e2 70       		.sleb128 -24
 4993 04e3 13       		.uleb128 0x13
 4994 04e4 64030000 		.4byte	.LASF56
 4995 04e8 01       		.byte	0x1
 4996 04e9 E602     		.2byte	0x2fc
 4997 04eb BE030000 		.4byte	0x3be
 4998 04ef 02       		.byte	0x2
 4999 04f0 91       		.byte	0x91
 5000 04f1 74       		.sleb128 -16
 5001 04f2 13       		.uleb128 0x13
 5002 04f3 A1030000 		.4byte	.LASF72
 5003 04f7 01       		.byte	0x1
 5004 04f8 E702     		.2byte	0x2fd
 5005 04fa 25000000 		.4byte	0x25
 5006 04fe 02       		.byte	0x2
 5007 04ff 91       		.byte	0x91
 5008 0500 78       		.sleb128 -12
 5009 0501 00       		.uleb128 0x13
 5010 0502 15       		.4byte	.LASF73
 5011 0503 01       		.byte	0x1
 5012 0504 2E020000 		.2byte	0x2fd
 5013 0508 01       		.4byte	0x25
 5014 0509 FB02     		.byte	0x2
 5015 050b 01       		.byte	0x91
 5016 050c 20060000 		.sleb128 -8
 5017 0510 EC070000 		.byte	0x0
 5018 0514 D7000000 		.uleb128 0x15
 5019 0518 68050000 		.byte	0x1
 5020 051c 12       		.4byte	.LASF74
 5021 051d 94020000 		.byte	0x1
 5022 0521 01       		.2byte	0x364
 5023 0522 FA02     		.byte	0x1
 5024 0524 A5010000 		.4byte	.LFB8
 5025 0528 02       		.4byte	.LFE8
 5026 0529 91       		.4byte	.LLST6
 5027 052a 6C       		.4byte	0x5a1
 5028 052b 12       		.uleb128 0x12
 5029 052c 88050000 		.4byte	.LASF75
 5030 0530 01       		.byte	0x1
 5031 0531 FA02     		.2byte	0x363
 5032 0533 25000000 		.4byte	0x1a5
 5033 0537 02       		.byte	0x2
 5034 0538 91       		.byte	0x91
 5035 0539 68       		.sleb128 -12
 5036 053a 13       		.uleb128 0x13
 5037 053b 64030000 		.4byte	.LASF56
 5038 053f 01       		.byte	0x1
 5039 0540 FC02     		.2byte	0x365
 5040 0542 BE030000 		.4byte	0x3be
 5041 0546 02       		.byte	0x2
 5042 0547 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 130


 5043 0548 70       		.sleb128 -8
 5044 0549 13       		.byte	0x0
 5045 054a 8E080000 		.uleb128 0x11
 5046 054e 01       		.byte	0x1
 5047 054f FD02     		.4byte	.LASF76
 5048 0551 25000000 		.byte	0x1
 5049 0555 02       		.2byte	0x38f
 5050 0556 91       		.byte	0x1
 5051 0557 74       		.4byte	0x64
 5052 0558 13       		.4byte	.LFB9
 5053 0559 6A030000 		.4byte	.LFE9
 5054 055d 01       		.4byte	.LLST7
 5055 055e FD02     		.4byte	0x5ed
 5056 0560 25000000 		.uleb128 0x12
 5057 0564 02       		.4byte	.LASF77
 5058 0565 91       		.byte	0x1
 5059 0566 78       		.2byte	0x38e
 5060 0567 00       		.4byte	0x1a5
 5061 0568 15       		.byte	0x2
 5062 0569 01       		.byte	0x91
 5063 056a 37000000 		.sleb128 -12
 5064 056e 01       		.uleb128 0x13
 5065 056f 6403     		.4byte	.LASF53
 5066 0571 01       		.byte	0x1
 5067 0572 EC070000 		.2byte	0x390
 5068 0576 B0080000 		.4byte	0x64
 5069 057a 02010000 		.byte	0x2
 5070 057e A1050000 		.byte	0x91
 5071 0582 12       		.sleb128 -8
 5072 0583 FD080000 		.uleb128 0x13
 5073 0587 01       		.4byte	.LASF56
 5074 0588 6303     		.byte	0x1
 5075 058a A5010000 		.2byte	0x391
 5076 058e 02       		.4byte	0x5ed
 5077 058f 91       		.byte	0x2
 5078 0590 74       		.byte	0x91
 5079 0591 13       		.sleb128 -4
 5080 0592 64030000 		.byte	0x0
 5081 0596 01       		.uleb128 0xe
 5082 0597 6503     		.4byte	0x5f2
 5083 0599 BE030000 		.uleb128 0x7
 5084 059d 02       		.byte	0x4
 5085 059e 91       		.4byte	0x5f8
 5086 059f 78       		.uleb128 0xe
 5087 05a0 00       		.4byte	0x2cf
 5088 05a1 11       		.uleb128 0x15
 5089 05a2 01       		.byte	0x1
 5090 05a3 FD020000 		.4byte	.LASF78
 5091 05a7 01       		.byte	0x1
 5092 05a8 8F03     		.2byte	0x3ae
 5093 05aa 01       		.byte	0x1
 5094 05ab 64000000 		.4byte	.LFB10
 5095 05af B0080000 		.4byte	.LFE10
 5096 05b3 20090000 		.4byte	.LLST8
 5097 05b7 2D010000 		.4byte	0x636
 5098 05bb ED050000 		.uleb128 0x12
 5099 05bf 12       		.4byte	.LASF79
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 131


 5100 05c0 F2060000 		.byte	0x1
 5101 05c4 01       		.2byte	0x3ad
 5102 05c5 8E03     		.4byte	0x1a5
 5103 05c7 A5010000 		.byte	0x2
 5104 05cb 02       		.byte	0x91
 5105 05cc 91       		.sleb128 -12
 5106 05cd 74       		.uleb128 0x13
 5107 05ce 13       		.4byte	.LASF56
 5108 05cf BD020000 		.byte	0x1
 5109 05d3 01       		.2byte	0x3af
 5110 05d4 9003     		.4byte	0x3be
 5111 05d6 64000000 		.byte	0x2
 5112 05da 02       		.byte	0x91
 5113 05db 91       		.sleb128 -8
 5114 05dc 78       		.byte	0x0
 5115 05dd 13       		.uleb128 0x11
 5116 05de 64030000 		.byte	0x1
 5117 05e2 01       		.4byte	.LASF80
 5118 05e3 9103     		.byte	0x1
 5119 05e5 ED050000 		.2byte	0x3d8
 5120 05e9 02       		.byte	0x1
 5121 05ea 91       		.4byte	0x64
 5122 05eb 7C       		.4byte	.LFB11
 5123 05ec 00       		.4byte	.LFE11
 5124 05ed 0E       		.4byte	.LLST9
 5125 05ee F2050000 		.4byte	0x682
 5126 05f2 07       		.uleb128 0x12
 5127 05f3 04       		.4byte	.LASF79
 5128 05f4 F8050000 		.byte	0x1
 5129 05f8 0E       		.2byte	0x3d7
 5130 05f9 CF020000 		.4byte	0x1a5
 5131 05fd 15       		.byte	0x2
 5132 05fe 01       		.byte	0x91
 5133 05ff 88030000 		.sleb128 -16
 5134 0603 01       		.uleb128 0x13
 5135 0604 AE03     		.4byte	.LASF73
 5136 0606 01       		.byte	0x1
 5137 0607 20090000 		.2byte	0x3d9
 5138 060b 100A0000 		.4byte	0x64
 5139 060f 4C010000 		.byte	0x2
 5140 0613 36060000 		.byte	0x91
 5141 0617 12       		.sleb128 -12
 5142 0618 1F010000 		.uleb128 0x13
 5143 061c 01       		.4byte	.LASF56
 5144 061d AD03     		.byte	0x1
 5145 061f A5010000 		.2byte	0x3da
 5146 0623 02       		.4byte	0x3be
 5147 0624 91       		.byte	0x2
 5148 0625 74       		.byte	0x91
 5149 0626 13       		.sleb128 -8
 5150 0627 64030000 		.byte	0x0
 5151 062b 01       		.uleb128 0x15
 5152 062c AF03     		.byte	0x1
 5153 062e BE030000 		.4byte	.LASF81
 5154 0632 02       		.byte	0x1
 5155 0633 91       		.2byte	0x3ff
 5156 0634 78       		.byte	0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 132


 5157 0635 00       		.4byte	.LFB12
 5158 0636 11       		.4byte	.LFE12
 5159 0637 01       		.4byte	.LLST10
 5160 0638 96060000 		.4byte	0x6ac
 5161 063c 01       		.uleb128 0x13
 5162 063d D803     		.4byte	.LASF53
 5163 063f 01       		.byte	0x1
 5164 0640 64000000 		.2byte	0x400
 5165 0644 100A0000 		.4byte	0x64
 5166 0648 1C0B0000 		.byte	0x2
 5167 064c 77010000 		.byte	0x91
 5168 0650 82060000 		.sleb128 -8
 5169 0654 12       		.byte	0x0
 5170 0655 1F010000 		.uleb128 0x16
 5171 0659 01       		.byte	0x1
 5172 065a D703     		.4byte	.LASF82
 5173 065c A5010000 		.byte	0x1
 5174 0660 02       		.2byte	0x429
 5175 0661 91       		.byte	0x1
 5176 0662 70       		.4byte	.LFB13
 5177 0663 13       		.4byte	.LFE13
 5178 0664 6A030000 		.4byte	.LLST11
 5179 0668 01       		.uleb128 0x17
 5180 0669 D903     		.byte	0x1
 5181 066b 64000000 		.4byte	.LASF83
 5182 066f 02       		.byte	0x1
 5183 0670 91       		.2byte	0x434
 5184 0671 74       		.byte	0x1
 5185 0672 13       		.4byte	.LFB14
 5186 0673 64030000 		.4byte	.LFE14
 5187 0677 01       		.byte	0x1
 5188 0678 DA03     		.byte	0x5d
 5189 067a BE030000 		.uleb128 0x11
 5190 067e 02       		.byte	0x1
 5191 067f 91       		.4byte	.LASF84
 5192 0680 78       		.byte	0x1
 5193 0681 00       		.2byte	0x43c
 5194 0682 15       		.byte	0x1
 5195 0683 01       		.4byte	0x64
 5196 0684 4E020000 		.4byte	.LFB15
 5197 0688 01       		.4byte	.LFE15
 5198 0689 FF03     		.4byte	.LLST13
 5199 068b 01       		.4byte	0x72c
 5200 068c 1C0B0000 		.uleb128 0x13
 5201 0690 BC0B0000 		.4byte	.LASF56
 5202 0694 A2010000 		.byte	0x1
 5203 0698 AC060000 		.2byte	0x43d
 5204 069c 13       		.4byte	0x3be
 5205 069d BD020000 		.byte	0x2
 5206 06a1 01       		.byte	0x7d
 5207 06a2 0004     		.sleb128 4
 5208 06a4 64000000 		.uleb128 0x13
 5209 06a8 02       		.4byte	.LASF62
 5210 06a9 91       		.byte	0x1
 5211 06aa 78       		.2byte	0x43e
 5212 06ab 00       		.4byte	0x64
 5213 06ac 16       		.byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 133


 5214 06ad 01       		.byte	0x91
 5215 06ae 3E060000 		.sleb128 -12
 5216 06b2 01       		.uleb128 0x14
 5217 06b3 2904     		.4byte	.LBB3
 5218 06b5 01       		.4byte	.LBE3
 5219 06b6 BC0B0000 		.uleb128 0x13
 5220 06ba F00B0000 		.4byte	.LASF73
 5221 06be CD010000 		.byte	0x1
 5222 06c2 17       		.2byte	0x44d
 5223 06c3 01       		.4byte	0x64
 5224 06c4 F8060000 		.byte	0x2
 5225 06c8 01       		.byte	0x91
 5226 06c9 3404     		.sleb128 -8
 5227 06cb 01       		.byte	0x0
 5228 06cc F00B0000 		.byte	0x0
 5229 06d0 0C0C0000 		.uleb128 0x11
 5230 06d4 01       		.byte	0x1
 5231 06d5 5D       		.4byte	.LASF85
 5232 06d6 11       		.byte	0x1
 5233 06d7 01       		.2byte	0x48e
 5234 06d8 50060000 		.byte	0x1
 5235 06dc 01       		.4byte	0x94
 5236 06dd 3C04     		.4byte	.LFB16
 5237 06df 01       		.4byte	.LFE16
 5238 06e0 64000000 		.4byte	.LLST14
 5239 06e4 0C0C0000 		.4byte	0x75a
 5240 06e8 EC0D0000 		.uleb128 0x13
 5241 06ec EC010000 		.4byte	.LASF86
 5242 06f0 2C070000 		.byte	0x1
 5243 06f4 13       		.2byte	0x48f
 5244 06f5 64030000 		.4byte	0x94
 5245 06f9 01       		.byte	0x2
 5246 06fa 3D04     		.byte	0x91
 5247 06fc BE030000 		.sleb128 -8
 5248 0700 02       		.byte	0x0
 5249 0701 7D       		.uleb128 0x18
 5250 0702 04       		.byte	0x1
 5251 0703 13       		.4byte	.LASF157
 5252 0704 C0000000 		.byte	0x1
 5253 0708 01       		.2byte	0x49d
 5254 0709 3E04     		.byte	0x1
 5255 070b 64000000 		.4byte	0x25
 5256 070f 02       		.4byte	.LFB17
 5257 0710 91       		.4byte	.LFE17
 5258 0711 74       		.byte	0x1
 5259 0712 14       		.byte	0x5d
 5260 0713 540C0000 		.uleb128 0x15
 5261 0717 B40D0000 		.byte	0x1
 5262 071b 13       		.4byte	.LASF87
 5263 071c 6A030000 		.byte	0x1
 5264 0720 01       		.2byte	0x4a7
 5265 0721 4D04     		.byte	0x1
 5266 0723 64000000 		.4byte	.LFB18
 5267 0727 02       		.4byte	.LFE18
 5268 0728 91       		.4byte	.LLST16
 5269 0729 78       		.4byte	0x7ab
 5270 072a 00       		.uleb128 0x12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 134


 5271 072b 00       		.4byte	.LASF88
 5272 072c 11       		.byte	0x1
 5273 072d 01       		.2byte	0x4a6
 5274 072e C4030000 		.4byte	0x7ab
 5275 0732 01       		.byte	0x2
 5276 0733 8E04     		.byte	0x91
 5277 0735 01       		.sleb128 -16
 5278 0736 94000000 		.uleb128 0x13
 5279 073a EC0D0000 		.4byte	.LASF89
 5280 073e 200E0000 		.byte	0x1
 5281 0742 17020000 		.2byte	0x4a8
 5282 0746 5A070000 		.4byte	0x25
 5283 074a 13       		.byte	0x2
 5284 074b 1C080000 		.byte	0x91
 5285 074f 01       		.sleb128 -12
 5286 0750 8F04     		.byte	0x0
 5287 0752 94000000 		.uleb128 0x7
 5288 0756 02       		.byte	0x4
 5289 0757 91       		.4byte	0x2c
 5290 0758 78       		.uleb128 0x15
 5291 0759 00       		.byte	0x1
 5292 075a 18       		.4byte	.LASF90
 5293 075b 01       		.byte	0x1
 5294 075c D1070000 		.2byte	0x527
 5295 0760 01       		.byte	0x1
 5296 0761 9D04     		.4byte	.LFB19
 5297 0763 01       		.4byte	.LFE19
 5298 0764 25000000 		.4byte	.LLST17
 5299 0768 200E0000 		.4byte	0x7ea
 5300 076c 340E0000 		.uleb128 0x12
 5301 0770 01       		.4byte	.LASF91
 5302 0771 5D       		.byte	0x1
 5303 0772 15       		.2byte	0x526
 5304 0773 01       		.4byte	0x7ab
 5305 0774 C5020000 		.byte	0x2
 5306 0778 01       		.byte	0x91
 5307 0779 A704     		.sleb128 -8
 5308 077b 01       		.uleb128 0x12
 5309 077c 340E0000 		.4byte	.LASF92
 5310 0780 AC0F0000 		.byte	0x1
 5311 0784 42020000 		.2byte	0x526
 5312 0788 AB070000 		.4byte	0x25
 5313 078c 12       		.byte	0x2
 5314 078d 52070000 		.byte	0x91
 5315 0791 01       		.sleb128 -12
 5316 0792 A604     		.byte	0x0
 5317 0794 AB070000 		.uleb128 0x11
 5318 0798 02       		.byte	0x1
 5319 0799 91       		.4byte	.LASF93
 5320 079a 70       		.byte	0x1
 5321 079b 13       		.2byte	0x538
 5322 079c F4050000 		.byte	0x1
 5323 07a0 01       		.4byte	0x25
 5324 07a1 A804     		.4byte	.LFB20
 5325 07a3 25000000 		.4byte	.LFE20
 5326 07a7 02       		.4byte	.LLST18
 5327 07a8 91       		.4byte	0x818
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 135


 5328 07a9 74       		.uleb128 0x13
 5329 07aa 00       		.4byte	.LASF94
 5330 07ab 07       		.byte	0x1
 5331 07ac 04       		.2byte	0x539
 5332 07ad 2C000000 		.4byte	0x25
 5333 07b1 15       		.byte	0x2
 5334 07b2 01       		.byte	0x91
 5335 07b3 5B000000 		.sleb128 -8
 5336 07b7 01       		.byte	0x0
 5337 07b8 2705     		.uleb128 0x15
 5338 07ba 01       		.byte	0x1
 5339 07bb AC0F0000 		.4byte	.LASF95
 5340 07bf 1C100000 		.byte	0x1
 5341 07c3 6D020000 		.2byte	0x54f
 5342 07c7 EA070000 		.byte	0x1
 5343 07cb 12       		.4byte	.LFB21
 5344 07cc 95040000 		.4byte	.LFE21
 5345 07d0 01       		.4byte	.LLST19
 5346 07d1 2605     		.4byte	0x869
 5347 07d3 AB070000 		.uleb128 0x19
 5348 07d7 02       		.4byte	.LBB4
 5349 07d8 91       		.4byte	.LBE4
 5350 07d9 78       		.4byte	0x84f
 5351 07da 12       		.uleb128 0x13
 5352 07db 2E080000 		.4byte	.LASF96
 5353 07df 01       		.byte	0x1
 5354 07e0 2605     		.2byte	0x558
 5355 07e2 25000000 		.4byte	0x869
 5356 07e6 02       		.byte	0x2
 5357 07e7 91       		.byte	0x91
 5358 07e8 74       		.sleb128 -8
 5359 07e9 00       		.byte	0x0
 5360 07ea 11       		.uleb128 0x14
 5361 07eb 01       		.4byte	.LBB5
 5362 07ec 7F080000 		.4byte	.LBE5
 5363 07f0 01       		.uleb128 0x13
 5364 07f1 3805     		.4byte	.LASF56
 5365 07f3 01       		.byte	0x1
 5366 07f4 25000000 		.2byte	0x564
 5367 07f8 1C100000 		.4byte	0x3be
 5368 07fc 74100000 		.byte	0x2
 5369 0800 98020000 		.byte	0x7d
 5370 0804 18080000 		.sleb128 4
 5371 0808 13       		.byte	0x0
 5372 0809 32040000 		.byte	0x0
 5373 080d 01       		.uleb128 0x7
 5374 080e 3905     		.byte	0x4
 5375 0810 25000000 		.4byte	0x19a
 5376 0814 02       		.uleb128 0x15
 5377 0815 91       		.byte	0x1
 5378 0816 78       		.4byte	.LASF97
 5379 0817 00       		.byte	0x1
 5380 0818 15       		.2byte	0x613
 5381 0819 01       		.byte	0x1
 5382 081a 19060000 		.4byte	.LFB22
 5383 081e 01       		.4byte	.LFE22
 5384 081f 4F05     		.4byte	.LLST20
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 136


 5385 0821 01       		.4byte	0x8a3
 5386 0822 74100000 		.uleb128 0x14
 5387 0826 1C120000 		.4byte	.LBB6
 5388 082a C3020000 		.4byte	.LBE6
 5389 082e 69080000 		.uleb128 0x13
 5390 0832 19       		.4byte	.LASF98
 5391 0833 B0100000 		.byte	0x1
 5392 0837 F0100000 		.2byte	0x637
 5393 083b 4F080000 		.4byte	0x8a3
 5394 083f 13       		.byte	0x2
 5395 0840 B8070000 		.byte	0x91
 5396 0844 01       		.sleb128 -4
 5397 0845 5805     		.byte	0x0
 5398 0847 69080000 		.byte	0x0
 5399 084b 02       		.uleb128 0xe
 5400 084c 91       		.4byte	0x869
 5401 084d 78       		.uleb128 0x15
 5402 084e 00       		.byte	0x1
 5403 084f 14       		.4byte	.LASF99
 5404 0850 F0100000 		.byte	0x1
 5405 0854 DC110000 		.2byte	0x63f
 5406 0858 13       		.byte	0x1
 5407 0859 64030000 		.4byte	.LFB23
 5408 085d 01       		.4byte	.LFE23
 5409 085e 6405     		.4byte	.LLST21
 5410 0860 BE030000 		.4byte	0x8f0
 5411 0864 02       		.uleb128 0x12
 5412 0865 7D       		.4byte	.LASF100
 5413 0866 04       		.byte	0x1
 5414 0867 00       		.2byte	0x63e
 5415 0868 00       		.4byte	0x8f0
 5416 0869 07       		.byte	0x2
 5417 086a 04       		.byte	0x91
 5418 086b 9A010000 		.sleb128 -12
 5419 086f 15       		.uleb128 0x12
 5420 0870 01       		.4byte	.LASF101
 5421 0871 1F040000 		.byte	0x1
 5422 0875 01       		.2byte	0x63e
 5423 0876 1306     		.4byte	0x94
 5424 0878 01       		.byte	0x2
 5425 0879 1C120000 		.byte	0x91
 5426 087d E8130000 		.sleb128 -16
 5427 0881 EE020000 		.uleb128 0x13
 5428 0885 A3080000 		.4byte	.LASF61
 5429 0889 14       		.byte	0x1
 5430 088a 7C120000 		.2byte	0x640
 5431 088e F4120000 		.4byte	0x94
 5432 0892 13       		.byte	0x2
 5433 0893 45030000 		.byte	0x91
 5434 0897 01       		.sleb128 -8
 5435 0898 3706     		.byte	0x0
 5436 089a A3080000 		.uleb128 0xe
 5437 089e 02       		.4byte	0x8f5
 5438 089f 91       		.uleb128 0x7
 5439 08a0 7C       		.byte	0x4
 5440 08a1 00       		.4byte	0x8fb
 5441 08a2 00       		.uleb128 0xe
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 137


 5442 08a3 0E       		.4byte	0x19a
 5443 08a4 69080000 		.uleb128 0x11
 5444 08a8 15       		.byte	0x1
 5445 08a9 01       		.4byte	.LASF102
 5446 08aa 67050000 		.byte	0x1
 5447 08ae 01       		.2byte	0x685
 5448 08af 3F06     		.byte	0x1
 5449 08b1 01       		.4byte	0x64
 5450 08b2 E8130000 		.4byte	.LFB24
 5451 08b6 EC140000 		.4byte	.LFE24
 5452 08ba 0D030000 		.4byte	.LLST22
 5453 08be F0080000 		.4byte	0x94c
 5454 08c2 12       		.uleb128 0x12
 5455 08c3 2B000000 		.4byte	.LASF100
 5456 08c7 01       		.byte	0x1
 5457 08c8 3E06     		.2byte	0x684
 5458 08ca F0080000 		.4byte	0x8f0
 5459 08ce 02       		.byte	0x2
 5460 08cf 91       		.byte	0x91
 5461 08d0 74       		.sleb128 -16
 5462 08d1 12       		.uleb128 0x13
 5463 08d2 48010000 		.4byte	.LASF103
 5464 08d6 01       		.byte	0x1
 5465 08d7 3E06     		.2byte	0x686
 5466 08d9 94000000 		.4byte	0x3be
 5467 08dd 02       		.byte	0x2
 5468 08de 91       		.byte	0x91
 5469 08df 70       		.sleb128 -12
 5470 08e0 13       		.uleb128 0x13
 5471 08e1 9E010000 		.4byte	.LASF53
 5472 08e5 01       		.byte	0x1
 5473 08e6 4006     		.2byte	0x687
 5474 08e8 94000000 		.4byte	0x64
 5475 08ec 02       		.byte	0x2
 5476 08ed 91       		.byte	0x91
 5477 08ee 78       		.sleb128 -8
 5478 08ef 00       		.byte	0x0
 5479 08f0 0E       		.uleb128 0x15
 5480 08f1 F5080000 		.byte	0x1
 5481 08f5 07       		.4byte	.LASF104
 5482 08f6 04       		.byte	0x1
 5483 08f7 FB080000 		.2byte	0x6b4
 5484 08fb 0E       		.byte	0x1
 5485 08fc 9A010000 		.4byte	.LFB25
 5486 0900 11       		.4byte	.LFE25
 5487 0901 01       		.4byte	.LLST23
 5488 0902 2E070000 		.4byte	0x976
 5489 0906 01       		.uleb128 0x12
 5490 0907 8506     		.4byte	.LASF105
 5491 0909 01       		.byte	0x1
 5492 090a 64000000 		.2byte	0x6b3
 5493 090e EC140000 		.4byte	0x976
 5494 0912 24160000 		.byte	0x2
 5495 0916 38030000 		.byte	0x91
 5496 091a 4C090000 		.sleb128 -4
 5497 091e 12       		.byte	0x0
 5498 091f 2B000000 		.uleb128 0xe
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 138


 5499 0923 01       		.4byte	0x97b
 5500 0924 8406     		.uleb128 0x7
 5501 0926 F0080000 		.byte	0x4
 5502 092a 02       		.4byte	0x1d9
 5503 092b 91       		.uleb128 0x11
 5504 092c 70       		.byte	0x1
 5505 092d 13       		.4byte	.LASF106
 5506 092e 0A060000 		.byte	0x1
 5507 0932 01       		.2byte	0x6bb
 5508 0933 8606     		.byte	0x1
 5509 0935 BE030000 		.4byte	0x64
 5510 0939 02       		.4byte	.LFB26
 5511 093a 91       		.4byte	.LFE26
 5512 093b 74       		.4byte	.LLST24
 5513 093c 13       		.4byte	0x9cd
 5514 093d BD020000 		.uleb128 0x12
 5515 0941 01       		.4byte	.LASF105
 5516 0942 8706     		.byte	0x1
 5517 0944 64000000 		.2byte	0x6ba
 5518 0948 02       		.4byte	0x976
 5519 0949 91       		.byte	0x2
 5520 094a 78       		.byte	0x91
 5521 094b 00       		.sleb128 -12
 5522 094c 15       		.uleb128 0x12
 5523 094d 01       		.4byte	.LASF107
 5524 094e E8080000 		.byte	0x1
 5525 0952 01       		.2byte	0x6ba
 5526 0953 B406     		.4byte	0x463
 5527 0955 01       		.byte	0x2
 5528 0956 24160000 		.byte	0x91
 5529 095a 5C160000 		.sleb128 -16
 5530 095e 63030000 		.uleb128 0x13
 5531 0962 76090000 		.4byte	.LASF53
 5532 0966 12       		.byte	0x1
 5533 0967 D0000000 		.2byte	0x6bc
 5534 096b 01       		.4byte	0x64
 5535 096c B306     		.byte	0x2
 5536 096e 76090000 		.byte	0x91
 5537 0972 02       		.sleb128 -8
 5538 0973 91       		.byte	0x0
 5539 0974 7C       		.uleb128 0x17
 5540 0975 00       		.byte	0x1
 5541 0976 0E       		.4byte	.LASF108
 5542 0977 7B090000 		.byte	0x1
 5543 097b 07       		.2byte	0x6e6
 5544 097c 04       		.byte	0x1
 5545 097d D9010000 		.4byte	.LFB27
 5546 0981 11       		.4byte	.LFE27
 5547 0982 01       		.byte	0x1
 5548 0983 96070000 		.byte	0x5d
 5549 0987 01       		.uleb128 0x1a
 5550 0988 BB06     		.4byte	.LASF109
 5551 098a 01       		.byte	0x1
 5552 098b 64000000 		.2byte	0x6f6
 5553 098f 5C160000 		.byte	0x1
 5554 0993 50170000 		.4byte	.LFB28
 5555 0997 82030000 		.4byte	.LFE28
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 139


 5556 099b CD090000 		.4byte	.LLST26
 5557 099f 12       		.4byte	0xa0a
 5558 09a0 D0000000 		.uleb128 0x12
 5559 09a4 01       		.4byte	.LASF49
 5560 09a5 BA06     		.byte	0x1
 5561 09a7 76090000 		.2byte	0x6f5
 5562 09ab 02       		.4byte	0x6e
 5563 09ac 91       		.byte	0x2
 5564 09ad 74       		.byte	0x91
 5565 09ae 12       		.sleb128 -8
 5566 09af 71080000 		.byte	0x0
 5567 09b3 01       		.uleb128 0x1a
 5568 09b4 BA06     		.4byte	.LASF110
 5569 09b6 63040000 		.byte	0x1
 5570 09ba 02       		.2byte	0x737
 5571 09bb 91       		.byte	0x1
 5572 09bc 70       		.4byte	.LFB29
 5573 09bd 13       		.4byte	.LFE29
 5574 09be BD020000 		.4byte	.LLST27
 5575 09c2 01       		.4byte	0xa6f
 5576 09c3 BC06     		.uleb128 0x12
 5577 09c5 64000000 		.4byte	.LASF56
 5578 09c9 02       		.byte	0x1
 5579 09ca 91       		.2byte	0x736
 5580 09cb 78       		.4byte	0x3be
 5581 09cc 00       		.byte	0x2
 5582 09cd 17       		.byte	0x91
 5583 09ce 01       		.sleb128 -8
 5584 09cf 65060000 		.uleb128 0x12
 5585 09d3 01       		.4byte	.LASF47
 5586 09d4 E606     		.byte	0x1
 5587 09d6 01       		.2byte	0x736
 5588 09d7 50170000 		.4byte	0x226
 5589 09db 64170000 		.byte	0x2
 5590 09df 01       		.byte	0x91
 5591 09e0 5D       		.sleb128 -12
 5592 09e1 1A       		.uleb128 0x12
 5593 09e2 13040000 		.4byte	.LASF40
 5594 09e6 01       		.byte	0x1
 5595 09e7 F606     		.2byte	0x736
 5596 09e9 01       		.4byte	0x25
 5597 09ea 64170000 		.byte	0x2
 5598 09ee 90170000 		.byte	0x91
 5599 09f2 AD030000 		.sleb128 -16
 5600 09f6 0A0A0000 		.uleb128 0x12
 5601 09fa 12       		.4byte	.LASF52
 5602 09fb 31030000 		.byte	0x1
 5603 09ff 01       		.2byte	0x736
 5604 0a00 F506     		.4byte	0x3ae
 5605 0a02 6E000000 		.byte	0x2
 5606 0a06 02       		.byte	0x91
 5607 0a07 91       		.sleb128 -20
 5608 0a08 78       		.uleb128 0x12
 5609 0a09 00       		.4byte	.LASF48
 5610 0a0a 1A       		.byte	0x1
 5611 0a0b 00000000 		.2byte	0x736
 5612 0a0f 01       		.4byte	0x41
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 140


 5613 0a10 3707     		.byte	0x2
 5614 0a12 01       		.byte	0x91
 5615 0a13 90170000 		.sleb128 -24
 5616 0a17 58180000 		.byte	0x0
 5617 0a1b D8030000 		.uleb128 0x1a
 5618 0a1f 6F0A0000 		.4byte	.LASF111
 5619 0a23 12       		.byte	0x1
 5620 0a24 64030000 		.2byte	0x78d
 5621 0a28 01       		.byte	0x1
 5622 0a29 3607     		.4byte	.LFB30
 5623 0a2b BE030000 		.4byte	.LFE30
 5624 0a2f 02       		.4byte	.LLST28
 5625 0a30 91       		.4byte	0xa98
 5626 0a31 78       		.uleb128 0x13
 5627 0a32 12       		.4byte	.LASF40
 5628 0a33 CF080000 		.byte	0x1
 5629 0a37 01       		.2byte	0x78e
 5630 0a38 3607     		.4byte	0x25
 5631 0a3a 26020000 		.byte	0x2
 5632 0a3e 02       		.byte	0x91
 5633 0a3f 91       		.sleb128 -8
 5634 0a40 74       		.byte	0x0
 5635 0a41 12       		.uleb128 0x1a
 5636 0a42 B2080000 		.4byte	.LASF112
 5637 0a46 01       		.byte	0x1
 5638 0a47 3607     		.2byte	0x7ad
 5639 0a49 25000000 		.byte	0x1
 5640 0a4d 02       		.4byte	.LFB31
 5641 0a4e 91       		.4byte	.LFE31
 5642 0a4f 70       		.4byte	.LLST29
 5643 0a50 12       		.4byte	0xae4
 5644 0a51 9E040000 		.uleb128 0x14
 5645 0a55 01       		.4byte	.LBB7
 5646 0a56 3607     		.4byte	.LBE7
 5647 0a58 AE030000 		.uleb128 0x13
 5648 0a5c 02       		.4byte	.LASF113
 5649 0a5d 91       		.byte	0x1
 5650 0a5e 6C       		.2byte	0x7b0
 5651 0a5f 12       		.4byte	0x64
 5652 0a60 12020000 		.byte	0x2
 5653 0a64 01       		.byte	0x91
 5654 0a65 3607     		.sleb128 -12
 5655 0a67 41000000 		.uleb128 0x14
 5656 0a6b 02       		.4byte	.LBB8
 5657 0a6c 91       		.4byte	.LBE8
 5658 0a6d 68       		.uleb128 0x13
 5659 0a6e 00       		.4byte	.LASF56
 5660 0a6f 1A       		.byte	0x1
 5661 0a70 1B090000 		.2byte	0x7bc
 5662 0a74 01       		.4byte	0x3be
 5663 0a75 8D07     		.byte	0x2
 5664 0a77 01       		.byte	0x91
 5665 0a78 58180000 		.sleb128 -8
 5666 0a7c 10190000 		.byte	0x0
 5667 0a80 03040000 		.byte	0x0
 5668 0a84 980A0000 		.byte	0x0
 5669 0a88 13       		.uleb128 0x1b
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 141


 5670 0a89 B2080000 		.4byte	.LASF120
 5671 0a8d 01       		.byte	0x1
 5672 0a8e 8E07     		.2byte	0x7d0
 5673 0a90 25000000 		.byte	0x1
 5674 0a94 02       		.4byte	0x3be
 5675 0a95 91       		.4byte	.LFB32
 5676 0a96 78       		.4byte	.LFE32
 5677 0a97 00       		.4byte	.LLST30
 5678 0a98 1A       		.4byte	0xb2f
 5679 0a99 D2060000 		.uleb128 0x12
 5680 0a9d 01       		.4byte	.LASF48
 5681 0a9e AD07     		.byte	0x1
 5682 0aa0 01       		.2byte	0x7cf
 5683 0aa1 10190000 		.4byte	0x41
 5684 0aa5 EC190000 		.byte	0x2
 5685 0aa9 2E040000 		.byte	0x91
 5686 0aad E40A0000 		.sleb128 -12
 5687 0ab1 14       		.uleb128 0x12
 5688 0ab2 18190000 		.4byte	.LASF51
 5689 0ab6 D0190000 		.byte	0x1
 5690 0aba 13       		.2byte	0x7cf
 5691 0abb FD000000 		.4byte	0x236
 5692 0abf 01       		.byte	0x2
 5693 0ac0 B007     		.byte	0x91
 5694 0ac2 64000000 		.sleb128 -16
 5695 0ac6 02       		.uleb128 0x13
 5696 0ac7 91       		.4byte	.LASF54
 5697 0ac8 74       		.byte	0x1
 5698 0ac9 14       		.2byte	0x7d1
 5699 0aca 54190000 		.4byte	0x3be
 5700 0ace D0190000 		.byte	0x2
 5701 0ad2 13       		.byte	0x91
 5702 0ad3 64030000 		.sleb128 -8
 5703 0ad7 01       		.byte	0x0
 5704 0ad8 BC07     		.uleb128 0x1a
 5705 0ada BE030000 		.4byte	.LASF114
 5706 0ade 02       		.byte	0x1
 5707 0adf 91       		.2byte	0x7f2
 5708 0ae0 78       		.byte	0x1
 5709 0ae1 00       		.4byte	.LFB33
 5710 0ae2 00       		.4byte	.LFE33
 5711 0ae3 00       		.4byte	.LLST31
 5712 0ae4 1B       		.4byte	0xbd9
 5713 0ae5 D9010000 		.uleb128 0x12
 5714 0ae9 01       		.4byte	.LASF88
 5715 0aea D007     		.byte	0x1
 5716 0aec 01       		.2byte	0x7f1
 5717 0aed BE030000 		.4byte	0x22b
 5718 0af1 EC190000 		.byte	0x2
 5719 0af5 941A0000 		.byte	0x91
 5720 0af9 59040000 		.sleb128 -32
 5721 0afd 2F0B0000 		.uleb128 0x12
 5722 0b01 12       		.4byte	.LASF115
 5723 0b02 12020000 		.byte	0x1
 5724 0b06 01       		.2byte	0x7f1
 5725 0b07 CF07     		.4byte	0x869
 5726 0b09 41000000 		.byte	0x2
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 142


 5727 0b0d 02       		.byte	0x91
 5728 0b0e 91       		.sleb128 -36
 5729 0b0f 74       		.uleb128 0x12
 5730 0b10 12       		.4byte	.LASF116
 5731 0b11 1F020000 		.byte	0x1
 5732 0b15 01       		.2byte	0x7f1
 5733 0b16 CF07     		.4byte	0x2c
 5734 0b18 36020000 		.byte	0x2
 5735 0b1c 02       		.byte	0x91
 5736 0b1d 91       		.sleb128 -40
 5737 0b1e 70       		.uleb128 0x13
 5738 0b1f 13       		.4byte	.LASF117
 5739 0b20 BE010000 		.byte	0x1
 5740 0b24 01       		.2byte	0x7f3
 5741 0b25 D107     		.4byte	0xbd9
 5742 0b27 BE030000 		.byte	0x2
 5743 0b2b 02       		.byte	0x91
 5744 0b2c 91       		.sleb128 -28
 5745 0b2d 78       		.uleb128 0x13
 5746 0b2e 00       		.4byte	.LASF118
 5747 0b2f 1A       		.byte	0x1
 5748 0b30 B6060000 		.2byte	0x7f3
 5749 0b34 01       		.4byte	0xbd9
 5750 0b35 F207     		.byte	0x2
 5751 0b37 01       		.byte	0x91
 5752 0b38 941A0000 		.sleb128 -24
 5753 0b3c E81B0000 		.uleb128 0x13
 5754 0b40 84040000 		.4byte	.LASF119
 5755 0b44 D90B0000 		.byte	0x1
 5756 0b48 12       		.2byte	0x7f4
 5757 0b49 52070000 		.4byte	0x41
 5758 0b4d 01       		.byte	0x2
 5759 0b4e F107     		.byte	0x91
 5760 0b50 2B020000 		.sleb128 -18
 5761 0b54 02       		.uleb128 0x19
 5762 0b55 91       		.4byte	.LBB9
 5763 0b56 60       		.4byte	.LBE9
 5764 0b57 12       		.4byte	0xbbf
 5765 0b58 27070000 		.uleb128 0x13
 5766 0b5c 01       		.4byte	.LASF98
 5767 0b5d F107     		.byte	0x1
 5768 0b5f 69080000 		.2byte	0x7f7
 5769 0b63 02       		.4byte	0x8a3
 5770 0b64 91       		.byte	0x2
 5771 0b65 5C       		.byte	0x91
 5772 0b66 12       		.sleb128 -16
 5773 0b67 D6030000 		.byte	0x0
 5774 0b6b 01       		.uleb128 0x14
 5775 0b6c F107     		.4byte	.LBB10
 5776 0b6e 2C000000 		.4byte	.LBE10
 5777 0b72 02       		.uleb128 0x13
 5778 0b73 91       		.4byte	.LASF98
 5779 0b74 58       		.byte	0x1
 5780 0b75 13       		.2byte	0x7fa
 5781 0b76 9E050000 		.4byte	0x8a3
 5782 0b7a 01       		.byte	0x2
 5783 0b7b F307     		.byte	0x91
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 143


 5784 0b7d D90B0000 		.sleb128 -12
 5785 0b81 02       		.byte	0x0
 5786 0b82 91       		.byte	0x0
 5787 0b83 64       		.uleb128 0x7
 5788 0b84 13       		.byte	0x4
 5789 0b85 07020000 		.4byte	0xbdf
 5790 0b89 01       		.uleb128 0xd
 5791 0b8a F307     		.4byte	0x2cf
 5792 0b8c D90B0000 		.uleb128 0x1b
 5793 0b90 02       		.4byte	.LASF121
 5794 0b91 91       		.byte	0x1
 5795 0b92 68       		.2byte	0x843
 5796 0b93 13       		.byte	0x1
 5797 0b94 1A000000 		.4byte	0x41
 5798 0b98 01       		.4byte	.LFB34
 5799 0b99 F407     		.4byte	.LFE34
 5800 0b9b 41000000 		.4byte	.LLST32
 5801 0b9f 02       		.4byte	0xc20
 5802 0ba0 91       		.uleb128 0x12
 5803 0ba1 6E       		.4byte	.LASF122
 5804 0ba2 19       		.byte	0x1
 5805 0ba3 AC1A0000 		.2byte	0x842
 5806 0ba7 041B0000 		.4byte	0xc20
 5807 0bab BF0B0000 		.byte	0x2
 5808 0baf 13       		.byte	0x91
 5809 0bb0 45030000 		.sleb128 -4
 5810 0bb4 01       		.uleb128 0x13
 5811 0bb5 F707     		.4byte	.LASF123
 5812 0bb7 A3080000 		.byte	0x1
 5813 0bbb 02       		.2byte	0x844
 5814 0bbc 91       		.4byte	0x41
 5815 0bbd 70       		.byte	0x2
 5816 0bbe 00       		.byte	0x7d
 5817 0bbf 14       		.sleb128 0
 5818 0bc0 041B0000 		.byte	0x0
 5819 0bc4 5C1B0000 		.uleb128 0x7
 5820 0bc8 13       		.byte	0x4
 5821 0bc9 45030000 		.4byte	0xc26
 5822 0bcd 01       		.uleb128 0xe
 5823 0bce FA07     		.4byte	0x33
 5824 0bd0 A3080000 		.uleb128 0x1a
 5825 0bd4 02       		.4byte	.LASF124
 5826 0bd5 91       		.byte	0x1
 5827 0bd6 74       		.2byte	0x873
 5828 0bd7 00       		.byte	0x1
 5829 0bd8 00       		.4byte	.LFB35
 5830 0bd9 07       		.4byte	.LFE35
 5831 0bda 04       		.4byte	.LLST33
 5832 0bdb DF0B0000 		.4byte	0xc54
 5833 0bdf 0D       		.uleb128 0x12
 5834 0be0 CF020000 		.4byte	.LASF56
 5835 0be4 1B       		.byte	0x1
 5836 0be5 AA030000 		.2byte	0x872
 5837 0be9 01       		.4byte	0x3be
 5838 0bea 4308     		.byte	0x2
 5839 0bec 01       		.byte	0x91
 5840 0bed 41000000 		.sleb128 -8
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 144


 5841 0bf1 E81B0000 		.byte	0x0
 5842 0bf5 501C0000 		.uleb128 0x11
 5843 0bf9 AF040000 		.byte	0x1
 5844 0bfd 200C0000 		.4byte	.LASF125
 5845 0c01 12       		.byte	0x1
 5846 0c02 DE030000 		.2byte	0x882
 5847 0c06 01       		.byte	0x1
 5848 0c07 4208     		.4byte	0x1a5
 5849 0c09 200C0000 		.4byte	.LFB36
 5850 0c0d 02       		.4byte	.LFE36
 5851 0c0e 91       		.4byte	.LLST34
 5852 0c0f 7C       		.4byte	0xc82
 5853 0c10 13       		.uleb128 0x13
 5854 0c11 57040000 		.4byte	.LASF53
 5855 0c15 01       		.byte	0x1
 5856 0c16 4408     		.2byte	0x883
 5857 0c18 41000000 		.4byte	0x1a5
 5858 0c1c 02       		.byte	0x2
 5859 0c1d 7D       		.byte	0x91
 5860 0c1e 00       		.sleb128 -4
 5861 0c1f 00       		.byte	0x0
 5862 0c20 07       		.uleb128 0x15
 5863 0c21 04       		.byte	0x1
 5864 0c22 260C0000 		.4byte	.LASF126
 5865 0c26 0E       		.byte	0x1
 5866 0c27 33000000 		.2byte	0x8b0
 5867 0c2b 1A       		.byte	0x1
 5868 0c2c EB030000 		.4byte	.LFB37
 5869 0c30 01       		.4byte	.LFE37
 5870 0c31 7308     		.4byte	.LLST35
 5871 0c33 01       		.4byte	0xcbb
 5872 0c34 501C0000 		.uleb128 0x12
 5873 0c38 801C0000 		.4byte	.LASF127
 5874 0c3c CE040000 		.byte	0x1
 5875 0c40 540C0000 		.2byte	0x8af
 5876 0c44 12       		.4byte	0xcbb
 5877 0c45 64030000 		.byte	0x2
 5878 0c49 01       		.byte	0x91
 5879 0c4a 7208     		.sleb128 -12
 5880 0c4c BE030000 		.uleb128 0x13
 5881 0c50 02       		.4byte	.LASF56
 5882 0c51 91       		.byte	0x1
 5883 0c52 78       		.2byte	0x8b1
 5884 0c53 00       		.4byte	0xcc0
 5885 0c54 11       		.byte	0x2
 5886 0c55 01       		.byte	0x91
 5887 0c56 EA040000 		.sleb128 -8
 5888 0c5a 01       		.byte	0x0
 5889 0c5b 8208     		.uleb128 0xe
 5890 0c5d 01       		.4byte	0x3a8
 5891 0c5e A5010000 		.uleb128 0xe
 5892 0c62 801C0000 		.4byte	0x3be
 5893 0c66 A41C0000 		.uleb128 0x15
 5894 0c6a F9040000 		.byte	0x1
 5895 0c6e 820C0000 		.4byte	.LASF128
 5896 0c72 13       		.byte	0x1
 5897 0c73 BD020000 		.2byte	0x8d0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 145


 5898 0c77 01       		.byte	0x1
 5899 0c78 8308     		.4byte	.LFB38
 5900 0c7a A5010000 		.4byte	.LFE38
 5901 0c7e 02       		.4byte	.LLST36
 5902 0c7f 91       		.4byte	0xcfe
 5903 0c80 7C       		.uleb128 0x12
 5904 0c81 00       		.4byte	.LASF127
 5905 0c82 15       		.byte	0x1
 5906 0c83 01       		.2byte	0x8cf
 5907 0c84 0A010000 		.4byte	0xcbb
 5908 0c88 01       		.byte	0x2
 5909 0c89 B008     		.byte	0x91
 5910 0c8b 01       		.sleb128 -12
 5911 0c8c A41C0000 		.uleb128 0x13
 5912 0c90 C41D0000 		.4byte	.LASF56
 5913 0c94 18050000 		.byte	0x1
 5914 0c98 BB0C0000 		.2byte	0x8d1
 5915 0c9c 12       		.4byte	0xcc0
 5916 0c9d 41040000 		.byte	0x2
 5917 0ca1 01       		.byte	0x91
 5918 0ca2 AF08     		.sleb128 -8
 5919 0ca4 BB0C0000 		.byte	0x0
 5920 0ca8 02       		.uleb128 0xf
 5921 0ca9 91       		.4byte	0x19a
 5922 0caa 74       		.4byte	0xd0e
 5923 0cab 13       		.uleb128 0x10
 5924 0cac 64030000 		.4byte	0x6b
 5925 0cb0 01       		.byte	0x3
 5926 0cb1 B108     		.byte	0x0
 5927 0cb3 C00C0000 		.uleb128 0x1c
 5928 0cb7 02       		.4byte	.LASF129
 5929 0cb8 91       		.byte	0x1
 5930 0cb9 78       		.byte	0x87
 5931 0cba 00       		.4byte	0xcfe
 5932 0cbb 0E       		.byte	0x5
 5933 0cbc A8030000 		.byte	0x3
 5934 0cc0 0E       		.4byte	pxReadyTasksLists
 5935 0cc1 BE030000 		.uleb128 0x1c
 5936 0cc5 15       		.4byte	.LASF130
 5937 0cc6 01       		.byte	0x1
 5938 0cc7 A7040000 		.byte	0x88
 5939 0ccb 01       		.4byte	0x19a
 5940 0ccc D008     		.byte	0x5
 5941 0cce 01       		.byte	0x3
 5942 0ccf C41D0000 		.4byte	xDelayedTaskList1
 5943 0cd3 9C1E0000 		.uleb128 0x1c
 5944 0cd7 43050000 		.4byte	.LASF131
 5945 0cdb FE0C0000 		.byte	0x1
 5946 0cdf 12       		.byte	0x89
 5947 0ce0 41040000 		.4byte	0x19a
 5948 0ce4 01       		.byte	0x5
 5949 0ce5 CF08     		.byte	0x3
 5950 0ce7 BB0C0000 		.4byte	xDelayedTaskList2
 5951 0ceb 02       		.uleb128 0x1c
 5952 0cec 91       		.4byte	.LASF132
 5953 0ced 74       		.byte	0x1
 5954 0cee 13       		.byte	0x8a
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 146


 5955 0cef 64030000 		.4byte	0xd52
 5956 0cf3 01       		.byte	0x5
 5957 0cf4 D108     		.byte	0x3
 5958 0cf6 C00C0000 		.4byte	pxDelayedTaskList
 5959 0cfa 02       		.uleb128 0xd
 5960 0cfb 91       		.4byte	0x869
 5961 0cfc 78       		.uleb128 0x1c
 5962 0cfd 00       		.4byte	.LASF133
 5963 0cfe 0F       		.byte	0x1
 5964 0cff 9A010000 		.byte	0x8b
 5965 0d03 0E0D0000 		.4byte	0xd52
 5966 0d07 10       		.byte	0x5
 5967 0d08 6B000000 		.byte	0x3
 5968 0d0c 03       		.4byte	pxOverflowDelayedTaskList
 5969 0d0d 00       		.uleb128 0x1c
 5970 0d0e 1C       		.4byte	.LASF134
 5971 0d0f BF070000 		.byte	0x1
 5972 0d13 01       		.byte	0x8c
 5973 0d14 87       		.4byte	0x19a
 5974 0d15 FE0C0000 		.byte	0x5
 5975 0d19 05       		.byte	0x3
 5976 0d1a 03       		.4byte	xPendingReadyList
 5977 0d1b 34000000 		.uleb128 0x1c
 5978 0d1f 1C       		.4byte	.LASF135
 5979 0d20 E8070000 		.byte	0x1
 5980 0d24 01       		.byte	0x90
 5981 0d25 88       		.4byte	0xd8a
 5982 0d26 9A010000 		.byte	0x5
 5983 0d2a 05       		.byte	0x3
 5984 0d2b 03       		.4byte	xTasksWaitingTermination
 5985 0d2c 84000000 		.uleb128 0xd
 5986 0d30 1C       		.4byte	0x19a
 5987 0d31 FA070000 		.uleb128 0x1c
 5988 0d35 01       		.4byte	.LASF136
 5989 0d36 89       		.byte	0x1
 5990 0d37 9A010000 		.byte	0x91
 5991 0d3b 05       		.4byte	0x185
 5992 0d3c 03       		.byte	0x5
 5993 0d3d 98000000 		.byte	0x3
 5994 0d41 1C       		.4byte	uxTasksDeleted
 5995 0d42 BD080000 		.uleb128 0x1c
 5996 0d46 01       		.4byte	.LASF137
 5997 0d47 8A       		.byte	0x1
 5998 0d48 520D0000 		.byte	0x97
 5999 0d4c 05       		.4byte	0x19a
 6000 0d4d 03       		.byte	0x5
 6001 0d4e AC000000 		.byte	0x3
 6002 0d52 0D       		.4byte	xSuspendedTaskList
 6003 0d53 69080000 		.uleb128 0x1c
 6004 0d57 1C       		.4byte	.LASF138
 6005 0d58 5F040000 		.byte	0x1
 6006 0d5c 01       		.byte	0x9c
 6007 0d5d 8B       		.4byte	0x185
 6008 0d5e 520D0000 		.byte	0x5
 6009 0d62 05       		.byte	0x3
 6010 0d63 03       		.4byte	uxCurrentNumberOfTasks
 6011 0d64 B0000000 		.uleb128 0x1c
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 147


 6012 0d68 1C       		.4byte	.LASF139
 6013 0d69 BF040000 		.byte	0x1
 6014 0d6d 01       		.byte	0x9d
 6015 0d6e 8C       		.4byte	0xdd3
 6016 0d6f 9A010000 		.byte	0x5
 6017 0d73 05       		.byte	0x3
 6018 0d74 03       		.4byte	xTickCount
 6019 0d75 B4000000 		.uleb128 0xd
 6020 0d79 1C       		.4byte	0x94
 6021 0d7a D1040000 		.uleb128 0x1c
 6022 0d7e 01       		.4byte	.LASF140
 6023 0d7f 90       		.byte	0x1
 6024 0d80 8A0D0000 		.byte	0x9e
 6025 0d84 05       		.4byte	0x25
 6026 0d85 03       		.byte	0x5
 6027 0d86 C8000000 		.byte	0x3
 6028 0d8a 0D       		.4byte	uxTopUsedPriority
 6029 0d8b 9A010000 		.uleb128 0x1c
 6030 0d8f 1C       		.4byte	.LASF141
 6031 0d90 6B000000 		.byte	0x1
 6032 0d94 01       		.byte	0x9f
 6033 0d95 91       		.4byte	0x185
 6034 0d96 85010000 		.byte	0x5
 6035 0d9a 05       		.byte	0x3
 6036 0d9b 03       		.4byte	uxTopReadyPriority
 6037 0d9c 04000000 		.uleb128 0x1c
 6038 0da0 1C       		.4byte	.LASF142
 6039 0da1 7A000000 		.byte	0x1
 6040 0da5 01       		.byte	0xa0
 6041 0da6 97       		.4byte	0xe0b
 6042 0da7 9A010000 		.byte	0x5
 6043 0dab 05       		.byte	0x3
 6044 0dac 03       		.4byte	xSchedulerRunning
 6045 0dad DC000000 		.uleb128 0xd
 6046 0db1 1C       		.4byte	0x64
 6047 0db2 44000000 		.uleb128 0x1c
 6048 0db6 01       		.4byte	.LASF143
 6049 0db7 9C       		.byte	0x1
 6050 0db8 85010000 		.byte	0xa1
 6051 0dbc 05       		.4byte	0x185
 6052 0dbd 03       		.byte	0x5
 6053 0dbe 08000000 		.byte	0x3
 6054 0dc2 1C       		.4byte	uxSchedulerSuspended
 6055 0dc3 23080000 		.uleb128 0x1c
 6056 0dc7 01       		.4byte	.LASF144
 6057 0dc8 9D       		.byte	0x1
 6058 0dc9 D30D0000 		.byte	0xa2
 6059 0dcd 05       		.4byte	0x185
 6060 0dce 03       		.byte	0x5
 6061 0dcf 0C000000 		.byte	0x3
 6062 0dd3 0D       		.4byte	uxMissedTicks
 6063 0dd4 94000000 		.uleb128 0x1c
 6064 0dd8 1C       		.4byte	.LASF145
 6065 0dd9 C7010000 		.byte	0x1
 6066 0ddd 01       		.byte	0xa3
 6067 0dde 9E       		.4byte	0xe0b
 6068 0ddf 25000000 		.byte	0x5
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 148


 6069 0de3 05       		.byte	0x3
 6070 0de4 03       		.4byte	xMissedYield
 6071 0de5 10000000 		.uleb128 0x1c
 6072 0de9 1C       		.4byte	.LASF146
 6073 0dea 31050000 		.byte	0x1
 6074 0dee 01       		.byte	0xa4
 6075 0def 9F       		.4byte	0xe0b
 6076 0df0 85010000 		.byte	0x5
 6077 0df4 05       		.byte	0x3
 6078 0df5 03       		.4byte	xNumOfOverflows
 6079 0df6 14000000 		.uleb128 0x1c
 6080 0dfa 1C       		.4byte	.LASF147
 6081 0dfb 2C060000 		.byte	0x1
 6082 0dff 01       		.byte	0xa5
 6083 0e00 A0       		.4byte	0x25
 6084 0e01 0B0E0000 		.byte	0x5
 6085 0e05 05       		.byte	0x3
 6086 0e06 03       		.4byte	uxTaskNumber
 6087 0e07 18000000 		.uleb128 0x1c
 6088 0e0b 0D       		.4byte	.LASF148
 6089 0e0c 64000000 		.byte	0x1
 6090 0e10 1C       		.byte	0xc5
 6091 0e11 9B020000 		.4byte	0xe76
 6092 0e15 01       		.byte	0x5
 6093 0e16 A1       		.byte	0x3
 6094 0e17 85010000 		.4byte	pcTraceBuffer
 6095 0e1b 05       		.uleb128 0xd
 6096 0e1c 03       		.4byte	0xe7b
 6097 0e1d 1C000000 		.uleb128 0x7
 6098 0e21 1C       		.byte	0x4
 6099 0e22 3B080000 		.4byte	0xe81
 6100 0e26 01       		.uleb128 0xd
 6101 0e27 A2       		.4byte	0x2c
 6102 0e28 85010000 		.uleb128 0x1c
 6103 0e2c 05       		.4byte	.LASF149
 6104 0e2d 03       		.byte	0x1
 6105 0e2e 20000000 		.byte	0xc6
 6106 0e32 1C       		.4byte	0x7ab
 6107 0e33 F8030000 		.byte	0x5
 6108 0e37 01       		.byte	0x3
 6109 0e38 A3       		.4byte	pcTraceBufferStart
 6110 0e39 0B0E0000 		.uleb128 0x1c
 6111 0e3d 05       		.4byte	.LASF150
 6112 0e3e 03       		.byte	0x1
 6113 0e3f 24000000 		.byte	0xc7
 6114 0e43 1C       		.4byte	0x7ab
 6115 0e44 0C080000 		.byte	0x5
 6116 0e48 01       		.byte	0x3
 6117 0e49 A4       		.4byte	pcTraceBufferEnd
 6118 0e4a 0B0E0000 		.uleb128 0x1c
 6119 0e4e 05       		.4byte	.LASF151
 6120 0e4f 03       		.byte	0x1
 6121 0e50 28000000 		.byte	0xc8
 6122 0e54 1C       		.4byte	0x64
 6123 0e55 AB070000 		.byte	0x5
 6124 0e59 01       		.byte	0x3
 6125 0e5a A5       		.4byte	xTracing
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 149


 6126 0e5b 25000000 		.uleb128 0x1c
 6127 0e5f 05       		.4byte	.LASF152
 6128 0e60 03       		.byte	0x1
 6129 0e61 2C000000 		.byte	0xc9
 6130 0e65 1C       		.4byte	0x25
 6131 0e66 05040000 		.byte	0x5
 6132 0e6a 01       		.byte	0x3
 6133 0e6b C5       		.4byte	uxPreviousTask
 6134 0e6c 760E0000 		.uleb128 0xf
 6135 0e70 05       		.4byte	0x70
 6136 0e71 03       		.4byte	0xeda
 6137 0e72 F0000000 		.uleb128 0x10
 6138 0e76 0D       		.4byte	0x6b
 6139 0e77 7B0E0000 		.byte	0x31
 6140 0e7b 07       		.byte	0x0
 6141 0e7c 04       		.uleb128 0x1c
 6142 0e7d 810E0000 		.4byte	.LASF153
 6143 0e81 0D       		.byte	0x1
 6144 0e82 2C000000 		.byte	0xca
 6145 0e86 1C       		.4byte	0xeca
 6146 0e87 1E050000 		.byte	0x5
 6147 0e8b 01       		.byte	0x3
 6148 0e8c C6       		.4byte	pcStatusString
 6149 0e8d AB070000 		.uleb128 0x1d
 6150 0e91 05       		.4byte	.LASF158
 6151 0e92 03       		.byte	0x1
 6152 0e93 F4000000 		.byte	0x83
 6153 0e97 1C       		.4byte	0xefd
 6154 0e98 83020000 		.byte	0x1
 6155 0e9c 01       		.byte	0x5
 6156 0e9d C7       		.byte	0x3
 6157 0e9e AB070000 		.4byte	pxCurrentTCB
 6158 0ea2 05       		.uleb128 0xd
 6159 0ea3 03       		.4byte	0x3be
 6160 0ea4 F8000000 		.byte	0x0
 6161 0ea8 1C       		.section	.debug_abbrev
 6162 0ea9 62020000 		.uleb128 0x1
 6163 0ead 01       		.uleb128 0x11
 6164 0eae C8       		.byte	0x1
 6165 0eaf 64000000 		.uleb128 0x25
 6166 0eb3 05       		.uleb128 0xe
 6167 0eb4 03       		.uleb128 0x13
 6168 0eb5 30000000 		.uleb128 0xb
 6169 0eb9 1C       		.uleb128 0x3
 6170 0eba 79030000 		.uleb128 0xe
 6171 0ebe 01       		.uleb128 0x1b
 6172 0ebf C9       		.uleb128 0xe
 6173 0ec0 25000000 		.uleb128 0x11
 6174 0ec4 05       		.uleb128 0x1
 6175 0ec5 03       		.uleb128 0x12
 6176 0ec6 00000000 		.uleb128 0x1
 6177 0eca 0F       		.uleb128 0x10
 6178 0ecb 70000000 		.uleb128 0x6
 6179 0ecf DA0E0000 		.byte	0x0
 6180 0ed3 10       		.byte	0x0
 6181 0ed4 6B000000 		.uleb128 0x2
 6182 0ed8 31       		.uleb128 0x24
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 150


 6183 0ed9 00       		.byte	0x0
 6184 0eda 1C       		.uleb128 0xb
 6185 0edb BA050000 		.uleb128 0xb
 6186 0edf 01       		.uleb128 0x3e
 6187 0ee0 CA       		.uleb128 0xb
 6188 0ee1 CA0E0000 		.uleb128 0x3
 6189 0ee5 05       		.uleb128 0xe
 6190 0ee6 03       		.byte	0x0
 6191 0ee7 FC000000 		.byte	0x0
 6192 0eeb 1D       		.uleb128 0x3
 6193 0eec 94030000 		.uleb128 0x24
 6194 0ef0 01       		.byte	0x0
 6195 0ef1 83       		.uleb128 0xb
 6196 0ef2 FD0E0000 		.uleb128 0xb
 6197 0ef6 01       		.uleb128 0x3e
 6198 0ef7 05       		.uleb128 0xb
 6199 0ef8 03       		.uleb128 0x3
 6200 0ef9 00000000 		.uleb128 0x8
 6201 0efd 0D       		.byte	0x0
 6202 0efe BE030000 		.byte	0x0
 6203 0f02 00       		.uleb128 0x4
 6204              		.uleb128 0x24
 6205 0000 01       		.byte	0x0
 6206 0001 11       		.uleb128 0xb
 6207 0002 01       		.uleb128 0xb
 6208 0003 25       		.uleb128 0x3e
 6209 0004 0E       		.uleb128 0xb
 6210 0005 13       		.byte	0x0
 6211 0006 0B       		.byte	0x0
 6212 0007 03       		.uleb128 0x5
 6213 0008 0E       		.uleb128 0xf
 6214 0009 1B       		.byte	0x0
 6215 000a 0E       		.uleb128 0xb
 6216 000b 11       		.uleb128 0xb
 6217 000c 01       		.byte	0x0
 6218 000d 12       		.byte	0x0
 6219 000e 01       		.uleb128 0x6
 6220 000f 10       		.uleb128 0x16
 6221 0010 06       		.byte	0x0
 6222 0011 00       		.uleb128 0x3
 6223 0012 00       		.uleb128 0xe
 6224 0013 02       		.uleb128 0x3a
 6225 0014 24       		.uleb128 0xb
 6226 0015 00       		.uleb128 0x3b
 6227 0016 0B       		.uleb128 0xb
 6228 0017 0B       		.uleb128 0x49
 6229 0018 3E       		.uleb128 0x13
 6230 0019 0B       		.byte	0x0
 6231 001a 03       		.byte	0x0
 6232 001b 0E       		.uleb128 0x7
 6233 001c 00       		.uleb128 0xf
 6234 001d 00       		.byte	0x0
 6235 001e 03       		.uleb128 0xb
 6236 001f 24       		.uleb128 0xb
 6237 0020 00       		.uleb128 0x49
 6238 0021 0B       		.uleb128 0x13
 6239 0022 0B       		.byte	0x0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 151


 6240 0023 3E       		.byte	0x0
 6241 0024 0B       		.uleb128 0x8
 6242 0025 03       		.uleb128 0x15
 6243 0026 08       		.byte	0x1
 6244 0027 00       		.uleb128 0x27
 6245 0028 00       		.uleb128 0xc
 6246 0029 04       		.uleb128 0x1
 6247 002a 24       		.uleb128 0x13
 6248 002b 00       		.byte	0x0
 6249 002c 0B       		.byte	0x0
 6250 002d 0B       		.uleb128 0x9
 6251 002e 3E       		.uleb128 0x5
 6252 002f 0B       		.byte	0x0
 6253 0030 00       		.uleb128 0x49
 6254 0031 00       		.uleb128 0x13
 6255 0032 05       		.byte	0x0
 6256 0033 0F       		.byte	0x0
 6257 0034 00       		.uleb128 0xa
 6258 0035 0B       		.uleb128 0x13
 6259 0036 0B       		.byte	0x1
 6260 0037 00       		.uleb128 0x3
 6261 0038 00       		.uleb128 0xe
 6262 0039 06       		.uleb128 0xb
 6263 003a 16       		.uleb128 0xb
 6264 003b 00       		.uleb128 0x3a
 6265 003c 03       		.uleb128 0xb
 6266 003d 0E       		.uleb128 0x3b
 6267 003e 3A       		.uleb128 0xb
 6268 003f 0B       		.uleb128 0x1
 6269 0040 3B       		.uleb128 0x13
 6270 0041 0B       		.byte	0x0
 6271 0042 49       		.byte	0x0
 6272 0043 13       		.uleb128 0xb
 6273 0044 00       		.uleb128 0xd
 6274 0045 00       		.byte	0x0
 6275 0046 07       		.uleb128 0x3
 6276 0047 0F       		.uleb128 0xe
 6277 0048 00       		.uleb128 0x3a
 6278 0049 0B       		.uleb128 0xb
 6279 004a 0B       		.uleb128 0x3b
 6280 004b 49       		.uleb128 0xb
 6281 004c 13       		.uleb128 0x49
 6282 004d 00       		.uleb128 0x13
 6283 004e 00       		.uleb128 0x38
 6284 004f 08       		.uleb128 0xa
 6285 0050 15       		.byte	0x0
 6286 0051 01       		.byte	0x0
 6287 0052 27       		.uleb128 0xc
 6288 0053 0C       		.uleb128 0x35
 6289 0054 01       		.byte	0x0
 6290 0055 13       		.uleb128 0x3
 6291 0056 00       		.uleb128 0xe
 6292 0057 00       		.uleb128 0x49
 6293 0058 09       		.uleb128 0x13
 6294 0059 05       		.byte	0x0
 6295 005a 00       		.byte	0x0
 6296 005b 49       		.uleb128 0xd
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 152


 6297 005c 13       		.uleb128 0x35
 6298 005d 00       		.byte	0x0
 6299 005e 00       		.uleb128 0x49
 6300 005f 0A       		.uleb128 0x13
 6301 0060 13       		.byte	0x0
 6302 0061 01       		.byte	0x0
 6303 0062 03       		.uleb128 0xe
 6304 0063 0E       		.uleb128 0x26
 6305 0064 0B       		.byte	0x0
 6306 0065 0B       		.uleb128 0x49
 6307 0066 3A       		.uleb128 0x13
 6308 0067 0B       		.byte	0x0
 6309 0068 3B       		.byte	0x0
 6310 0069 0B       		.uleb128 0xf
 6311 006a 01       		.uleb128 0x1
 6312 006b 13       		.byte	0x1
 6313 006c 00       		.uleb128 0x49
 6314 006d 00       		.uleb128 0x13
 6315 006e 0B       		.uleb128 0x1
 6316 006f 0D       		.uleb128 0x13
 6317 0070 00       		.byte	0x0
 6318 0071 03       		.byte	0x0
 6319 0072 0E       		.uleb128 0x10
 6320 0073 3A       		.uleb128 0x21
 6321 0074 0B       		.byte	0x0
 6322 0075 3B       		.uleb128 0x49
 6323 0076 0B       		.uleb128 0x13
 6324 0077 49       		.uleb128 0x2f
 6325 0078 13       		.uleb128 0xb
 6326 0079 38       		.byte	0x0
 6327 007a 0A       		.byte	0x0
 6328 007b 00       		.uleb128 0x11
 6329 007c 00       		.uleb128 0x2e
 6330 007d 0C       		.byte	0x1
 6331 007e 35       		.uleb128 0x3f
 6332 007f 00       		.uleb128 0xc
 6333 0080 03       		.uleb128 0x3
 6334 0081 0E       		.uleb128 0xe
 6335 0082 49       		.uleb128 0x3a
 6336 0083 13       		.uleb128 0xb
 6337 0084 00       		.uleb128 0x3b
 6338 0085 00       		.uleb128 0x5
 6339 0086 0D       		.uleb128 0x27
 6340 0087 35       		.uleb128 0xc
 6341 0088 00       		.uleb128 0x49
 6342 0089 49       		.uleb128 0x13
 6343 008a 13       		.uleb128 0x11
 6344 008b 00       		.uleb128 0x1
 6345 008c 00       		.uleb128 0x12
 6346 008d 0E       		.uleb128 0x1
 6347 008e 26       		.uleb128 0x40
 6348 008f 00       		.uleb128 0x6
 6349 0090 49       		.uleb128 0x1
 6350 0091 13       		.uleb128 0x13
 6351 0092 00       		.byte	0x0
 6352 0093 00       		.byte	0x0
 6353 0094 0F       		.uleb128 0x12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 153


 6354 0095 01       		.uleb128 0x5
 6355 0096 01       		.byte	0x0
 6356 0097 49       		.uleb128 0x3
 6357 0098 13       		.uleb128 0xe
 6358 0099 01       		.uleb128 0x3a
 6359 009a 13       		.uleb128 0xb
 6360 009b 00       		.uleb128 0x3b
 6361 009c 00       		.uleb128 0x5
 6362 009d 10       		.uleb128 0x49
 6363 009e 21       		.uleb128 0x13
 6364 009f 00       		.uleb128 0x2
 6365 00a0 49       		.uleb128 0xa
 6366 00a1 13       		.byte	0x0
 6367 00a2 2F       		.byte	0x0
 6368 00a3 0B       		.uleb128 0x13
 6369 00a4 00       		.uleb128 0x34
 6370 00a5 00       		.byte	0x0
 6371 00a6 11       		.uleb128 0x3
 6372 00a7 2E       		.uleb128 0xe
 6373 00a8 01       		.uleb128 0x3a
 6374 00a9 3F       		.uleb128 0xb
 6375 00aa 0C       		.uleb128 0x3b
 6376 00ab 03       		.uleb128 0x5
 6377 00ac 0E       		.uleb128 0x49
 6378 00ad 3A       		.uleb128 0x13
 6379 00ae 0B       		.uleb128 0x2
 6380 00af 3B       		.uleb128 0xa
 6381 00b0 05       		.byte	0x0
 6382 00b1 27       		.byte	0x0
 6383 00b2 0C       		.uleb128 0x14
 6384 00b3 49       		.uleb128 0xb
 6385 00b4 13       		.byte	0x1
 6386 00b5 11       		.uleb128 0x11
 6387 00b6 01       		.uleb128 0x1
 6388 00b7 12       		.uleb128 0x12
 6389 00b8 01       		.uleb128 0x1
 6390 00b9 40       		.byte	0x0
 6391 00ba 06       		.byte	0x0
 6392 00bb 01       		.uleb128 0x15
 6393 00bc 13       		.uleb128 0x2e
 6394 00bd 00       		.byte	0x1
 6395 00be 00       		.uleb128 0x3f
 6396 00bf 12       		.uleb128 0xc
 6397 00c0 05       		.uleb128 0x3
 6398 00c1 00       		.uleb128 0xe
 6399 00c2 03       		.uleb128 0x3a
 6400 00c3 0E       		.uleb128 0xb
 6401 00c4 3A       		.uleb128 0x3b
 6402 00c5 0B       		.uleb128 0x5
 6403 00c6 3B       		.uleb128 0x27
 6404 00c7 05       		.uleb128 0xc
 6405 00c8 49       		.uleb128 0x11
 6406 00c9 13       		.uleb128 0x1
 6407 00ca 02       		.uleb128 0x12
 6408 00cb 0A       		.uleb128 0x1
 6409 00cc 00       		.uleb128 0x40
 6410 00cd 00       		.uleb128 0x6
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 154


 6411 00ce 13       		.uleb128 0x1
 6412 00cf 34       		.uleb128 0x13
 6413 00d0 00       		.byte	0x0
 6414 00d1 03       		.byte	0x0
 6415 00d2 0E       		.uleb128 0x16
 6416 00d3 3A       		.uleb128 0x2e
 6417 00d4 0B       		.byte	0x0
 6418 00d5 3B       		.uleb128 0x3f
 6419 00d6 05       		.uleb128 0xc
 6420 00d7 49       		.uleb128 0x3
 6421 00d8 13       		.uleb128 0xe
 6422 00d9 02       		.uleb128 0x3a
 6423 00da 0A       		.uleb128 0xb
 6424 00db 00       		.uleb128 0x3b
 6425 00dc 00       		.uleb128 0x5
 6426 00dd 14       		.uleb128 0x27
 6427 00de 0B       		.uleb128 0xc
 6428 00df 01       		.uleb128 0x11
 6429 00e0 11       		.uleb128 0x1
 6430 00e1 01       		.uleb128 0x12
 6431 00e2 12       		.uleb128 0x1
 6432 00e3 01       		.uleb128 0x40
 6433 00e4 00       		.uleb128 0x6
 6434 00e5 00       		.byte	0x0
 6435 00e6 15       		.byte	0x0
 6436 00e7 2E       		.uleb128 0x17
 6437 00e8 01       		.uleb128 0x2e
 6438 00e9 3F       		.byte	0x0
 6439 00ea 0C       		.uleb128 0x3f
 6440 00eb 03       		.uleb128 0xc
 6441 00ec 0E       		.uleb128 0x3
 6442 00ed 3A       		.uleb128 0xe
 6443 00ee 0B       		.uleb128 0x3a
 6444 00ef 3B       		.uleb128 0xb
 6445 00f0 05       		.uleb128 0x3b
 6446 00f1 27       		.uleb128 0x5
 6447 00f2 0C       		.uleb128 0x27
 6448 00f3 11       		.uleb128 0xc
 6449 00f4 01       		.uleb128 0x11
 6450 00f5 12       		.uleb128 0x1
 6451 00f6 01       		.uleb128 0x12
 6452 00f7 40       		.uleb128 0x1
 6453 00f8 06       		.uleb128 0x40
 6454 00f9 01       		.uleb128 0xa
 6455 00fa 13       		.byte	0x0
 6456 00fb 00       		.byte	0x0
 6457 00fc 00       		.uleb128 0x18
 6458 00fd 16       		.uleb128 0x2e
 6459 00fe 2E       		.byte	0x0
 6460 00ff 00       		.uleb128 0x3f
 6461 0100 3F       		.uleb128 0xc
 6462 0101 0C       		.uleb128 0x3
 6463 0102 03       		.uleb128 0xe
 6464 0103 0E       		.uleb128 0x3a
 6465 0104 3A       		.uleb128 0xb
 6466 0105 0B       		.uleb128 0x3b
 6467 0106 3B       		.uleb128 0x5
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 155


 6468 0107 05       		.uleb128 0x27
 6469 0108 27       		.uleb128 0xc
 6470 0109 0C       		.uleb128 0x49
 6471 010a 11       		.uleb128 0x13
 6472 010b 01       		.uleb128 0x11
 6473 010c 12       		.uleb128 0x1
 6474 010d 01       		.uleb128 0x12
 6475 010e 40       		.uleb128 0x1
 6476 010f 06       		.uleb128 0x40
 6477 0110 00       		.uleb128 0xa
 6478 0111 00       		.byte	0x0
 6479 0112 17       		.byte	0x0
 6480 0113 2E       		.uleb128 0x19
 6481 0114 00       		.uleb128 0xb
 6482 0115 3F       		.byte	0x1
 6483 0116 0C       		.uleb128 0x11
 6484 0117 03       		.uleb128 0x1
 6485 0118 0E       		.uleb128 0x12
 6486 0119 3A       		.uleb128 0x1
 6487 011a 0B       		.uleb128 0x1
 6488 011b 3B       		.uleb128 0x13
 6489 011c 05       		.byte	0x0
 6490 011d 27       		.byte	0x0
 6491 011e 0C       		.uleb128 0x1a
 6492 011f 11       		.uleb128 0x2e
 6493 0120 01       		.byte	0x1
 6494 0121 12       		.uleb128 0x3
 6495 0122 01       		.uleb128 0xe
 6496 0123 40       		.uleb128 0x3a
 6497 0124 0A       		.uleb128 0xb
 6498 0125 00       		.uleb128 0x3b
 6499 0126 00       		.uleb128 0x5
 6500 0127 18       		.uleb128 0x27
 6501 0128 2E       		.uleb128 0xc
 6502 0129 00       		.uleb128 0x11
 6503 012a 3F       		.uleb128 0x1
 6504 012b 0C       		.uleb128 0x12
 6505 012c 03       		.uleb128 0x1
 6506 012d 0E       		.uleb128 0x40
 6507 012e 3A       		.uleb128 0x6
 6508 012f 0B       		.uleb128 0x1
 6509 0130 3B       		.uleb128 0x13
 6510 0131 05       		.byte	0x0
 6511 0132 27       		.byte	0x0
 6512 0133 0C       		.uleb128 0x1b
 6513 0134 49       		.uleb128 0x2e
 6514 0135 13       		.byte	0x1
 6515 0136 11       		.uleb128 0x3
 6516 0137 01       		.uleb128 0xe
 6517 0138 12       		.uleb128 0x3a
 6518 0139 01       		.uleb128 0xb
 6519 013a 40       		.uleb128 0x3b
 6520 013b 0A       		.uleb128 0x5
 6521 013c 00       		.uleb128 0x27
 6522 013d 00       		.uleb128 0xc
 6523 013e 19       		.uleb128 0x49
 6524 013f 0B       		.uleb128 0x13
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 156


 6525 0140 01       		.uleb128 0x11
 6526 0141 11       		.uleb128 0x1
 6527 0142 01       		.uleb128 0x12
 6528 0143 12       		.uleb128 0x1
 6529 0144 01       		.uleb128 0x40
 6530 0145 01       		.uleb128 0x6
 6531 0146 13       		.uleb128 0x1
 6532 0147 00       		.uleb128 0x13
 6533 0148 00       		.byte	0x0
 6534 0149 1A       		.byte	0x0
 6535 014a 2E       		.uleb128 0x1c
 6536 014b 01       		.uleb128 0x34
 6537 014c 03       		.byte	0x0
 6538 014d 0E       		.uleb128 0x3
 6539 014e 3A       		.uleb128 0xe
 6540 014f 0B       		.uleb128 0x3a
 6541 0150 3B       		.uleb128 0xb
 6542 0151 05       		.uleb128 0x3b
 6543 0152 27       		.uleb128 0xb
 6544 0153 0C       		.uleb128 0x49
 6545 0154 11       		.uleb128 0x13
 6546 0155 01       		.uleb128 0x2
 6547 0156 12       		.uleb128 0xa
 6548 0157 01       		.byte	0x0
 6549 0158 40       		.byte	0x0
 6550 0159 06       		.uleb128 0x1d
 6551 015a 01       		.uleb128 0x34
 6552 015b 13       		.byte	0x0
 6553 015c 00       		.uleb128 0x3
 6554 015d 00       		.uleb128 0xe
 6555 015e 1B       		.uleb128 0x3a
 6556 015f 2E       		.uleb128 0xb
 6557 0160 01       		.uleb128 0x3b
 6558 0161 03       		.uleb128 0xb
 6559 0162 0E       		.uleb128 0x49
 6560 0163 3A       		.uleb128 0x13
 6561 0164 0B       		.uleb128 0x3f
 6562 0165 3B       		.uleb128 0xc
 6563 0166 05       		.uleb128 0x2
 6564 0167 27       		.uleb128 0xa
 6565 0168 0C       		.byte	0x0
 6566 0169 49       		.byte	0x0
 6567 016a 13       		.byte	0x0
 6568 016b 11       		.section	.debug_pubnames,"",%progbits
 6569 016c 01       		.4byte	0x29f
 6570 016d 12       		.2byte	0x2
 6571 016e 01       		.4byte	.Ldebug_info0
 6572 016f 40       		.4byte	0xf03
 6573 0170 06       		.4byte	0x2da
 6574 0171 01       		.ascii	"xTaskGenericCreate\000"
 6575 0172 13       		.4byte	0x3c4
 6576 0173 00       		.ascii	"vTaskDelete\000"
 6577 0174 00       		.4byte	0x3fd
 6578 0175 1C       		.ascii	"vTaskDelayUntil\000"
 6579 0176 34       		.4byte	0x46e
 6580 0177 00       		.ascii	"vTaskDelay\000"
 6581 0178 03       		.4byte	0x4b6
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 157


 6582 0179 0E       		.ascii	"uxTaskPriorityGet\000"
 6583 017a 3A       		.4byte	0x502
 6584 017b 0B       		.ascii	"vTaskPrioritySet\000"
 6585 017c 3B       		.4byte	0x568
 6586 017d 0B       		.ascii	"vTaskSuspend\000"
 6587 017e 49       		.4byte	0x5a1
 6588 017f 13       		.ascii	"xTaskIsTaskSuspended\000"
 6589 0180 02       		.4byte	0x5fd
 6590 0181 0A       		.ascii	"vTaskResume\000"
 6591 0182 00       		.4byte	0x636
 6592 0183 00       		.ascii	"xTaskResumeFromISR\000"
 6593 0184 1D       		.4byte	0x682
 6594 0185 34       		.ascii	"vTaskStartScheduler\000"
 6595 0186 00       		.4byte	0x6ac
 6596 0187 03       		.ascii	"vTaskEndScheduler\000"
 6597 0188 0E       		.4byte	0x6c2
 6598 0189 3A       		.ascii	"vTaskSuspendAll\000"
 6599 018a 0B       		.4byte	0x6d6
 6600 018b 3B       		.ascii	"xTaskResumeAll\000"
 6601 018c 0B       		.4byte	0x72c
 6602 018d 49       		.ascii	"xTaskGetTickCount\000"
 6603 018e 13       		.4byte	0x75a
 6604 018f 3F       		.ascii	"uxTaskGetNumberOfTasks\000"
 6605 0190 0C       		.4byte	0x772
 6606 0191 02       		.ascii	"vTaskList\000"
 6607 0192 0A       		.4byte	0x7b1
 6608 0193 00       		.ascii	"vTaskStartTrace\000"
 6609 0194 00       		.4byte	0x7ea
 6610 0195 00       		.ascii	"ulTaskEndTrace\000"
 6611              		.4byte	0x818
 6612 0000 9F020000 		.ascii	"vTaskIncrementTick\000"
 6613 0004 0200     		.4byte	0x86f
 6614 0006 00000000 		.ascii	"vTaskSwitchContext\000"
 6615 000a 030F0000 		.4byte	0x8a8
 6616 000e DA020000 		.ascii	"vTaskPlaceOnEventList\000"
 6617 0012 78546173 		.4byte	0x900
 6617      6B47656E 
 6617      65726963 
 6617      43726561 
 6617      746500
 6618 0025 C4030000 		.ascii	"xTaskRemoveFromEventList\000"
 6619 0029 76546173 		.4byte	0x94c
 6619      6B44656C 
 6619      65746500 
 6620 0035 FD030000 		.ascii	"vTaskSetTimeOutState\000"
 6621 0039 76546173 		.4byte	0x981
 6621      6B44656C 
 6621      6179556E 
 6621      74696C00 
 6622 0049 6E040000 		.ascii	"xTaskCheckForTimeOut\000"
 6623 004d 76546173 		.4byte	0x9cd
 6623      6B44656C 
 6623      617900
 6624 0058 B6040000 		.ascii	"vTaskMissedYield\000"
 6625 005c 75785461 		.4byte	0xc54
 6625      736B5072 
 6625      696F7269 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 158


 6625      74794765 
 6625      7400
 6626 006e 02050000 		.ascii	"xTaskGetCurrentTaskHandle\000"
 6627 0072 76546173 		.4byte	0xc82
 6627      6B507269 
 6627      6F726974 
 6627      79536574 
 6627      00
 6628 0083 68050000 		.ascii	"vTaskPriorityInherit\000"
 6629 0087 76546173 		.4byte	0xcc5
 6629      6B537573 
 6629      70656E64 
 6629      00
 6630 0094 A1050000 		.ascii	"vTaskPriorityDisinherit\000"
 6631 0098 78546173 		.4byte	0xeeb
 6631      6B497354 
 6631      61736B53 
 6631      75737065 
 6631      6E646564 
 6632 00ad FD050000 		.ascii	"pxCurrentTCB\000"
 6633 00b1 76546173 		.4byte	0x0
 6633      6B526573 
 6633      756D6500 
 6634 00bd 36060000 		.section	.debug_aranges,"",%progbits
 6635 00c1 78546173 		.4byte	0x1c
 6635      6B526573 
 6635      756D6546 
 6635      726F6D49 
 6635      535200
 6636 00d4 82060000 		.2byte	0x2
 6637 00d8 76546173 		.4byte	.Ldebug_info0
 6637      6B537461 
 6637      72745363 
 6637      68656475 
 6637      6C657200 
 6638 00ec AC060000 		.byte	0x4
 6639 00f0 76546173 		.byte	0x0
 6639      6B456E64 
 6639      53636865 
 6639      64756C65 
 6639      7200
 6640 0102 C2060000 		.2byte	0x0
 6641 0106 76546173 		.2byte	0x0
 6641      6B537573 
 6641      70656E64 
 6641      416C6C00 
 6642 0116 D6060000 		.4byte	.Ltext0
 6643 011a 78546173 		.4byte	.Letext0-.Ltext0
 6643      6B526573 
 6643      756D6541 
 6643      6C6C00
 6644 0129 2C070000 		.4byte	0x0
 6645 012d 78546173 		.4byte	0x0
 6645      6B476574 
 6645      5469636B 
 6645      436F756E 
 6645      7400
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 159


 6646 013f 5A070000 		.section	.debug_str,"MS",%progbits,1
 6647 0143 75785461 	.LASF110:
 6647      736B4765 
 6647      744E756D 
 6647      6265724F 
 6647      66546173 
 6648 015a 72070000 		.ascii	"prvInitialiseTCBVariables\000"
 6649 015e 76546173 	.LASF119:
 6649      6B4C6973 
 6649      7400
 6650 0168 B1070000 		.ascii	"usStackRemaining\000"
 6651 016c 76546173 	.LASF100:
 6651      6B537461 
 6651      72745472 
 6651      61636500 
 6652 017c EA070000 		.ascii	"pxEventList\000"
 6653 0180 756C5461 	.LASF74:
 6653      736B456E 
 6653      64547261 
 6653      636500
 6654 018f 18080000 		.ascii	"vTaskSuspend\000"
 6655 0193 76546173 	.LASF138:
 6655      6B496E63 
 6655      72656D65 
 6655      6E745469 
 6655      636B00
 6656 01a6 6F080000 		.ascii	"uxCurrentNumberOfTasks\000"
 6657 01aa 76546173 	.LASF90:
 6657      6B537769 
 6657      74636843 
 6657      6F6E7465 
 6657      787400
 6658 01bd A8080000 		.ascii	"vTaskStartTrace\000"
 6659 01c1 76546173 	.LASF136:
 6659      6B506C61 
 6659      63654F6E 
 6659      4576656E 
 6659      744C6973 
 6660 01d7 00090000 		.ascii	"uxTasksDeleted\000"
 6661 01db 78546173 	.LASF137:
 6661      6B52656D 
 6661      6F766546 
 6661      726F6D45 
 6661      76656E74 
 6662 01f4 4C090000 		.ascii	"xSuspendedTaskList\000"
 6663 01f8 76546173 	.LASF8:
 6663      6B536574 
 6663      54696D65 
 6663      4F757453 
 6663      74617465 
 6664 020d 81090000 		.ascii	"long int\000"
 6665 0211 78546173 	.LASF66:
 6665      6B436865 
 6665      636B466F 
 6665      7254696D 
 6665      654F7574 
 6666 0226 CD090000 		.ascii	"xTaskGenericCreate\000"
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 160


 6667 022a 76546173 	.LASF7:
 6667      6B4D6973 
 6667      73656459 
 6667      69656C64 
 6667      00
 6668 023b 540C0000 		.ascii	"long long unsigned int\000"
 6669 023f 78546173 	.LASF62:
 6669      6B476574 
 6669      43757272 
 6669      656E7454 
 6669      61736B48 
 6670 0259 820C0000 		.ascii	"xAlreadyYielded\000"
 6671 025d 76546173 	.LASF105:
 6671      6B507269 
 6671      6F726974 
 6671      79496E68 
 6671      65726974 
 6672 0272 C50C0000 		.ascii	"pxTimeOut\000"
 6673 0276 76546173 	.LASF24:
 6673      6B507269 
 6673      6F726974 
 6673      79446973 
 6673      696E6865 
 6674 028e EB0E0000 		.ascii	"xListEnd\000"
 6675 0292 70784375 	.LASF27:
 6675      7272656E 
 6675      74544342 
 6675      00
 6676 029f 00000000 		.ascii	"xTIME_OUT\000"
 6677              	.LASF19:
 6678 0000 1C000000 		.ascii	"xMINI_LIST_ITEM\000"
 6679 0004 0200     	.LASF113:
 6680 0006 00000000 		.ascii	"xListIsEmpty\000"
 6681 000a 04       	.LASF126:
 6682 000b 00       		.ascii	"vTaskPriorityInherit\000"
 6683 000c 0000     	.LASF79:
 6684 000e 0000     		.ascii	"pxTaskToResume\000"
 6685 0010 00000000 	.LASF6:
 6686 0014 9C1E0000 		.ascii	"long long int\000"
 6687 0018 00000000 	.LASF1:
 6688 001c 00000000 		.ascii	"signed char\000"
 6689              	.LASF101:
 6690              		.ascii	"xTicksToWait\000"
 6691 0000 70727649 	.LASF64:
 6691      6E697469 
 6691      616C6973 
 6691      65544342 
 6691      56617269 
 6692              		.ascii	"vTaskDelay\000"
 6693 001a 75735374 	.LASF26:
 6693      61636B52 
 6693      656D6169 
 6693      6E696E67 
 6693      00
 6694              		.ascii	"xTaskHandle\000"
 6695 002b 70784576 	.LASF20:
 6695      656E744C 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 161


 6695      69737400 
 6696              		.ascii	"xMiniListItem\000"
 6697 0037 76546173 	.LASF155:
 6697      6B537573 
 6697      70656E64 
 6697      00
 6698              		.ascii	"SRC/RTOS/tasks.c\000"
 6699 0044 75784375 	.LASF30:
 6699      7272656E 
 6699      744E756D 
 6699      6265724F 
 6699      66546173 
 6700              		.ascii	"xTimeOutType\000"
 6701 005b 76546173 	.LASF25:
 6701      6B537461 
 6701      72745472 
 6701      61636500 
 6702              		.ascii	"xList\000"
 6703 006b 75785461 	.LASF61:
 6703      736B7344 
 6703      656C6574 
 6703      656400
 6704              		.ascii	"xTimeToWake\000"
 6705 007a 78537573 	.LASF36:
 6705      70656E64 
 6705      65645461 
 6705      736B4C69 
 6705      737400
 6706              		.ascii	"tskTaskControlBlock\000"
 6707 008d 6C6F6E67 	.LASF54:
 6707      20696E74 
 6707      00
 6708              		.ascii	"pxNewTCB\000"
 6709 0096 78546173 	.LASF140:
 6709      6B47656E 
 6709      65726963 
 6709      43726561 
 6709      746500
 6710              		.ascii	"uxTopUsedPriority\000"
 6711 00a9 6C6F6E67 	.LASF120:
 6711      206C6F6E 
 6711      6720756E 
 6711      7369676E 
 6711      65642069 
 6712              		.ascii	"prvAllocateTCBAndStack\000"
 6713 00c0 78416C72 	.LASF3:
 6713      65616479 
 6713      5969656C 
 6713      64656400 
 6714              		.ascii	"short int\000"
 6715 00d0 70785469 	.LASF11:
 6715      6D654F75 
 6715      7400
 6716              		.ascii	"portTickType\000"
 6717 00da 784C6973 	.LASF118:
 6717      74456E64 
 6717      00
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 162


 6718              		.ascii	"pxFirstTCB\000"
 6719 00e3 7854494D 	.LASF48:
 6719      455F4F55 
 6719      5400
 6720              		.ascii	"usStackDepth\000"
 6721 00ed 784D494E 	.LASF51:
 6721      495F4C49 
 6721      53545F49 
 6721      54454D00 
 6722              		.ascii	"puxStackBuffer\000"
 6723 00fd 784C6973 	.LASF70:
 6723      74497345 
 6723      6D707479 
 6723      00
 6724              		.ascii	"vTaskPrioritySet\000"
 6725 010a 76546173 	.LASF28:
 6725      6B507269 
 6725      6F726974 
 6725      79496E68 
 6725      65726974 
 6726              		.ascii	"xOverflowCount\000"
 6727 011f 70785461 	.LASF81:
 6727      736B546F 
 6727      52657375 
 6727      6D6500
 6728              		.ascii	"vTaskStartScheduler\000"
 6729 012e 6C6F6E67 	.LASF151:
 6729      206C6F6E 
 6729      6720696E 
 6729      7400
 6730              		.ascii	"xTracing\000"
 6731 013c 7369676E 	.LASF43:
 6731      65642063 
 6731      68617200 
 6732              		.ascii	"uxTCBNumber\000"
 6733 0148 78546963 	.LASF154:
 6733      6B73546F 
 6733      57616974 
 6733      00
 6734              		.ascii	"GNU C 4.3.3\000"
 6735 0155 76546173 	.LASF150:
 6735      6B44656C 
 6735      617900
 6736              		.ascii	"pcTraceBufferEnd\000"
 6737 0160 78546173 	.LASF68:
 6737      6B48616E 
 6737      646C6500 
 6738              		.ascii	"pxTask\000"
 6739 016c 784D696E 	.LASF143:
 6739      694C6973 
 6739      74497465 
 6739      6D00
 6740              		.ascii	"uxSchedulerSuspended\000"
 6741 017a 5352432F 	.LASF5:
 6741      52544F53 
 6741      2F746173 
 6741      6B732E63 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 163


 6741      00
 6742              		.ascii	"unsigned int\000"
 6743 018b 7854696D 	.LASF53:
 6743      654F7574 
 6743      54797065 
 6743      00
 6744              		.ascii	"xReturn\000"
 6745 0198 784C6973 	.LASF87:
 6745      7400
 6746              		.ascii	"vTaskList\000"
 6747 019e 7854696D 	.LASF29:
 6747      65546F57 
 6747      616B6500 
 6748              		.ascii	"xTimeOnEntering\000"
 6749 01aa 74736B54 	.LASF50:
 6749      61736B43 
 6749      6F6E7472 
 6749      6F6C426C 
 6749      6F636B00 
 6750              		.ascii	"pxCreatedTask\000"
 6751 01be 70784E65 	.LASF22:
 6751      77544342 
 6751      00
 6752              		.ascii	"uxNumberOfItems\000"
 6753 01c7 7578546F 	.LASF76:
 6753      70557365 
 6753      64507269 
 6753      6F726974 
 6753      7900
 6754              		.ascii	"xTaskIsTaskSuspended\000"
 6755 01d9 70727641 	.LASF0:
 6755      6C6C6F63 
 6755      61746554 
 6755      4342416E 
 6755      64537461 
 6756              		.ascii	"long unsigned int\000"
 6757 01f0 73686F72 	.LASF37:
 6757      7420696E 
 6757      7400
 6758              		.ascii	"pxTopOfStack\000"
 6759 01fa 706F7274 	.LASF49:
 6759      5469636B 
 6759      54797065 
 6759      00
 6760              		.ascii	"pvParameters\000"
 6761 0207 70784669 	.LASF45:
 6761      72737454 
 6761      434200
 6762              		.ascii	"tskTCB\000"
 6763 0212 75735374 	.LASF98:
 6763      61636B44 
 6763      65707468 
 6763      00
 6764              		.ascii	"pxConstList\000"
 6765 021f 70757853 	.LASF4:
 6765      7461636B 
 6765      42756666 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 164


 6765      657200
 6766              		.ascii	"short unsigned int\000"
 6767 022e 76546173 	.LASF56:
 6767      6B507269 
 6767      6F726974 
 6767      79536574 
 6767      00
 6768              		.ascii	"pxTCB\000"
 6769 023f 784F7665 	.LASF73:
 6769      72666C6F 
 6769      77436F75 
 6769      6E7400
 6770              		.ascii	"xYieldRequired\000"
 6771 024e 76546173 	.LASF152:
 6771      6B537461 
 6771      72745363 
 6771      68656475 
 6771      6C657200 
 6772              		.ascii	"uxPreviousTask\000"
 6773 0262 78547261 	.LASF78:
 6773      63696E67 
 6773      00
 6774              		.ascii	"vTaskResume\000"
 6775 026b 75785443 	.LASF158:
 6775      424E756D 
 6775      62657200 
 6776              		.ascii	"pxCurrentTCB\000"
 6777 0277 474E5520 	.LASF69:
 6777      4320342E 
 6777      332E3300 
 6778              		.ascii	"uxReturn\000"
 6779 0283 70635472 	.LASF121:
 6779      61636542 
 6779      75666665 
 6779      72456E64 
 6779      00
 6780              		.ascii	"usTaskCheckFreeStackSpace\000"
 6781 0294 70785461 	.LASF85:
 6781      736B00
 6782              		.ascii	"xTaskGetTickCount\000"
 6783 029b 75785363 	.LASF116:
 6783      68656475 
 6783      6C657253 
 6783      75737065 
 6783      6E646564 
 6784              		.ascii	"cStatus\000"
 6785 02b0 756E7369 	.LASF122:
 6785      676E6564 
 6785      20696E74 
 6785      00
 6786              		.ascii	"pucStackByte\000"
 6787 02bd 78526574 	.LASF124:
 6787      75726E00 
 6788              		.ascii	"prvDeleteTCB\000"
 6789 02c5 76546173 	.LASF145:
 6789      6B4C6973 
 6789      7400
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 165


 6790              		.ascii	"xMissedYield\000"
 6791 02cf 7854696D 	.LASF148:
 6791      654F6E45 
 6791      6E746572 
 6791      696E6700 
 6792              		.ascii	"pcTraceBuffer\000"
 6793 02df 70784372 	.LASF109:
 6793      65617465 
 6793      64546173 
 6793      6B00
 6794              		.ascii	"prvIdleTask\000"
 6795 02ed 75784E75 	.LASF97:
 6795      6D626572 
 6795      4F664974 
 6795      656D7300 
 6796              		.ascii	"vTaskSwitchContext\000"
 6797 02fd 78546173 	.LASF94:
 6797      6B497354 
 6797      61736B53 
 6797      75737065 
 6797      6E646564 
 6798              		.ascii	"ulBufferLength\000"
 6799 0312 6C6F6E67 	.LASF127:
 6799      20756E73 
 6799      69676E65 
 6799      6420696E 
 6799      7400
 6800              		.ascii	"pxMutexHolder\000"
 6801 0324 7078546F 	.LASF41:
 6801      704F6653 
 6801      7461636B 
 6801      00
 6802              		.ascii	"pxStack\000"
 6803 0331 70765061 	.LASF123:
 6803      72616D65 
 6803      74657273 
 6803      00
 6804              		.ascii	"usCount\000"
 6805 033e 74736B54 	.LASF133:
 6805      434200
 6806              		.ascii	"pxOverflowDelayedTaskList\000"
 6807 0345 7078436F 	.LASF34:
 6807      6E73744C 
 6807      69737400 
 6808              		.ascii	"ulParameters\000"
 6809 0351 73686F72 	.LASF55:
 6809      7420756E 
 6809      7369676E 
 6809      65642069 
 6809      6E7400
 6810              		.ascii	"pxTaskToDelete\000"
 6811 0364 70785443 	.LASF91:
 6811      4200
 6812              		.ascii	"pcBuffer\000"
 6813 036a 78596965 	.LASF52:
 6813      6C645265 
 6813      71756972 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 166


 6813      656400
 6814              		.ascii	"xRegions\000"
 6815 0379 75785072 	.LASF128:
 6815      6576696F 
 6815      75735461 
 6815      736B00
 6816              		.ascii	"vTaskPriorityDisinherit\000"
 6817 0388 76546173 	.LASF134:
 6817      6B526573 
 6817      756D6500 
 6818              		.ascii	"xPendingReadyList\000"
 6819 0394 70784375 	.LASF135:
 6819      7272656E 
 6819      74544342 
 6819      00
 6820              		.ascii	"xTasksWaitingTermination\000"
 6821 03a1 75785265 	.LASF125:
 6821      7475726E 
 6821      00
 6822              		.ascii	"xTaskGetCurrentTaskHandle\000"
 6823 03aa 75735461 	.LASF46:
 6823      736B4368 
 6823      65636B46 
 6823      72656553 
 6823      7461636B 
 6824              		.ascii	"pxTaskCode\000"
 6825 03c4 78546173 	.LASF39:
 6825      6B476574 
 6825      5469636B 
 6825      436F756E 
 6825      7400
 6826              		.ascii	"xEventListItem\000"
 6827 03d6 63537461 	.LASF149:
 6827      74757300 
 6828              		.ascii	"pcTraceBufferStart\000"
 6829 03de 70756353 	.LASF141:
 6829      7461636B 
 6829      42797465 
 6829      00
 6830              		.ascii	"uxTopReadyPriority\000"
 6831 03eb 70727644 	.LASF59:
 6831      656C6574 
 6831      65544342 
 6831      00
 6832              		.ascii	"pxPreviousWakeTime\000"
 6833 03f8 784D6973 	.LASF33:
 6833      73656459 
 6833      69656C64 
 6833      00
 6834              		.ascii	"ulLengthInBytes\000"
 6835 0405 70635472 	.LASF99:
 6835      61636542 
 6835      75666665 
 6835      7200
 6836              		.ascii	"vTaskPlaceOnEventList\000"
 6837 0413 70727649 	.LASF14:
 6837      646C6554 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 167


 6837      61736B00 
 6838              		.ascii	"pxPrevious\000"
 6839 041f 76546173 	.LASF71:
 6839      6B537769 
 6839      74636843 
 6839      6F6E7465 
 6839      787400
 6840              		.ascii	"uxNewPriority\000"
 6841 0432 756C4275 	.LASF15:
 6841      66666572 
 6841      4C656E67 
 6841      746800
 6842              		.ascii	"pvOwner\000"
 6843 0441 70784D75 	.LASF117:
 6843      74657848 
 6843      6F6C6465 
 6843      7200
 6844              		.ascii	"pxNextTCB\000"
 6845 044f 70785374 	.LASF23:
 6845      61636B00 
 6846              		.ascii	"pxIndex\000"
 6847 0457 7573436F 	.LASF17:
 6847      756E7400 
 6848              		.ascii	"xListItem\000"
 6849 045f 70784F76 	.LASF153:
 6849      6572666C 
 6849      6F774465 
 6849      6C617965 
 6849      64546173 
 6850              		.ascii	"pcStatusString\000"
 6851 0479 756C5061 	.LASF16:
 6851      72616D65 
 6851      74657273 
 6851      00
 6852              		.ascii	"pvContainer\000"
 6853 0486 70785461 	.LASF31:
 6853      736B546F 
 6853      44656C65 
 6853      746500
 6854              		.ascii	"xMEMORY_REGION\000"
 6855 0495 70634275 	.LASF58:
 6855      66666572 
 6855      00
 6856              		.ascii	"vTaskDelayUntil\000"
 6857 049e 78526567 	.LASF89:
 6857      696F6E73 
 6857      00
 6858              		.ascii	"uxQueue\000"
 6859 04a7 76546173 	.LASF2:
 6859      6B507269 
 6859      6F726974 
 6859      79446973 
 6859      696E6865 
 6860              		.ascii	"unsigned char\000"
 6861 04bf 7850656E 	.LASF103:
 6861      64696E67 
 6861      52656164 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 168


 6861      794C6973 
 6861      7400
 6862              		.ascii	"pxUnblockedTCB\000"
 6863 04d1 78546173 	.LASF95:
 6863      6B735761 
 6863      6974696E 
 6863      67546572 
 6863      6D696E61 
 6864              		.ascii	"vTaskIncrementTick\000"
 6865 04ea 78546173 	.LASF142:
 6865      6B476574 
 6865      43757272 
 6865      656E7454 
 6865      61736B48 
 6866              		.ascii	"xSchedulerRunning\000"
 6867 0504 70785461 	.LASF82:
 6867      736B436F 
 6867      646500
 6868              		.ascii	"vTaskEndScheduler\000"
 6869 050f 78457665 	.LASF84:
 6869      6E744C69 
 6869      73744974 
 6869      656D00
 6870              		.ascii	"xTaskResumeAll\000"
 6871 051e 70635472 	.LASF21:
 6871      61636542 
 6871      75666665 
 6871      72537461 
 6871      727400
 6872              		.ascii	"xLIST\000"
 6873 0531 7578546F 	.LASF108:
 6873      70526561 
 6873      64795072 
 6873      696F7269 
 6873      747900
 6874              		.ascii	"vTaskMissedYield\000"
 6875 0544 70785072 	.LASF38:
 6875      6576696F 
 6875      75735761 
 6875      6B655469 
 6875      6D6500
 6876              		.ascii	"xGenericListItem\000"
 6877 0557 756C4C65 	.LASF44:
 6877      6E677468 
 6877      496E4279 
 6877      74657300 
 6878              		.ascii	"uxBasePriority\000"
 6879 0567 76546173 	.LASF80:
 6879      6B506C61 
 6879      63654F6E 
 6879      4576656E 
 6879      744C6973 
 6880              		.ascii	"xTaskResumeFromISR\000"
 6881 057d 70785072 	.LASF63:
 6881      6576696F 
 6881      757300
 6882              		.ascii	"xShouldDelay\000"
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 169


 6883 0588 75784E65 	.LASF114:
 6883      77507269 
 6883      6F726974 
 6883      7900
 6884              		.ascii	"prvListTaskWithinSingleList\000"
 6885 0596 70764F77 	.LASF112:
 6885      6E657200 
 6886              		.ascii	"prvCheckTasksWaitingTermination\000"
 6887 059e 70784E65 	.LASF77:
 6887      78745443 
 6887      4200
 6888              		.ascii	"xTask\000"
 6889 05a8 7078496E 	.LASF83:
 6889      64657800 
 6890              		.ascii	"vTaskSuspendAll\000"
 6891 05b0 784C6973 	.LASF35:
 6891      74497465 
 6891      6D00
 6892              		.ascii	"xMemoryRegion\000"
 6893 05ba 70635374 	.LASF10:
 6893      61747573 
 6893      53747269 
 6893      6E6700
 6894              		.ascii	"pdTASK_CODE\000"
 6895 05c9 7076436F 	.LASF9:
 6895      6E746169 
 6895      6E657200 
 6896              		.ascii	"char\000"
 6897 05d5 784D454D 	.LASF115:
 6897      4F52595F 
 6897      52454749 
 6897      4F4E00
 6898              		.ascii	"pxList\000"
 6899 05e4 76546173 	.LASF102:
 6899      6B44656C 
 6899      6179556E 
 6899      74696C00 
 6900              		.ascii	"xTaskRemoveFromEventList\000"
 6901 05f4 75785175 	.LASF12:
 6901      65756500 
 6902              		.ascii	"xItemValue\000"
 6903 05fc 756E7369 	.LASF88:
 6903      676E6564 
 6903      20636861 
 6903      7200
 6904              		.ascii	"pcWriteBuffer\000"
 6905 060a 7078556E 	.LASF156:
 6905      626C6F63 
 6905      6B656454 
 6905      434200
 6906              		.ascii	"E:\\Projekty\\ARM\\Eclipse\\AT91SAM7Sxxx_RTOS\000"
 6907 0619 76546173 	.LASF57:
 6907      6B496E63 
 6907      72656D65 
 6907      6E745469 
 6907      636B00
 6908              		.ascii	"vTaskDelete\000"
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 170


 6909 062c 78536368 	.LASF106:
 6909      6564756C 
 6909      65725275 
 6909      6E6E696E 
 6909      6700
 6910              		.ascii	"xTaskCheckForTimeOut\000"
 6911 063e 76546173 	.LASF147:
 6911      6B456E64 
 6911      53636865 
 6911      64756C65 
 6911      7200
 6912              		.ascii	"uxTaskNumber\000"
 6913 0650 78546173 	.LASF96:
 6913      6B526573 
 6913      756D6541 
 6913      6C6C00
 6914              		.ascii	"pxTemp\000"
 6915 065f 784C4953 	.LASF129:
 6915      5400
 6916              		.ascii	"pxReadyTasksLists\000"
 6917 0665 76546173 	.LASF157:
 6917      6B4D6973 
 6917      73656459 
 6917      69656C64 
 6917      00
 6918              		.ascii	"uxTaskGetNumberOfTasks\000"
 6919 0676 7847656E 	.LASF130:
 6919      65726963 
 6919      4C697374 
 6919      4974656D 
 6919      00
 6920              		.ascii	"xDelayedTaskList1\000"
 6921 0687 75784261 	.LASF131:
 6921      73655072 
 6921      696F7269 
 6921      747900
 6922              		.ascii	"xDelayedTaskList2\000"
 6923 0696 78546173 	.LASF146:
 6923      6B526573 
 6923      756D6546 
 6923      726F6D49 
 6923      535200
 6924              		.ascii	"xNumOfOverflows\000"
 6925 06a9 7853686F 	.LASF86:
 6925      756C6444 
 6925      656C6179 
 6925      00
 6926              		.ascii	"xTicks\000"
 6927 06b6 7072764C 	.LASF139:
 6927      69737454 
 6927      61736B57 
 6927      69746869 
 6927      6E53696E 
 6928              		.ascii	"xTickCount\000"
 6929 06d2 70727643 	.LASF92:
 6929      6865636B 
 6929      5461736B 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 171


 6929      73576169 
 6929      74696E67 
 6930              		.ascii	"ulBufferSize\000"
 6931 06f2 78546173 	.LASF144:
 6931      6B00
 6932              		.ascii	"uxMissedTicks\000"
 6933 06f8 76546173 	.LASF65:
 6933      6B537573 
 6933      70656E64 
 6933      416C6C00 
 6934              		.ascii	"xTicksToDelay\000"
 6935 0708 784D656D 	.LASF60:
 6935      6F727952 
 6935      6567696F 
 6935      6E00
 6936              		.ascii	"xTimeIncrement\000"
 6937 0716 70645441 	.LASF42:
 6937      534B5F43 
 6937      4F444500 
 6938              		.ascii	"pcTaskName\000"
 6939 0722 63686172 	.LASF107:
 6939      00
 6940              		.ascii	"pxTicksToWait\000"
 6941 0727 70784C69 	.LASF93:
 6941      737400
 6942              		.ascii	"ulTaskEndTrace\000"
 6943 072e 78546173 	.LASF72:
 6943      6B52656D 
 6943      6F766546 
 6943      726F6D45 
 6943      76656E74 
 6944              		.ascii	"uxCurrentPriority\000"
 6945 0747 78497465 	.LASF13:
 6945      6D56616C 
 6945      756500
 6946              		.ascii	"pxNext\000"
 6947 0752 70635772 	.LASF18:
 6947      69746542 
 6947      75666665 
 6947      7200
 6948              		.ascii	"xLIST_ITEM\000"
 6949 0760 453A5C50 	.LASF40:
 6949      726F6A65 
 6949      6B74795C 
 6949      41524D5C 
 6949      45636C69 
 6950              		.ascii	"uxPriority\000"
 6951 078a 76546173 	.LASF132:
 6951      6B44656C 
 6951      65746500 
 6952              		.ascii	"pxDelayedTaskList\000"
 6953 0796 78546173 	.LASF47:
 6953      6B436865 
 6953      636B466F 
 6953      7254696D 
 6953      654F7574 
 6954              		.ascii	"pcName\000"
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 172


 6955 07ab 75785461 	.LASF67:
 6955      736B4E75 
 6955      6D626572 
 6955      00
 6956              		.ascii	"uxTaskPriorityGet\000"
 6957 07b8 70785465 	.LASF104:
 6957      6D7000
 6958              		.ascii	"vTaskSetTimeOutState\000"
 6959 07bf 70785265 	.LASF75:
 6959      61647954 
 6959      61736B73 
 6959      4C697374 
 6959      7300
 6960              		.ascii	"pxTaskToSuspend\000"
 6961 07d1 75785461 	.LASF32:
 6961      736B4765 
 6961      744E756D 
 6961      6265724F 
 6961      66546173 
 6962              		.ascii	"pvBaseAddress\000"
 6963 07e8 7844656C 	.LASF111:
 6963      61796564 
 6963      5461736B 
 6963      4C697374 
 6963      3100
 6964              		.ascii	"prvInitialiseTaskLists\000"
 6965 07fa 7844656C 		.ident	"GCC: (GNU) 4.3.3"
 6965      61796564 
 6965      5461736B 
 6965      4C697374 
 6965      3200
 6966              	...
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 173


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:39     .bss:00000000 pxCurrentTCB
                             .bss:00000000 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:42     .bss:00000004 uxTasksDeleted
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:45     .bss:00000008 uxCurrentNumberOfTasks
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:48     .bss:0000000c xTickCount
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:51     .bss:00000010 uxTopUsedPriority
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:54     .bss:00000014 uxTopReadyPriority
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:57     .bss:00000018 xSchedulerRunning
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:60     .bss:0000001c uxSchedulerSuspended
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:63     .bss:00000020 uxMissedTicks
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:66     .bss:00000024 xMissedYield
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:69     .bss:00000028 xNumOfOverflows
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:72     .bss:0000002c uxTaskNumber
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:75     .bss:00000030 xTracing
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:81     .data:00000000 uxPreviousTask
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:82     .data:00000000 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:87     .text:00000000 xTaskGenericCreate
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:94     .text:00000000 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2677   .text:000019ec prvAllocateTCBAndStack
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2438   .text:00001790 prvInitialiseTCBVariables
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2513   .text:00001858 prvInitialiseTaskLists
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:282    .text:00000234 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3143   .bss:00000034 pxReadyTasksLists
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:294    .text:00000250 vTaskDelete
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:300    .text:00000250 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:388    .text:00000344 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3161   .bss:000000c8 xTasksWaitingTermination
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:398    .text:00000358 vTaskDelayUntil
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:404    .text:00000358 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1275   .text:00000bf0 vTaskSuspendAll
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1299   .text:00000c0c xTaskResumeAll
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:526    .text:000004c0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3155   .bss:000000b0 pxOverflowDelayedTaskList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3152   .bss:000000ac pxDelayedTaskList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:535    .text:000004d0 vTaskDelay
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:541    .text:000004d0 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:620    .text:000005ac $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:629    .text:000005bc uxTaskPriorityGet
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:635    .text:000005bc $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:672    .text:0000061c $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:678    .text:00000620 vTaskPrioritySet
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:684    .text:00000620 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:838    .text:000007e0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:846    .text:000007ec vTaskSuspend
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:852    .text:000007ec $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:923    .text:000008a8 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3164   .bss:000000dc xSuspendedTaskList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:930    .text:000008b0 xTaskIsTaskSuspended
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:937    .text:000008b0 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:976    .text:00000918 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3158   .bss:000000b4 xPendingReadyList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:983    .text:00000920 vTaskResume
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:989    .text:00000920 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1066   .text:00000a04 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1074   .text:00000a10 xTaskResumeFromISR
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 174


C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1080   .text:00000a10 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1160   .text:00000b08 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1175   .text:00000b1c vTaskStartScheduler
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1181   .text:00000b1c $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1232   .text:00000bac $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2406   .text:00001764 prvIdleTask
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1241   .text:00000bbc vTaskEndScheduler
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1247   .text:00000bbc $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1269   .text:00000bec $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1283   .text:00000bf0 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1293   .text:00000c08 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1305   .text:00000c0c $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1763   .text:00001074 vTaskIncrementTick
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1460   .text:00000dcc $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1473   .text:00000dec xTaskGetTickCount
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1479   .text:00000dec $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1501   .text:00000e1c $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1507   .text:00000e20 uxTaskGetNumberOfTasks
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1515   .text:00000e20 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1523   .text:00000e30 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1534   .text:00000e34 vTaskList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1540   .text:00000e34 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2747   .text:00001a94 prvListTaskWithinSingleList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1656   .text:00000f90 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1668   .text:00000fac vTaskStartTrace
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1674   .text:00000fac $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1710   .text:0000100c $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3167   .bss:000000f0 pcTraceBuffer
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3170   .bss:000000f4 pcTraceBufferStart
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3173   .bss:000000f8 pcTraceBufferEnd
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1719   .text:0000101c ulTaskEndTrace
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1725   .text:0000101c $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1755   .text:00001068 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1769   .text:00001074 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1894   .text:000011fc $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1907   .text:0000121c vTaskSwitchContext
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:1914   .text:0000121c $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2037   .text:000013c0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2052   .text:000013e8 vTaskPlaceOnEventList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2058   .text:000013e8 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2136   .text:000014d8 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2146   .text:000014ec xTaskRemoveFromEventList
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2152   .text:000014ec $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2248   .text:00001610 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2258   .text:00001624 vTaskSetTimeOutState
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2265   .text:00001624 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2284   .text:00001654 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2291   .text:0000165c xTaskCheckForTimeOut
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2297   .text:0000165c $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2378   .text:00001748 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2385   .text:00001750 vTaskMissedYield
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2393   .text:00001750 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2401   .text:00001760 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2412   .text:00001764 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2587   .text:00001910 prvCheckTasksWaitingTermination
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2433   .text:0000178c $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2444   .text:00001790 $a
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s 			page 175


C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2575   .text:000018f0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3146   .bss:00000084 xDelayedTaskList1
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3149   .bss:00000098 xDelayedTaskList2
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2593   .text:00001910 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2908   .text:00001c50 prvDeleteTCB
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2669   .text:000019dc $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2683   .text:000019ec $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2861   .text:00001be8 usTaskCheckFreeStackSpace
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2855   .text:00001be0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3175   .bss:000000fc pcStatusString
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2868   .text:00001be8 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2936   .text:00001c80 xTaskGetCurrentTaskHandle
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2958   .text:00001ca0 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2964   .text:00001ca4 vTaskPriorityInherit
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:2970   .text:00001ca4 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3056   .text:00001db8 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3064   .text:00001dc4 vTaskPriorityDisinherit
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3070   .text:00001dc4 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/ccIVGP1b.s:3137   .text:00001e94 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vListRemove
vListInsert
xPortStartScheduler
vPortEndScheduler
strlen
memcpy
strncpy
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
sprintf
strcat
