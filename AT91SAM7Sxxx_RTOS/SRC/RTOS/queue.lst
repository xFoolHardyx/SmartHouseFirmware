ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 1


   1              		.file	"queue.c"
   2              	@ GNU C (GCC) version 4.3.3 (arm-elf)
   3              	@	compiled by GNU C version 3.4.5 (mingw special), GMP version 4.2.2, MPFR version 2.3.1.
   4              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	@ options passed:  -I . -IINC/ -IINC/RTOS/ -imultilib interwork -iprefix
   6              	@ d:\programy\mikrokontrolery\arm\yagarto\bin\../lib/gcc/arm-elf/4.3.3/ -MD
   7              	@ SRC/RTOS/queue.d -MF .dep/queue.o.d -MP -MQ SRC/RTOS/queue.o
   8              	@ -D__USES_INITFINI__ SRC/RTOS/queue.c -mcpu=arm7tdmi -mthumb-interwork
   9              	@ -auxbase-strip SRC/RTOS/queue.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  10              	@ -fomit-frame-pointer -fverbose-asm
  11              	@ options enabled:  -falign-loops -fargument-alias -fauto-inc-dec
  12              	@ -fbranch-count-reg -fcommon -fearly-inlining
  13              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fident -fivopts
  14              	@ -fkeep-static-consts -fleading-underscore -fmath-errno
  15              	@ -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  16              	@ -fpeephole -freg-struct-return -fsched-interblock -fsched-spec
  17              	@ -fsched-stalled-insns-dep -fsigned-zeros -fsplit-ivs-in-unroller
  18              	@ -ftoplevel-reorder -ftrapping-math -ftree-cselim -ftree-loop-im
  19              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  20              	@ -ftree-reassoc -ftree-scev-cprop -ftree-vect-loop-version -fverbose-asm
  21              	@ -fzero-initialized-in-bss -mlittle-endian -msched-prolog
  22              	@ -mthumb-interwork
  23              	
  24              		.section	.debug_abbrev,"",%progbits
  25              	.Ldebug_abbrev0:
  26              		.section	.debug_info,"",%progbits
  27              	.Ldebug_info0:
  28              		.section	.debug_line,"",%progbits
  29              	.Ldebug_line0:
  30 0000 B1010000 		.text
  30      0200AC00 
  30      00000201 
  30      FB0E0D00 
  30      01010101 
  31              	.Ltext0:
  32              	@ Compiler executable checksum: aefe8b2555dadc8858779d7450a1d1fb
  33              	
  34              		.align	2
  35              		.global	xQueueCreate
  36              		.type	xQueueCreate, %function
  37              	xQueueCreate:
  38              	.LFB2:
  39              		.file 1 "SRC/RTOS/queue.c"
   1:SRC/RTOS/queue.c **** /*
   2:SRC/RTOS/queue.c ****     FreeRTOS V6.0.2 - Copyright (C) 2010 Real Time Engineers Ltd.
   3:SRC/RTOS/queue.c **** 
   4:SRC/RTOS/queue.c ****     ***************************************************************************
   5:SRC/RTOS/queue.c ****     *                                                                         *
   6:SRC/RTOS/queue.c ****     * If you are:                                                             *
   7:SRC/RTOS/queue.c ****     *                                                                         *
   8:SRC/RTOS/queue.c ****     *    + New to FreeRTOS,                                                   *
   9:SRC/RTOS/queue.c ****     *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
  10:SRC/RTOS/queue.c ****     *    + Looking for basic training,                                        *
  11:SRC/RTOS/queue.c ****     *    + Wanting to improve your FreeRTOS skills and productivity           *
  12:SRC/RTOS/queue.c ****     *                                                                         *
  13:SRC/RTOS/queue.c ****     * then take a look at the FreeRTOS eBook                                  *
  14:SRC/RTOS/queue.c ****     *                                                                         *
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 2


  15:SRC/RTOS/queue.c ****     *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
  16:SRC/RTOS/queue.c ****     *                  http://www.FreeRTOS.org/Documentation                  *
  17:SRC/RTOS/queue.c ****     *                                                                         *
  18:SRC/RTOS/queue.c ****     * A pdf reference manual is also available.  Both are usually delivered   *
  19:SRC/RTOS/queue.c ****     * to your inbox within 20 minutes to two hours when purchased between 8am *
  20:SRC/RTOS/queue.c ****     * and 8pm GMT (although please allow up to 24 hours in case of            *
  21:SRC/RTOS/queue.c ****     * exceptional circumstances).  Thank you for your support!                *
  22:SRC/RTOS/queue.c ****     *                                                                         *
  23:SRC/RTOS/queue.c ****     ***************************************************************************
  24:SRC/RTOS/queue.c **** 
  25:SRC/RTOS/queue.c ****     This file is part of the FreeRTOS distribution.
  26:SRC/RTOS/queue.c **** 
  27:SRC/RTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:SRC/RTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:SRC/RTOS/queue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:SRC/RTOS/queue.c ****     ***NOTE*** The exception to the GPL is included to allow you to distribute
  31:SRC/RTOS/queue.c ****     a combined work that includes FreeRTOS without being obliged to provide the
  32:SRC/RTOS/queue.c ****     source code for proprietary components outside of the FreeRTOS kernel.
  33:SRC/RTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
  34:SRC/RTOS/queue.c ****     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  35:SRC/RTOS/queue.c ****     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:SRC/RTOS/queue.c ****     more details. You should have received a copy of the GNU General Public 
  37:SRC/RTOS/queue.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it 
  38:SRC/RTOS/queue.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained 
  39:SRC/RTOS/queue.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:SRC/RTOS/queue.c ****     FreeRTOS WEB site.
  41:SRC/RTOS/queue.c **** 
  42:SRC/RTOS/queue.c ****     1 tab == 4 spaces!
  43:SRC/RTOS/queue.c **** 
  44:SRC/RTOS/queue.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:SRC/RTOS/queue.c ****     contact details.
  46:SRC/RTOS/queue.c **** 
  47:SRC/RTOS/queue.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:SRC/RTOS/queue.c ****     critical systems.
  49:SRC/RTOS/queue.c **** 
  50:SRC/RTOS/queue.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:SRC/RTOS/queue.c ****     licensing and training services.
  52:SRC/RTOS/queue.c **** */
  53:SRC/RTOS/queue.c **** 
  54:SRC/RTOS/queue.c **** #include <stdlib.h>
  55:SRC/RTOS/queue.c **** #include <string.h>
  56:SRC/RTOS/queue.c **** 
  57:SRC/RTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  58:SRC/RTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  59:SRC/RTOS/queue.c **** task.h is included from an application file. */
  60:SRC/RTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  61:SRC/RTOS/queue.c **** 
  62:SRC/RTOS/queue.c **** #include "FreeRTOS.h"
  63:SRC/RTOS/queue.c **** #include "task.h"
  64:SRC/RTOS/queue.c **** #include "croutine.h"
  65:SRC/RTOS/queue.c **** 
  66:SRC/RTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  67:SRC/RTOS/queue.c **** 
  68:SRC/RTOS/queue.c **** /*-----------------------------------------------------------
  69:SRC/RTOS/queue.c ****  * PUBLIC LIST API documented in list.h
  70:SRC/RTOS/queue.c ****  *----------------------------------------------------------*/
  71:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 3


  72:SRC/RTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  73:SRC/RTOS/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  74:SRC/RTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  75:SRC/RTOS/queue.c **** 
  76:SRC/RTOS/queue.c **** #define queueERRONEOUS_UNBLOCK			( -1 )
  77:SRC/RTOS/queue.c **** 
  78:SRC/RTOS/queue.c **** /* For internal use only. */
  79:SRC/RTOS/queue.c **** #define	queueSEND_TO_BACK				( 0 )
  80:SRC/RTOS/queue.c **** #define	queueSEND_TO_FRONT				( 1 )
  81:SRC/RTOS/queue.c **** 
  82:SRC/RTOS/queue.c **** /* Effectively make a union out of the xQUEUE structure. */
  83:SRC/RTOS/queue.c **** #define pxMutexHolder					pcTail
  84:SRC/RTOS/queue.c **** #define uxQueueType						pcHead
  85:SRC/RTOS/queue.c **** #define uxRecursiveCallCount			pcReadFrom
  86:SRC/RTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  87:SRC/RTOS/queue.c **** 
  88:SRC/RTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an items size of
  89:SRC/RTOS/queue.c **** zero. */
  90:SRC/RTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( 0 )
  91:SRC/RTOS/queue.c **** #define queueDONT_BLOCK					 ( ( portTickType ) 0 )
  92:SRC/RTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0 )
  93:SRC/RTOS/queue.c **** 
  94:SRC/RTOS/queue.c **** /*
  95:SRC/RTOS/queue.c ****  * Definition of the queue used by the scheduler.
  96:SRC/RTOS/queue.c ****  * Items are queued by copy, not reference.
  97:SRC/RTOS/queue.c ****  */
  98:SRC/RTOS/queue.c **** typedef struct QueueDefinition
  99:SRC/RTOS/queue.c **** {
 100:SRC/RTOS/queue.c **** 	signed char *pcHead;				/*< Points to the beginning of the queue storage area. */
 101:SRC/RTOS/queue.c **** 	signed char *pcTail;				/*< Points to the byte at the end of the queue storage area.  Once more by
 102:SRC/RTOS/queue.c **** 
 103:SRC/RTOS/queue.c **** 	signed char *pcWriteTo;				/*< Points to the free next place in the storage area. */
 104:SRC/RTOS/queue.c **** 	signed char *pcReadFrom;			/*< Points to the last place that a queued item was read from. */
 105:SRC/RTOS/queue.c **** 
 106:SRC/RTOS/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 107:SRC/RTOS/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 108:SRC/RTOS/queue.c **** 
 109:SRC/RTOS/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 110:SRC/RTOS/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 111:SRC/RTOS/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 112:SRC/RTOS/queue.c **** 
 113:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xRxLock;			/*< Stores the number of items received from the queue (removed fr
 114:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xTxLock;			/*< Stores the number of items transmitted to the queue (added to 
 115:SRC/RTOS/queue.c **** 
 116:SRC/RTOS/queue.c **** } xQUEUE;
 117:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 118:SRC/RTOS/queue.c **** 
 119:SRC/RTOS/queue.c **** /*
 120:SRC/RTOS/queue.c ****  * Inside this file xQueueHandle is a pointer to a xQUEUE structure.
 121:SRC/RTOS/queue.c ****  * To keep the definition private the API header file defines it as a
 122:SRC/RTOS/queue.c ****  * pointer to void.
 123:SRC/RTOS/queue.c ****  */
 124:SRC/RTOS/queue.c **** typedef xQUEUE * xQueueHandle;
 125:SRC/RTOS/queue.c **** 
 126:SRC/RTOS/queue.c **** /*
 127:SRC/RTOS/queue.c ****  * Prototypes for public functions are included here so we don't have to
 128:SRC/RTOS/queue.c ****  * include the API header file (as it defines xQueueHandle differently).  These
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 4


 129:SRC/RTOS/queue.c ****  * functions are documented in the API header file.
 130:SRC/RTOS/queue.c ****  */
 131:SRC/RTOS/queue.c **** xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize 
 132:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, port
 133:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 134:SRC/RTOS/queue.c **** void vQueueDelete( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 135:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 136:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 137:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
 138:SRC/RTOS/queue.c **** xQueueHandle xQueueCreateMutex( void ) PRIVILEGED_FUNCTION;
 139:SRC/RTOS/queue.c **** xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_
 140:SRC/RTOS/queue.c **** portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime ) PRIVILEGED_F
 141:SRC/RTOS/queue.c **** portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex ) PRIVILEGED_FUNCTION;
 142:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, 
 143:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTick
 144:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 145:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 146:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCT
 147:SRC/RTOS/queue.c **** 
 148:SRC/RTOS/queue.c **** /*
 149:SRC/RTOS/queue.c ****  * Co-routine queue functions differ from task queue functions.  Co-routines are
 150:SRC/RTOS/queue.c ****  * an optional component.
 151:SRC/RTOS/queue.c ****  */
 152:SRC/RTOS/queue.c **** #if configUSE_CO_ROUTINES == 1
 153:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed 
 154:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE
 155:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType x
 156:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToW
 157:SRC/RTOS/queue.c **** #endif
 158:SRC/RTOS/queue.c **** 
 159:SRC/RTOS/queue.c **** /*
 160:SRC/RTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 161:SRC/RTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 162:SRC/RTOS/queue.c ****  */
 163:SRC/RTOS/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
 164:SRC/RTOS/queue.c **** 
 165:SRC/RTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 166:SRC/RTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 167:SRC/RTOS/queue.c **** 	more user friendly. */
 168:SRC/RTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 169:SRC/RTOS/queue.c **** 	{
 170:SRC/RTOS/queue.c **** 		signed char *pcQueueName;
 171:SRC/RTOS/queue.c **** 		xQueueHandle xHandle;
 172:SRC/RTOS/queue.c **** 	} xQueueRegistryItem;
 173:SRC/RTOS/queue.c **** 
 174:SRC/RTOS/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 175:SRC/RTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 176:SRC/RTOS/queue.c **** 	array position being vacant. */
 177:SRC/RTOS/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 178:SRC/RTOS/queue.c **** 
 179:SRC/RTOS/queue.c **** 	/* Removes a queue from the registry by simply setting the pcQueueName
 180:SRC/RTOS/queue.c **** 	member to NULL. */
 181:SRC/RTOS/queue.c **** 	static void vQueueUnregisterQueue( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 182:SRC/RTOS/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName ) PRIVILEGED_FUNCTION;
 183:SRC/RTOS/queue.c **** #endif
 184:SRC/RTOS/queue.c **** 
 185:SRC/RTOS/queue.c **** /*
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 5


 186:SRC/RTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 187:SRC/RTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 188:SRC/RTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 189:SRC/RTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 190:SRC/RTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 191:SRC/RTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 192:SRC/RTOS/queue.c ****  */
 193:SRC/RTOS/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 194:SRC/RTOS/queue.c **** 
 195:SRC/RTOS/queue.c **** /*
 196:SRC/RTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 197:SRC/RTOS/queue.c ****  *
 198:SRC/RTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 199:SRC/RTOS/queue.c ****  */
 200:SRC/RTOS/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 201:SRC/RTOS/queue.c **** 
 202:SRC/RTOS/queue.c **** /*
 203:SRC/RTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 204:SRC/RTOS/queue.c ****  *
 205:SRC/RTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 206:SRC/RTOS/queue.c ****  */
 207:SRC/RTOS/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 208:SRC/RTOS/queue.c **** 
 209:SRC/RTOS/queue.c **** /*
 210:SRC/RTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 211:SRC/RTOS/queue.c ****  * back of the queue.
 212:SRC/RTOS/queue.c ****  */
 213:SRC/RTOS/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 214:SRC/RTOS/queue.c **** 
 215:SRC/RTOS/queue.c **** /*
 216:SRC/RTOS/queue.c ****  * Copies an item out of a queue.
 217:SRC/RTOS/queue.c ****  */
 218:SRC/RTOS/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer ) PRIVILEGED_FUNCTIO
 219:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 220:SRC/RTOS/queue.c **** 
 221:SRC/RTOS/queue.c **** /*
 222:SRC/RTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 223:SRC/RTOS/queue.c ****  * accessing the queue event lists.
 224:SRC/RTOS/queue.c ****  */
 225:SRC/RTOS/queue.c **** #define prvLockQueue( pxQueue )							\
 226:SRC/RTOS/queue.c **** {														\
 227:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();								\
 228:SRC/RTOS/queue.c **** 	{													\
 229:SRC/RTOS/queue.c **** 		if( pxQueue->xRxLock == queueUNLOCKED )			\
 230:SRC/RTOS/queue.c **** 		{												\
 231:SRC/RTOS/queue.c **** 			pxQueue->xRxLock = queueLOCKED_UNMODIFIED;	\
 232:SRC/RTOS/queue.c **** 		}												\
 233:SRC/RTOS/queue.c **** 		if( pxQueue->xTxLock == queueUNLOCKED )			\
 234:SRC/RTOS/queue.c **** 		{												\
 235:SRC/RTOS/queue.c **** 			pxQueue->xTxLock = queueLOCKED_UNMODIFIED;	\
 236:SRC/RTOS/queue.c **** 		}												\
 237:SRC/RTOS/queue.c **** 	}													\
 238:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();								\
 239:SRC/RTOS/queue.c **** }
 240:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 241:SRC/RTOS/queue.c **** 
 242:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 6


 243:SRC/RTOS/queue.c **** /*-----------------------------------------------------------
 244:SRC/RTOS/queue.c ****  * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 245:SRC/RTOS/queue.c ****  *----------------------------------------------------------*/
 246:SRC/RTOS/queue.c **** 
 247:SRC/RTOS/queue.c **** xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize 
 248:SRC/RTOS/queue.c **** {
  40              	rworking.
  41              		@ args = 0, pretend = 0, frame = 20
  42              		@ frame_needed = 0, uses_anonymous_args = 0
  43              		str	lr, [sp, #-4]!	@,
  44 0000 04E02DE5 	.LCFI0:
  45              		sub	sp, sp, #20	@,,
  46 0004 14D04DE2 	.LCFI1:
  47              		str	r0, [sp, #8]	@ uxQueueLength, uxQueueLength
  48 0008 08008DE5 		str	r1, [sp, #4]	@ uxItemSize, uxItemSize
  49 000c 04108DE5 		.loc 1 253 0
 249:SRC/RTOS/queue.c **** xQUEUE *pxNewQueue;
 250:SRC/RTOS/queue.c **** size_t xQueueSizeInBytes;
 251:SRC/RTOS/queue.c **** 
 252:SRC/RTOS/queue.c **** 	/* Allocate the new queue structure. */
 253:SRC/RTOS/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  50              	sp, #8]	@ tmp150, uxQueueLength
  51 0010 08309DE5 		cmp	r3, #0	@ tmp150,
  52 0014 000053E3 		beq	.L2	@,
  53 0018 4600000A 		.loc 1 255 0
 254:SRC/RTOS/queue.c **** 	{
 255:SRC/RTOS/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  54              		r0, #76	@,
  55 001c 4C00A0E3 		bl	pvPortMalloc	@
  56 0020 FEFFFFEB 		mov	r3, r0	@ D.3544,
  57 0024 0030A0E1 		str	r3, [sp, #12]	@ D.3544, pxNewQueue
  58 0028 0C308DE5 		.loc 1 256 0
 256:SRC/RTOS/queue.c **** 		if( pxNewQueue != NULL )
  59              	r3, [sp, #12]	@ tmp151, pxNewQueue
  60 002c 0C309DE5 		cmp	r3, #0	@ tmp151,
  61 0030 000053E3 		beq	.L2	@,
  62 0034 3F00000A 		.loc 1 260 0
 257:SRC/RTOS/queue.c **** 		{
 258:SRC/RTOS/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 259:SRC/RTOS/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 260:SRC/RTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  63              		r2, [sp, #8]	@ tmp152, uxQueueLength
  64 0038 08209DE5 		ldr	r3, [sp, #4]	@ tmp153, uxItemSize
  65 003c 04309DE5 		mul	r3, r2, r3	@ D.3545, tmp152, tmp153
  66 0040 920303E0 		add	r3, r3, #1	@ tmp154, D.3545,
  67 0044 013083E2 		str	r3, [sp, #16]	@ tmp154, xQueueSizeInBytes
  68 0048 10308DE5 		.loc 1 262 0
 261:SRC/RTOS/queue.c **** 
 262:SRC/RTOS/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  69              	0, [sp, #16]	@, xQueueSizeInBytes
  70 004c 10009DE5 		bl	pvPortMalloc	@
  71 0050 FEFFFFEB 		mov	r3, r0	@ D.3546,
  72 0054 0030A0E1 		mov	r2, r3	@ D.3547, D.3546
  73 0058 0320A0E1 		ldr	r3, [sp, #12]	@ tmp155, pxNewQueue
  74 005c 0C309DE5 		str	r2, [r3, #0]	@ D.3547, <variable>.pcHead
  75 0060 002083E5 		.loc 1 263 0
 263:SRC/RTOS/queue.c **** 			if( pxNewQueue->pcHead != NULL )
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 7


  76              	, [sp, #12]	@ tmp156, pxNewQueue
  77 0064 0C309DE5 		ldr	r3, [r3, #0]	@ D.3548, <variable>.pcHead
  78 0068 003093E5 		cmp	r3, #0	@ D.3548,
  79 006c 000053E3 		beq	.L3	@,
  80 0070 2E00000A 		.loc 1 267 0
 264:SRC/RTOS/queue.c **** 			{
 265:SRC/RTOS/queue.c **** 				/* Initialise the queue members as described above where the
 266:SRC/RTOS/queue.c **** 				queue type is defined. */
 267:SRC/RTOS/queue.c **** 				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
  81              	r3, [sp, #12]	@ tmp157, pxNewQueue
  82 0074 0C309DE5 		ldr	r1, [r3, #0]	@ D.3549, <variable>.pcHead
  83 0078 001093E5 		ldr	r2, [sp, #8]	@ tmp158, uxQueueLength
  84 007c 08209DE5 		ldr	r3, [sp, #4]	@ tmp159, uxItemSize
  85 0080 04309DE5 		mul	r3, r2, r3	@ D.3550, tmp158, tmp159
  86 0084 920303E0 		add	r2, r1, r3	@ D.3551, D.3549, D.3550
  87 0088 032081E0 		ldr	r3, [sp, #12]	@ tmp160, pxNewQueue
  88 008c 0C309DE5 		str	r2, [r3, #4]	@ D.3551, <variable>.pcTail
  89 0090 042083E5 		.loc 1 268 0
 268:SRC/RTOS/queue.c **** 				pxNewQueue->uxMessagesWaiting = 0;
  90              	[sp, #12]	@ tmp161, pxNewQueue
  91 0094 0C209DE5 		mov	r3, #0	@ tmp162,
  92 0098 0030A0E3 		str	r3, [r2, #56]	@ tmp162, <variable>.uxMessagesWaiting
  93 009c 383082E5 		.loc 1 269 0
 269:SRC/RTOS/queue.c **** 				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
  94              		r3, [sp, #12]	@ tmp163, pxNewQueue
  95 00a0 0C309DE5 		ldr	r2, [r3, #0]	@ D.3552, <variable>.pcHead
  96 00a4 002093E5 		ldr	r3, [sp, #12]	@ tmp164, pxNewQueue
  97 00a8 0C309DE5 		str	r2, [r3, #8]	@ D.3552, <variable>.pcWriteTo
  98 00ac 082083E5 		.loc 1 270 0
 270:SRC/RTOS/queue.c **** 				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
  99              	r3, [sp, #12]	@ tmp165, pxNewQueue
 100 00b0 0C309DE5 		ldr	r1, [r3, #0]	@ D.3553, <variable>.pcHead
 101 00b4 001093E5 		ldr	r3, [sp, #8]	@ tmp166, uxQueueLength
 102 00b8 08309DE5 		sub	r2, r3, #1	@ D.3554, tmp166,
 103 00bc 012043E2 		ldr	r3, [sp, #4]	@ tmp167, uxItemSize
 104 00c0 04309DE5 		mul	r3, r2, r3	@ D.3555, D.3554, tmp167
 105 00c4 920303E0 		add	r2, r1, r3	@ D.3556, D.3553, D.3555
 106 00c8 032081E0 		ldr	r3, [sp, #12]	@ tmp168, pxNewQueue
 107 00cc 0C309DE5 		str	r2, [r3, #12]	@ D.3556, <variable>.pcReadFrom
 108 00d0 0C2083E5 		.loc 1 271 0
 271:SRC/RTOS/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 109              	sp, #12]	@ tmp169, pxNewQueue
 110 00d4 0C209DE5 		ldr	r3, [sp, #8]	@ tmp170, uxQueueLength
 111 00d8 08309DE5 		str	r3, [r2, #60]	@ tmp170, <variable>.uxLength
 112 00dc 3C3082E5 		.loc 1 272 0
 272:SRC/RTOS/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 113              		r2, [sp, #12]	@ tmp171, pxNewQueue
 114 00e0 0C209DE5 		ldr	r3, [sp, #4]	@ tmp172, uxItemSize
 115 00e4 04309DE5 		str	r3, [r2, #64]	@ tmp172, <variable>.uxItemSize
 116 00e8 403082E5 		.loc 1 273 0
 273:SRC/RTOS/queue.c **** 				pxNewQueue->xRxLock = queueUNLOCKED;
 117              		r2, [sp, #12]	@ tmp173, pxNewQueue
 118 00ec 0C209DE5 		mvn	r3, #0	@ tmp174,
 119 00f0 0030E0E3 		str	r3, [r2, #68]	@ tmp174, <variable>.xRxLock
 120 00f4 443082E5 		.loc 1 274 0
 274:SRC/RTOS/queue.c **** 				pxNewQueue->xTxLock = queueUNLOCKED;
 121              		r2, [sp, #12]	@ tmp175, pxNewQueue
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 8


 122 00f8 0C209DE5 		mvn	r3, #0	@ tmp176,
 123 00fc 0030E0E3 		str	r3, [r2, #72]	@ tmp176, <variable>.xTxLock
 124 0100 483082E5 		.loc 1 277 0
 275:SRC/RTOS/queue.c **** 
 276:SRC/RTOS/queue.c **** 				/* Likewise ensure the event queues start with the correct state. */
 277:SRC/RTOS/queue.c **** 				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 125              		r3, [sp, #12]	@ tmp177, pxNewQueue
 126 0104 0C309DE5 		add	r3, r3, #16	@ D.3557, tmp177,
 127 0108 103083E2 		mov	r0, r3	@, D.3557
 128 010c 0300A0E1 		bl	vListInitialise	@
 129 0110 FEFFFFEB 		.loc 1 278 0
 278:SRC/RTOS/queue.c **** 				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 130              	r3, [sp, #12]	@ tmp178, pxNewQueue
 131 0114 0C309DE5 		add	r3, r3, #36	@ D.3558, tmp178,
 132 0118 243083E2 		mov	r0, r3	@, D.3558
 133 011c 0300A0E1 		bl	vListInitialise	@
 134 0120 FEFFFFEB 		.loc 1 281 0
 279:SRC/RTOS/queue.c **** 
 280:SRC/RTOS/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 281:SRC/RTOS/queue.c **** 				return  pxNewQueue;
 135              	r3, [sp, #12]	@, pxNewQueue
 136 0124 0C309DE5 		str	r3, [sp, #0]	@, D.3559
 137 0128 00308DE5 		b	.L4	@
 138 012c 030000EA 	.L3:
 139              		.loc 1 286 0
 282:SRC/RTOS/queue.c **** 			}
 283:SRC/RTOS/queue.c **** 			else
 284:SRC/RTOS/queue.c **** 			{
 285:SRC/RTOS/queue.c **** 				traceQUEUE_CREATE_FAILED();
 286:SRC/RTOS/queue.c **** 				vPortFree( pxNewQueue );
 140              	r0, [sp, #12]	@, pxNewQueue
 141 0130 0C009DE5 		bl	vPortFree	@
 142 0134 FEFFFFEB 	.L2:
 143              		.loc 1 293 0
 287:SRC/RTOS/queue.c **** 			}
 288:SRC/RTOS/queue.c **** 		}
 289:SRC/RTOS/queue.c **** 	}
 290:SRC/RTOS/queue.c **** 
 291:SRC/RTOS/queue.c **** 	/* Will only reach here if we could not allocate enough memory or no memory
 292:SRC/RTOS/queue.c **** 	was required. */
 293:SRC/RTOS/queue.c **** 	return NULL;
 144              		r3, #0	@,
 145 0138 0030A0E3 		str	r3, [sp, #0]	@, D.3559
 146 013c 00308DE5 	.L4:
 147              		ldr	r3, [sp, #0]	@ <result>, D.3559
 148 0140 00309DE5 		.loc 1 294 0
 294:SRC/RTOS/queue.c **** }
 149              	r0, r3	@, <result>
 150 0144 0300A0E1 		add	sp, sp, #20	@,,
 151 0148 14D08DE2 		ldr	lr, [sp], #4
 152 014c 04E09DE4 		bx	lr
 153 0150 1EFF2FE1 	.LFE2:
 154              		.size	xQueueCreate, .-xQueueCreate
 155              		.align	2
 156              		.global	xQueueCreateMutex
 157              		.type	xQueueCreateMutex, %function
 158              	xQueueCreateMutex:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 9


 159              	.LFB3:
 160              		.loc 1 300 0
 295:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 296:SRC/RTOS/queue.c **** 
 297:SRC/RTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 298:SRC/RTOS/queue.c **** 
 299:SRC/RTOS/queue.c **** 	xQueueHandle xQueueCreateMutex( void )
 300:SRC/RTOS/queue.c **** 	{
 161              	supports interworking.
 162              		@ args = 0, pretend = 0, frame = 4
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		str	lr, [sp, #-4]!	@,
 165 0154 04E02DE5 	.LCFI2:
 166              		sub	sp, sp, #4	@,,
 167 0158 04D04DE2 	.LCFI3:
 168              		.loc 1 304 0
 301:SRC/RTOS/queue.c **** 	xQUEUE *pxNewQueue;
 302:SRC/RTOS/queue.c **** 
 303:SRC/RTOS/queue.c **** 		/* Allocate the new queue structure. */
 304:SRC/RTOS/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 169              	 #76	@,
 170 015c 4C00A0E3 		bl	pvPortMalloc	@
 171 0160 FEFFFFEB 		mov	r3, r0	@ D.3571,
 172 0164 0030A0E1 		str	r3, [sp, #0]	@ D.3571, pxNewQueue
 173 0168 00308DE5 		.loc 1 305 0
 305:SRC/RTOS/queue.c **** 		if( pxNewQueue != NULL )
 174              	r3, [sp, #0]	@ tmp138, pxNewQueue
 175 016c 00309DE5 		cmp	r3, #0	@ tmp138,
 176 0170 000053E3 		beq	.L7	@,
 177 0174 2700000A 		.loc 1 308 0
 306:SRC/RTOS/queue.c **** 		{
 307:SRC/RTOS/queue.c **** 			/* Information required for priority inheritance. */
 308:SRC/RTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 178              		r2, [sp, #0]	@ tmp139, pxNewQueue
 179 0178 00209DE5 		mov	r3, #0	@ tmp140,
 180 017c 0030A0E3 		str	r3, [r2, #4]	@ tmp140, <variable>.pcTail
 181 0180 043082E5 		.loc 1 309 0
 309:SRC/RTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 182              		r2, [sp, #0]	@ tmp141, pxNewQueue
 183 0184 00209DE5 		mov	r3, #0	@ tmp142,
 184 0188 0030A0E3 		str	r3, [r2, #0]	@ tmp142, <variable>.pcHead
 185 018c 003082E5 		.loc 1 313 0
 310:SRC/RTOS/queue.c **** 
 311:SRC/RTOS/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 312:SRC/RTOS/queue.c **** 			of the queue. */
 313:SRC/RTOS/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 186              		r2, [sp, #0]	@ tmp143, pxNewQueue
 187 0190 00209DE5 		mov	r3, #0	@ tmp144,
 188 0194 0030A0E3 		str	r3, [r2, #8]	@ tmp144, <variable>.pcWriteTo
 189 0198 083082E5 		.loc 1 314 0
 314:SRC/RTOS/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 190              		r2, [sp, #0]	@ tmp145, pxNewQueue
 191 019c 00209DE5 		mov	r3, #0	@ tmp146,
 192 01a0 0030A0E3 		str	r3, [r2, #12]	@ tmp146, <variable>.pcReadFrom
 193 01a4 0C3082E5 		.loc 1 319 0
 315:SRC/RTOS/queue.c **** 
 316:SRC/RTOS/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 10


 317:SRC/RTOS/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 318:SRC/RTOS/queue.c **** 			of the mutex. */
 319:SRC/RTOS/queue.c **** 			pxNewQueue->uxMessagesWaiting = 0;
 194              		r2, [sp, #0]	@ tmp147, pxNewQueue
 195 01a8 00209DE5 		mov	r3, #0	@ tmp148,
 196 01ac 0030A0E3 		str	r3, [r2, #56]	@ tmp148, <variable>.uxMessagesWaiting
 197 01b0 383082E5 		.loc 1 320 0
 320:SRC/RTOS/queue.c **** 			pxNewQueue->uxLength = 1;
 198              		r2, [sp, #0]	@ tmp149, pxNewQueue
 199 01b4 00209DE5 		mov	r3, #1	@ tmp150,
 200 01b8 0130A0E3 		str	r3, [r2, #60]	@ tmp150, <variable>.uxLength
 201 01bc 3C3082E5 		.loc 1 321 0
 321:SRC/RTOS/queue.c **** 			pxNewQueue->uxItemSize = 0;
 202              		r2, [sp, #0]	@ tmp151, pxNewQueue
 203 01c0 00209DE5 		mov	r3, #0	@ tmp152,
 204 01c4 0030A0E3 		str	r3, [r2, #64]	@ tmp152, <variable>.uxItemSize
 205 01c8 403082E5 		.loc 1 322 0
 322:SRC/RTOS/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 206              		r2, [sp, #0]	@ tmp153, pxNewQueue
 207 01cc 00209DE5 		mvn	r3, #0	@ tmp154,
 208 01d0 0030E0E3 		str	r3, [r2, #68]	@ tmp154, <variable>.xRxLock
 209 01d4 443082E5 		.loc 1 323 0
 323:SRC/RTOS/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 210              		r2, [sp, #0]	@ tmp155, pxNewQueue
 211 01d8 00209DE5 		mvn	r3, #0	@ tmp156,
 212 01dc 0030E0E3 		str	r3, [r2, #72]	@ tmp156, <variable>.xTxLock
 213 01e0 483082E5 		.loc 1 326 0
 324:SRC/RTOS/queue.c **** 
 325:SRC/RTOS/queue.c **** 			/* Ensure the event queues start with the correct state. */
 326:SRC/RTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 214              		r3, [sp, #0]	@ tmp157, pxNewQueue
 215 01e4 00309DE5 		add	r3, r3, #16	@ D.3572, tmp157,
 216 01e8 103083E2 		mov	r0, r3	@, D.3572
 217 01ec 0300A0E1 		bl	vListInitialise	@
 218 01f0 FEFFFFEB 		.loc 1 327 0
 327:SRC/RTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 219              	r3, [sp, #0]	@ tmp158, pxNewQueue
 220 01f4 00309DE5 		add	r3, r3, #36	@ D.3573, tmp158,
 221 01f8 243083E2 		mov	r0, r3	@, D.3573
 222 01fc 0300A0E1 		bl	vListInitialise	@
 223 0200 FEFFFFEB 		.loc 1 330 0
 328:SRC/RTOS/queue.c **** 
 329:SRC/RTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 330:SRC/RTOS/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, 0, queueSEND_TO_BACK );
 224              	r0, [sp, #0]	@, pxNewQueue
 225 0204 00009DE5 		mov	r1, #0	@,
 226 0208 0010A0E3 		mov	r2, #0	@,
 227 020c 0020A0E3 		mov	r3, #0	@,
 228 0210 0030A0E3 		bl	xQueueGenericSend	@
 229 0214 FEFFFFEB 	.L7:
 230              		.loc 1 339 0
 331:SRC/RTOS/queue.c **** 
 332:SRC/RTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 333:SRC/RTOS/queue.c **** 		}
 334:SRC/RTOS/queue.c **** 		else
 335:SRC/RTOS/queue.c **** 		{
 336:SRC/RTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 11


 337:SRC/RTOS/queue.c **** 		}
 338:SRC/RTOS/queue.c **** 
 339:SRC/RTOS/queue.c **** 		return pxNewQueue;
 231              	, [sp, #0]	@ D.3574, pxNewQueue
 232 0218 00309DE5 		.loc 1 340 0
 340:SRC/RTOS/queue.c **** 	}
 233              	ov	r0, r3	@, <result>
 234 021c 0300A0E1 		add	sp, sp, #4	@,,
 235 0220 04D08DE2 		ldr	lr, [sp], #4
 236 0224 04E09DE4 		bx	lr
 237 0228 1EFF2FE1 	.LFE3:
 238              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 239              		.align	2
 240              		.global	xQueueGenericSend
 241              		.type	xQueueGenericSend, %function
 242              	xQueueGenericSend:
 243              	.LFB4:
 244              		.loc 1 452 0
 341:SRC/RTOS/queue.c **** 
 342:SRC/RTOS/queue.c **** #endif /* configUSE_MUTEXES */
 343:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 344:SRC/RTOS/queue.c **** 
 345:SRC/RTOS/queue.c **** #if configUSE_RECURSIVE_MUTEXES == 1
 346:SRC/RTOS/queue.c **** 
 347:SRC/RTOS/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
 348:SRC/RTOS/queue.c **** 	{
 349:SRC/RTOS/queue.c **** 	portBASE_TYPE xReturn;
 350:SRC/RTOS/queue.c **** 
 351:SRC/RTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 352:SRC/RTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 353:SRC/RTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 354:SRC/RTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 355:SRC/RTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 356:SRC/RTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 357:SRC/RTOS/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 358:SRC/RTOS/queue.c **** 		{
 359:SRC/RTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 360:SRC/RTOS/queue.c **** 
 361:SRC/RTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 362:SRC/RTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 363:SRC/RTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 364:SRC/RTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 365:SRC/RTOS/queue.c **** 			uxRecursiveCallCount member. */
 366:SRC/RTOS/queue.c **** 			( pxMutex->uxRecursiveCallCount )--;
 367:SRC/RTOS/queue.c **** 
 368:SRC/RTOS/queue.c **** 			/* Have we unwound the call count? */
 369:SRC/RTOS/queue.c **** 			if( pxMutex->uxRecursiveCallCount == 0 )
 370:SRC/RTOS/queue.c **** 			{
 371:SRC/RTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 372:SRC/RTOS/queue.c **** 				task that might be waiting to access the mutex. */
 373:SRC/RTOS/queue.c **** 				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 374:SRC/RTOS/queue.c **** 			}
 375:SRC/RTOS/queue.c **** 
 376:SRC/RTOS/queue.c **** 			xReturn = pdPASS;
 377:SRC/RTOS/queue.c **** 		}
 378:SRC/RTOS/queue.c **** 		else
 379:SRC/RTOS/queue.c **** 		{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 12


 380:SRC/RTOS/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 381:SRC/RTOS/queue.c **** 			xReturn = pdFAIL;
 382:SRC/RTOS/queue.c **** 
 383:SRC/RTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 384:SRC/RTOS/queue.c **** 		}
 385:SRC/RTOS/queue.c **** 
 386:SRC/RTOS/queue.c **** 		return xReturn;
 387:SRC/RTOS/queue.c **** 	}
 388:SRC/RTOS/queue.c **** 
 389:SRC/RTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 390:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 391:SRC/RTOS/queue.c **** 
 392:SRC/RTOS/queue.c **** #if configUSE_RECURSIVE_MUTEXES == 1
 393:SRC/RTOS/queue.c **** 
 394:SRC/RTOS/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
 395:SRC/RTOS/queue.c **** 	{
 396:SRC/RTOS/queue.c **** 	portBASE_TYPE xReturn;
 397:SRC/RTOS/queue.c **** 
 398:SRC/RTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 399:SRC/RTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 400:SRC/RTOS/queue.c **** 
 401:SRC/RTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 402:SRC/RTOS/queue.c **** 
 403:SRC/RTOS/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 404:SRC/RTOS/queue.c **** 		{
 405:SRC/RTOS/queue.c **** 			( pxMutex->uxRecursiveCallCount )++;
 406:SRC/RTOS/queue.c **** 			xReturn = pdPASS;
 407:SRC/RTOS/queue.c **** 		}
 408:SRC/RTOS/queue.c **** 		else
 409:SRC/RTOS/queue.c **** 		{
 410:SRC/RTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 411:SRC/RTOS/queue.c **** 
 412:SRC/RTOS/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 413:SRC/RTOS/queue.c **** 			we may have blocked to reach here. */
 414:SRC/RTOS/queue.c **** 			if( xReturn == pdPASS )
 415:SRC/RTOS/queue.c **** 			{
 416:SRC/RTOS/queue.c **** 				( pxMutex->uxRecursiveCallCount )++;
 417:SRC/RTOS/queue.c **** 			}
 418:SRC/RTOS/queue.c **** 		}
 419:SRC/RTOS/queue.c **** 
 420:SRC/RTOS/queue.c **** 		return xReturn;
 421:SRC/RTOS/queue.c **** 	}
 422:SRC/RTOS/queue.c **** 
 423:SRC/RTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 424:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 425:SRC/RTOS/queue.c **** 
 426:SRC/RTOS/queue.c **** #if configUSE_COUNTING_SEMAPHORES == 1
 427:SRC/RTOS/queue.c **** 
 428:SRC/RTOS/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 429:SRC/RTOS/queue.c **** 	{
 430:SRC/RTOS/queue.c **** 	xQueueHandle pxHandle;
 431:SRC/RTOS/queue.c **** 
 432:SRC/RTOS/queue.c **** 		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGT
 433:SRC/RTOS/queue.c **** 
 434:SRC/RTOS/queue.c **** 		if( pxHandle != NULL )
 435:SRC/RTOS/queue.c **** 		{
 436:SRC/RTOS/queue.c **** 			pxHandle->uxMessagesWaiting = uxInitialCount;
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 13


 437:SRC/RTOS/queue.c **** 
 438:SRC/RTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 439:SRC/RTOS/queue.c **** 		}
 440:SRC/RTOS/queue.c **** 		else
 441:SRC/RTOS/queue.c **** 		{
 442:SRC/RTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 443:SRC/RTOS/queue.c **** 		}
 444:SRC/RTOS/queue.c **** 
 445:SRC/RTOS/queue.c **** 		return pxHandle;
 446:SRC/RTOS/queue.c **** 	}
 447:SRC/RTOS/queue.c **** 
 448:SRC/RTOS/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 449:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 450:SRC/RTOS/queue.c **** 
 451:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, por
 452:SRC/RTOS/queue.c **** {
 245              	supports interworking.
 246              		@ args = 0, pretend = 0, frame = 32
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		str	lr, [sp, #-4]!	@,
 249 022c 04E02DE5 	.LCFI4:
 250              		sub	sp, sp, #32	@,,
 251 0230 20D04DE2 	.LCFI5:
 252              		str	r0, [sp, #16]	@ pxQueue, pxQueue
 253 0234 10008DE5 		str	r1, [sp, #12]	@ pvItemToQueue, pvItemToQueue
 254 0238 0C108DE5 		str	r2, [sp, #8]	@ xTicksToWait, xTicksToWait
 255 023c 08208DE5 		str	r3, [sp, #4]	@ xCopyPosition, xCopyPosition
 256 0240 04308DE5 		.loc 1 453 0
 453:SRC/RTOS/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 257              	@ tmp148,
 258 0244 0030A0E3 		str	r3, [sp, #28]	@ tmp148, xEntryTimeSet
 259 0248 1C308DE5 	.L21:
 260              		.loc 1 461 0
 454:SRC/RTOS/queue.c **** xTimeOutType xTimeOut;
 455:SRC/RTOS/queue.c **** 
 456:SRC/RTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 457:SRC/RTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 458:SRC/RTOS/queue.c **** 	of execution time efficiency. */
 459:SRC/RTOS/queue.c **** 	for( ;; )
 460:SRC/RTOS/queue.c **** 	{
 461:SRC/RTOS/queue.c **** 		taskENTER_CRITICAL();
 261              	vPortEnterCritical	@
 262 024c FEFFFFEB 		.loc 1 465 0
 462:SRC/RTOS/queue.c **** 		{
 463:SRC/RTOS/queue.c **** 			/* Is there room on the queue now?  To be running we must be
 464:SRC/RTOS/queue.c **** 			the highest priority task wanting to access the queue. */
 465:SRC/RTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 263              	dr	r3, [sp, #16]	@ tmp149, pxQueue
 264 0250 10309DE5 		ldr	r2, [r3, #56]	@ D.3587, <variable>.uxMessagesWaiting
 265 0254 382093E5 		ldr	r3, [sp, #16]	@ tmp150, pxQueue
 266 0258 10309DE5 		ldr	r3, [r3, #60]	@ D.3588, <variable>.uxLength
 267 025c 3C3093E5 		cmp	r2, r3	@ D.3587, D.3588
 268 0260 030052E1 		bcs	.L10	@,
 269 0264 1300002A 		.loc 1 468 0
 466:SRC/RTOS/queue.c **** 			{
 467:SRC/RTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 468:SRC/RTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 14


 270              	, [sp, #16]	@, pxQueue
 271 0268 10009DE5 		ldr	r1, [sp, #12]	@, pvItemToQueue
 272 026c 0C109DE5 		ldr	r2, [sp, #4]	@, xCopyPosition
 273 0270 04209DE5 		bl	prvCopyDataToQueue	@
 274 0274 7C0100EB 		.loc 1 472 0
 469:SRC/RTOS/queue.c **** 
 470:SRC/RTOS/queue.c **** 				/* If there was a task waiting for data to arrive on the
 471:SRC/RTOS/queue.c **** 				queue then unblock it now. */
 472:SRC/RTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 275              	r3, [sp, #16]	@ tmp151, pxQueue
 276 0278 10309DE5 		ldr	r3, [r3, #36]	@ D.3589, <variable>.xTasksWaitingToReceive.uxNumberOfItems
 277 027c 243093E5 		cmp	r3, #0	@ D.3589,
 278 0280 000053E3 		beq	.L11	@,
 279 0284 0700000A 		.loc 1 474 0
 473:SRC/RTOS/queue.c **** 				{
 474:SRC/RTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 280              	r3, [sp, #16]	@ tmp152, pxQueue
 281 0288 10309DE5 		add	r3, r3, #36	@ D.3590, tmp152,
 282 028c 243083E2 		mov	r0, r3	@, D.3590
 283 0290 0300A0E1 		bl	xTaskRemoveFromEventList	@
 284 0294 FEFFFFEB 		mov	r3, r0	@ D.3591,
 285 0298 0030A0E1 		cmp	r3, #1	@ D.3591,
 286 029c 010053E3 		bne	.L11	@,
 287 02a0 0000001A 		.loc 1 480 0
 475:SRC/RTOS/queue.c **** 					{
 476:SRC/RTOS/queue.c **** 						/* The unblocked task has a priority higher than
 477:SRC/RTOS/queue.c **** 						our own so yield immediately.  Yes it is ok to do
 478:SRC/RTOS/queue.c **** 						this from within the critical section - the kernel
 479:SRC/RTOS/queue.c **** 						takes care of that. */
 480:SRC/RTOS/queue.c **** 						portYIELD_WITHIN_API();
 288              	RC/RTOS/queue.c" 1
 289              		SWI 0
 290 02a4 000000EF 	@ 0 "" 2
 291              	.L11:
 292              		.loc 1 484 0
 481:SRC/RTOS/queue.c **** 					}
 482:SRC/RTOS/queue.c **** 				}
 483:SRC/RTOS/queue.c **** 
 484:SRC/RTOS/queue.c **** 				taskEXIT_CRITICAL();
 293              	PortExitCritical	@
 294 02a8 FEFFFFEB 		.loc 1 488 0
 485:SRC/RTOS/queue.c **** 
 486:SRC/RTOS/queue.c **** 				/* Return to the original privilege level before exiting the
 487:SRC/RTOS/queue.c **** 				function. */
 488:SRC/RTOS/queue.c **** 				return pdPASS;
 295              	ov	r3, #1	@,
 296 02ac 0130A0E3 		str	r3, [sp, #0]	@, D.3592
 297 02b0 00308DE5 		b	.L12	@
 298 02b4 440000EA 	.L10:
 299              		.loc 1 492 0
 489:SRC/RTOS/queue.c **** 			}
 490:SRC/RTOS/queue.c **** 			else
 491:SRC/RTOS/queue.c **** 			{
 492:SRC/RTOS/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 300              	r3, [sp, #8]	@ xTicksToWait.0, xTicksToWait
 301 02b8 08309DE5 		cmp	r3, #0	@ xTicksToWait.0,
 302 02bc 000053E3 		bne	.L13	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 15


 303 02c0 0300001A 		.loc 1 496 0
 493:SRC/RTOS/queue.c **** 				{
 494:SRC/RTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 495:SRC/RTOS/queue.c **** 					the block time has expired) so leave now. */
 496:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 304              	vPortExitCritical	@
 305 02c4 FEFFFFEB 		.loc 1 501 0
 497:SRC/RTOS/queue.c **** 
 498:SRC/RTOS/queue.c **** 					/* Return to the original privilege level before exiting
 499:SRC/RTOS/queue.c **** 					the function. */
 500:SRC/RTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 501:SRC/RTOS/queue.c **** 					return errQUEUE_FULL;
 306              	ov	r3, #0	@,
 307 02c8 0030A0E3 		str	r3, [sp, #0]	@, D.3592
 308 02cc 00308DE5 		b	.L12	@
 309 02d0 3D0000EA 	.L13:
 310              		.loc 1 503 0
 502:SRC/RTOS/queue.c **** 				}
 503:SRC/RTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 311              	r3, [sp, #28]	@ tmp153, xEntryTimeSet
 312 02d4 1C309DE5 		cmp	r3, #0	@ tmp153,
 313 02d8 000053E3 		bne	.L14	@,
 314 02dc 0400001A 		.loc 1 507 0
 504:SRC/RTOS/queue.c **** 				{
 505:SRC/RTOS/queue.c **** 					/* The queue was full and a block time was specified so
 506:SRC/RTOS/queue.c **** 					configure the timeout structure. */
 507:SRC/RTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 315              		r3, sp, #20	@ tmp154,,
 316 02e0 14308DE2 		mov	r0, r3	@, tmp154
 317 02e4 0300A0E1 		bl	vTaskSetTimeOutState	@
 318 02e8 FEFFFFEB 		.loc 1 508 0
 508:SRC/RTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 319              		r3, #1	@ tmp155,
 320 02ec 0130A0E3 		str	r3, [sp, #28]	@ tmp155, xEntryTimeSet
 321 02f0 1C308DE5 	.L14:
 322              		.loc 1 512 0
 509:SRC/RTOS/queue.c **** 				}
 510:SRC/RTOS/queue.c **** 			}
 511:SRC/RTOS/queue.c **** 		}
 512:SRC/RTOS/queue.c **** 		taskEXIT_CRITICAL();
 323              	vPortExitCritical	@
 324 02f4 FEFFFFEB 		.loc 1 517 0
 513:SRC/RTOS/queue.c **** 
 514:SRC/RTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 515:SRC/RTOS/queue.c **** 		now the critical section has been exited. */
 516:SRC/RTOS/queue.c **** 
 517:SRC/RTOS/queue.c **** 		vTaskSuspendAll();
 325              	l	vTaskSuspendAll	@
 326 02f8 FEFFFFEB 		.loc 1 518 0
 518:SRC/RTOS/queue.c **** 		prvLockQueue( pxQueue );
 327              	l	vPortEnterCritical	@
 328 02fc FEFFFFEB 		ldr	r3, [sp, #16]	@ tmp156, pxQueue
 329 0300 10309DE5 		ldr	r3, [r3, #68]	@ D.3594, <variable>.xRxLock
 330 0304 443093E5 		cmn	r3, #1	@ D.3594,
 331 0308 010073E3 		bne	.L15	@,
 332 030c 0200001A 		ldr	r2, [sp, #16]	@ tmp157, pxQueue
 333 0310 10209DE5 		mov	r3, #0	@ tmp158,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 16


 334 0314 0030A0E3 		str	r3, [r2, #68]	@ tmp158, <variable>.xRxLock
 335 0318 443082E5 	.L15:
 336              		ldr	r3, [sp, #16]	@ tmp159, pxQueue
 337 031c 10309DE5 		ldr	r3, [r3, #72]	@ D.3595, <variable>.xTxLock
 338 0320 483093E5 		cmn	r3, #1	@ D.3595,
 339 0324 010073E3 		bne	.L16	@,
 340 0328 0200001A 		ldr	r2, [sp, #16]	@ tmp160, pxQueue
 341 032c 10209DE5 		mov	r3, #0	@ tmp161,
 342 0330 0030A0E3 		str	r3, [r2, #72]	@ tmp161, <variable>.xTxLock
 343 0334 483082E5 	.L16:
 344              		bl	vPortExitCritical	@
 345 0338 FEFFFFEB 		.loc 1 521 0
 519:SRC/RTOS/queue.c **** 
 520:SRC/RTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 521:SRC/RTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 346              	tmp162,,
 347 033c 14308DE2 		add	r2, sp, #8	@ tmp163,,
 348 0340 08208DE2 		mov	r0, r3	@, tmp162
 349 0344 0300A0E1 		mov	r1, r2	@, tmp163
 350 0348 0210A0E1 		bl	xTaskCheckForTimeOut	@
 351 034c FEFFFFEB 		mov	r3, r0	@ D.3596,
 352 0350 0030A0E1 		cmp	r3, #0	@ D.3596,
 353 0354 000053E3 		bne	.L17	@,
 354 0358 1600001A 		.loc 1 523 0
 522:SRC/RTOS/queue.c **** 		{
 523:SRC/RTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) )
 355              	[sp, #16]	@, pxQueue
 356 035c 10009DE5 		bl	prvIsQueueFull	@
 357 0360 150200EB 		mov	r3, r0	@ D.3597,
 358 0364 0030A0E1 		cmp	r3, #0	@ D.3597,
 359 0368 000053E3 		beq	.L18	@,
 360 036c 0D00000A 		.loc 1 526 0
 524:SRC/RTOS/queue.c **** 			{
 525:SRC/RTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 526:SRC/RTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 361              	3, [sp, #16]	@ tmp164, pxQueue
 362 0370 10309DE5 		add	r3, r3, #16	@ D.3598, tmp164,
 363 0374 103083E2 		ldr	r2, [sp, #8]	@ xTicksToWait.1, xTicksToWait
 364 0378 08209DE5 		mov	r0, r3	@, D.3598
 365 037c 0300A0E1 		mov	r1, r2	@, xTicksToWait.1
 366 0380 0210A0E1 		bl	vTaskPlaceOnEventList	@
 367 0384 FEFFFFEB 		.loc 1 533 0
 527:SRC/RTOS/queue.c **** 
 528:SRC/RTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 529:SRC/RTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 530:SRC/RTOS/queue.c **** 				remove this task from the event	list again - but as the
 531:SRC/RTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 532:SRC/RTOS/queue.c **** 				ready last instead of the actual ready list. */
 533:SRC/RTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 368              	, [sp, #16]	@, pxQueue
 369 0388 10009DE5 		bl	prvUnlockQueue	@
 370 038c B20100EB 		.loc 1 540 0
 534:SRC/RTOS/queue.c **** 
 535:SRC/RTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 536:SRC/RTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 537:SRC/RTOS/queue.c **** 				task is already in a ready list before it yields - in which
 538:SRC/RTOS/queue.c **** 				case the yield will not cause a context switch unless there
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 17


 539:SRC/RTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 540:SRC/RTOS/queue.c **** 				if( !xTaskResumeAll() )
 371              		xTaskResumeAll	@
 372 0390 FEFFFFEB 		mov	r3, r0	@ D.3600,
 373 0394 0030A0E1 		cmp	r3, #0	@ D.3600,
 374 0398 000053E3 		bne	.L21	@,
 375 039c AAFFFF1A 		.loc 1 542 0
 541:SRC/RTOS/queue.c **** 				{
 542:SRC/RTOS/queue.c **** 					portYIELD_WITHIN_API();
 376              	 "SRC/RTOS/queue.c" 1
 377              		SWI 0
 378 03a0 000000EF 	@ 0 "" 2
 379              		b	.L21	@
 380 03a4 A8FFFFEA 	.L18:
 381              		.loc 1 548 0
 543:SRC/RTOS/queue.c **** 				}
 544:SRC/RTOS/queue.c **** 			}
 545:SRC/RTOS/queue.c **** 			else
 546:SRC/RTOS/queue.c **** 			{
 547:SRC/RTOS/queue.c **** 				/* Try again. */
 548:SRC/RTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 382              	0, [sp, #16]	@, pxQueue
 383 03a8 10009DE5 		bl	prvUnlockQueue	@
 384 03ac AA0100EB 		.loc 1 549 0
 549:SRC/RTOS/queue.c **** 				( void ) xTaskResumeAll();
 385              		xTaskResumeAll	@
 386 03b0 FEFFFFEB 		b	.L21	@
 387 03b4 A4FFFFEA 	.L17:
 388              		.loc 1 555 0
 550:SRC/RTOS/queue.c **** 			}
 551:SRC/RTOS/queue.c **** 		}
 552:SRC/RTOS/queue.c **** 		else
 553:SRC/RTOS/queue.c **** 		{
 554:SRC/RTOS/queue.c **** 			/* The timeout has expired. */
 555:SRC/RTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 389              		r0, [sp, #16]	@, pxQueue
 390 03b8 10009DE5 		bl	prvUnlockQueue	@
 391 03bc A60100EB 		.loc 1 556 0
 556:SRC/RTOS/queue.c **** 			( void ) xTaskResumeAll();
 392              		xTaskResumeAll	@
 393 03c0 FEFFFFEB 		.loc 1 561 0
 557:SRC/RTOS/queue.c **** 
 558:SRC/RTOS/queue.c **** 			/* Return to the original privilege level before exiting the
 559:SRC/RTOS/queue.c **** 			function. */
 560:SRC/RTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 561:SRC/RTOS/queue.c **** 			return errQUEUE_FULL;
 394              	ov	r3, #0	@,
 395 03c4 0030A0E3 		str	r3, [sp, #0]	@, D.3592
 396 03c8 00308DE5 	.L12:
 397              		ldr	r3, [sp, #0]	@ <result>, D.3592
 398 03cc 00309DE5 		.loc 1 564 0
 562:SRC/RTOS/queue.c **** 		}
 563:SRC/RTOS/queue.c **** 	}
 564:SRC/RTOS/queue.c **** }
 399              	r0, r3	@, <result>
 400 03d0 0300A0E1 		add	sp, sp, #32	@,,
 401 03d4 20D08DE2 		ldr	lr, [sp], #4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 18


 402 03d8 04E09DE4 		bx	lr
 403 03dc 1EFF2FE1 	.LFE4:
 404              		.size	xQueueGenericSend, .-xQueueGenericSend
 405              		.align	2
 406              		.global	xQueueGenericSendFromISR
 407              		.type	xQueueGenericSendFromISR, %function
 408              	xQueueGenericSendFromISR:
 409              	.LFB5:
 410              		.loc 1 768 0
 565:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 566:SRC/RTOS/queue.c **** 
 567:SRC/RTOS/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 568:SRC/RTOS/queue.c **** 
 569:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue,
 570:SRC/RTOS/queue.c **** 	{
 571:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 572:SRC/RTOS/queue.c **** 	xTimeOutType xTimeOut;
 573:SRC/RTOS/queue.c **** 
 574:SRC/RTOS/queue.c **** 		for( ;; )
 575:SRC/RTOS/queue.c **** 		{
 576:SRC/RTOS/queue.c **** 			taskENTER_CRITICAL();
 577:SRC/RTOS/queue.c **** 			{
 578:SRC/RTOS/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 579:SRC/RTOS/queue.c **** 				the highest priority task wanting to access the queue. */
 580:SRC/RTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 581:SRC/RTOS/queue.c **** 				{
 582:SRC/RTOS/queue.c **** 					traceQUEUE_SEND( pxQueue );
 583:SRC/RTOS/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 584:SRC/RTOS/queue.c **** 
 585:SRC/RTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 586:SRC/RTOS/queue.c **** 					queue then unblock it now. */
 587:SRC/RTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 588:SRC/RTOS/queue.c **** 					{
 589:SRC/RTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 590:SRC/RTOS/queue.c **** 						{
 591:SRC/RTOS/queue.c **** 							/* The unblocked task has a priority higher than
 592:SRC/RTOS/queue.c **** 							our own so yield immediately. */
 593:SRC/RTOS/queue.c **** 							portYIELD_WITHIN_API();
 594:SRC/RTOS/queue.c **** 						}
 595:SRC/RTOS/queue.c **** 					}
 596:SRC/RTOS/queue.c **** 
 597:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 598:SRC/RTOS/queue.c **** 					return pdPASS;
 599:SRC/RTOS/queue.c **** 				}
 600:SRC/RTOS/queue.c **** 				else
 601:SRC/RTOS/queue.c **** 				{
 602:SRC/RTOS/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 603:SRC/RTOS/queue.c **** 					{
 604:SRC/RTOS/queue.c **** 						taskEXIT_CRITICAL();
 605:SRC/RTOS/queue.c **** 						return errQUEUE_FULL;
 606:SRC/RTOS/queue.c **** 					}
 607:SRC/RTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 608:SRC/RTOS/queue.c **** 					{
 609:SRC/RTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 610:SRC/RTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 611:SRC/RTOS/queue.c **** 					}
 612:SRC/RTOS/queue.c **** 				}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 19


 613:SRC/RTOS/queue.c **** 			}
 614:SRC/RTOS/queue.c **** 			taskEXIT_CRITICAL();
 615:SRC/RTOS/queue.c **** 
 616:SRC/RTOS/queue.c **** 			taskENTER_CRITICAL();
 617:SRC/RTOS/queue.c **** 			{
 618:SRC/RTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 619:SRC/RTOS/queue.c **** 				{
 620:SRC/RTOS/queue.c **** 					if( prvIsQueueFull( pxQueue ) )
 621:SRC/RTOS/queue.c **** 					{
 622:SRC/RTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 623:SRC/RTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 624:SRC/RTOS/queue.c **** 						portYIELD_WITHIN_API();
 625:SRC/RTOS/queue.c **** 					}
 626:SRC/RTOS/queue.c **** 				}
 627:SRC/RTOS/queue.c **** 				else
 628:SRC/RTOS/queue.c **** 				{
 629:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 630:SRC/RTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 631:SRC/RTOS/queue.c **** 					return errQUEUE_FULL;
 632:SRC/RTOS/queue.c **** 				}
 633:SRC/RTOS/queue.c **** 			}
 634:SRC/RTOS/queue.c **** 			taskEXIT_CRITICAL();
 635:SRC/RTOS/queue.c **** 		}
 636:SRC/RTOS/queue.c **** 	}
 637:SRC/RTOS/queue.c **** 
 638:SRC/RTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 639:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 640:SRC/RTOS/queue.c **** 
 641:SRC/RTOS/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 642:SRC/RTOS/queue.c **** 
 643:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTic
 644:SRC/RTOS/queue.c **** 	{
 645:SRC/RTOS/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 646:SRC/RTOS/queue.c **** 	xTimeOutType xTimeOut;
 647:SRC/RTOS/queue.c **** 	signed char *pcOriginalReadPosition;
 648:SRC/RTOS/queue.c **** 
 649:SRC/RTOS/queue.c **** 		for( ;; )
 650:SRC/RTOS/queue.c **** 		{
 651:SRC/RTOS/queue.c **** 			taskENTER_CRITICAL();
 652:SRC/RTOS/queue.c **** 			{
 653:SRC/RTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 654:SRC/RTOS/queue.c **** 				{
 655:SRC/RTOS/queue.c **** 					/* Remember our read position in case we are just peeking. */
 656:SRC/RTOS/queue.c **** 					pcOriginalReadPosition = pxQueue->pcReadFrom;
 657:SRC/RTOS/queue.c **** 
 658:SRC/RTOS/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 659:SRC/RTOS/queue.c **** 
 660:SRC/RTOS/queue.c **** 					if( xJustPeeking == pdFALSE )
 661:SRC/RTOS/queue.c **** 					{
 662:SRC/RTOS/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 663:SRC/RTOS/queue.c **** 
 664:SRC/RTOS/queue.c **** 						/* We are actually removing data. */
 665:SRC/RTOS/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 666:SRC/RTOS/queue.c **** 
 667:SRC/RTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 668:SRC/RTOS/queue.c **** 						{
 669:SRC/RTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 20


 670:SRC/RTOS/queue.c **** 							{
 671:SRC/RTOS/queue.c **** 								/* Record the information required to implement
 672:SRC/RTOS/queue.c **** 								priority inheritance should it become necessary. */
 673:SRC/RTOS/queue.c **** 								pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 674:SRC/RTOS/queue.c **** 							}
 675:SRC/RTOS/queue.c **** 						}
 676:SRC/RTOS/queue.c **** 						#endif
 677:SRC/RTOS/queue.c **** 
 678:SRC/RTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 679:SRC/RTOS/queue.c **** 						{
 680:SRC/RTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 681:SRC/RTOS/queue.c **** 							{
 682:SRC/RTOS/queue.c **** 								portYIELD_WITHIN_API();
 683:SRC/RTOS/queue.c **** 							}
 684:SRC/RTOS/queue.c **** 						}
 685:SRC/RTOS/queue.c **** 					}
 686:SRC/RTOS/queue.c **** 					else
 687:SRC/RTOS/queue.c **** 					{
 688:SRC/RTOS/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 689:SRC/RTOS/queue.c **** 
 690:SRC/RTOS/queue.c **** 						/* We are not removing the data, so reset our read
 691:SRC/RTOS/queue.c **** 						pointer. */
 692:SRC/RTOS/queue.c **** 						pxQueue->pcReadFrom = pcOriginalReadPosition;
 693:SRC/RTOS/queue.c **** 
 694:SRC/RTOS/queue.c **** 						/* The data is being left in the queue, so see if there are
 695:SRC/RTOS/queue.c **** 						any other tasks waiting for the data. */
 696:SRC/RTOS/queue.c **** 						if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 697:SRC/RTOS/queue.c **** 						{
 698:SRC/RTOS/queue.c **** 							/* Tasks that are removed from the event list will get added to
 699:SRC/RTOS/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 700:SRC/RTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 701:SRC/RTOS/queue.c **** 							{
 702:SRC/RTOS/queue.c **** 								/* The task waiting has a higher priority than this task. */
 703:SRC/RTOS/queue.c **** 								portYIELD_WITHIN_API();
 704:SRC/RTOS/queue.c **** 							}
 705:SRC/RTOS/queue.c **** 						}
 706:SRC/RTOS/queue.c **** 
 707:SRC/RTOS/queue.c **** 					}
 708:SRC/RTOS/queue.c **** 
 709:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 710:SRC/RTOS/queue.c **** 					return pdPASS;
 711:SRC/RTOS/queue.c **** 				}
 712:SRC/RTOS/queue.c **** 				else
 713:SRC/RTOS/queue.c **** 				{
 714:SRC/RTOS/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 715:SRC/RTOS/queue.c **** 					{
 716:SRC/RTOS/queue.c **** 						taskEXIT_CRITICAL();
 717:SRC/RTOS/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 718:SRC/RTOS/queue.c **** 						return errQUEUE_EMPTY;
 719:SRC/RTOS/queue.c **** 					}
 720:SRC/RTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 721:SRC/RTOS/queue.c **** 					{
 722:SRC/RTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 723:SRC/RTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 724:SRC/RTOS/queue.c **** 					}
 725:SRC/RTOS/queue.c **** 				}
 726:SRC/RTOS/queue.c **** 			}
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 21


 727:SRC/RTOS/queue.c **** 			taskEXIT_CRITICAL();
 728:SRC/RTOS/queue.c **** 
 729:SRC/RTOS/queue.c **** 			taskENTER_CRITICAL();
 730:SRC/RTOS/queue.c **** 			{
 731:SRC/RTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 732:SRC/RTOS/queue.c **** 				{
 733:SRC/RTOS/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) )
 734:SRC/RTOS/queue.c **** 					{
 735:SRC/RTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 736:SRC/RTOS/queue.c **** 
 737:SRC/RTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 738:SRC/RTOS/queue.c **** 						{
 739:SRC/RTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 740:SRC/RTOS/queue.c **** 							{
 741:SRC/RTOS/queue.c **** 								portENTER_CRITICAL();
 742:SRC/RTOS/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 743:SRC/RTOS/queue.c **** 								portEXIT_CRITICAL();
 744:SRC/RTOS/queue.c **** 							}
 745:SRC/RTOS/queue.c **** 						}
 746:SRC/RTOS/queue.c **** 						#endif
 747:SRC/RTOS/queue.c **** 
 748:SRC/RTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 749:SRC/RTOS/queue.c **** 						portYIELD_WITHIN_API();
 750:SRC/RTOS/queue.c **** 					}
 751:SRC/RTOS/queue.c **** 				}
 752:SRC/RTOS/queue.c **** 				else
 753:SRC/RTOS/queue.c **** 				{
 754:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 755:SRC/RTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 756:SRC/RTOS/queue.c **** 					return errQUEUE_EMPTY;
 757:SRC/RTOS/queue.c **** 				}
 758:SRC/RTOS/queue.c **** 			}
 759:SRC/RTOS/queue.c **** 			taskEXIT_CRITICAL();
 760:SRC/RTOS/queue.c **** 		}
 761:SRC/RTOS/queue.c **** 	}
 762:SRC/RTOS/queue.c **** 
 763:SRC/RTOS/queue.c **** 
 764:SRC/RTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 765:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 766:SRC/RTOS/queue.c **** 
 767:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 768:SRC/RTOS/queue.c **** {
 411              	supports interworking.
 412              		@ args = 0, pretend = 0, frame = 24
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		str	lr, [sp, #-4]!	@,
 415 03e0 04E02DE5 	.LCFI6:
 416              		sub	sp, sp, #24	@,,
 417 03e4 18D04DE2 	.LCFI7:
 418              		str	r0, [sp, #12]	@ pxQueue, pxQueue
 419 03e8 0C008DE5 		str	r1, [sp, #8]	@ pvItemToQueue, pvItemToQueue
 420 03ec 08108DE5 		str	r2, [sp, #4]	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 421 03f0 04208DE5 		str	r3, [sp, #0]	@ xCopyPosition, xCopyPosition
 422 03f4 00308DE5 		.loc 1 777 0
 769:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
 770:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 771:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 22


 772:SRC/RTOS/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 773:SRC/RTOS/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 774:SRC/RTOS/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 775:SRC/RTOS/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 776:SRC/RTOS/queue.c **** 	by this	post). */
 777:SRC/RTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 423              	@ tmp143,
 424 03f8 0030A0E3 		str	r3, [sp, #20]	@ tmp143, uxSavedInterruptStatus
 425 03fc 14308DE5 		.loc 1 779 0
 778:SRC/RTOS/queue.c **** 	{
 779:SRC/RTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 426              	r	r3, [sp, #12]	@ tmp144, pxQueue
 427 0400 0C309DE5 		ldr	r2, [r3, #56]	@ D.3632, <variable>.uxMessagesWaiting
 428 0404 382093E5 		ldr	r3, [sp, #12]	@ tmp145, pxQueue
 429 0408 0C309DE5 		ldr	r3, [r3, #60]	@ D.3633, <variable>.uxLength
 430 040c 3C3093E5 		cmp	r2, r3	@ D.3632, D.3633
 431 0410 030052E1 		bcs	.L24	@,
 432 0414 1E00002A 		.loc 1 783 0
 780:SRC/RTOS/queue.c **** 		{
 781:SRC/RTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 782:SRC/RTOS/queue.c **** 
 783:SRC/RTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 433              	, [sp, #12]	@, pxQueue
 434 0418 0C009DE5 		ldr	r1, [sp, #8]	@, pvItemToQueue
 435 041c 08109DE5 		ldr	r2, [sp, #0]	@, xCopyPosition
 436 0420 00209DE5 		bl	prvCopyDataToQueue	@
 437 0424 100100EB 		.loc 1 787 0
 784:SRC/RTOS/queue.c **** 
 785:SRC/RTOS/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 786:SRC/RTOS/queue.c **** 			be done when the queue is unlocked later. */
 787:SRC/RTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 438              	r3, [sp, #12]	@ tmp146, pxQueue
 439 0428 0C309DE5 		ldr	r3, [r3, #72]	@ D.3634, <variable>.xTxLock
 440 042c 483093E5 		cmn	r3, #1	@ D.3634,
 441 0430 010073E3 		bne	.L25	@,
 442 0434 0E00001A 		.loc 1 789 0
 788:SRC/RTOS/queue.c **** 			{
 789:SRC/RTOS/queue.c **** 				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 443              	r3, [sp, #12]	@ tmp147, pxQueue
 444 0438 0C309DE5 		ldr	r3, [r3, #36]	@ D.3635, <variable>.xTasksWaitingToReceive.uxNumberOfItems
 445 043c 243093E5 		cmp	r3, #0	@ D.3635,
 446 0440 000053E3 		beq	.L27	@,
 447 0444 0F00000A 		.loc 1 791 0
 790:SRC/RTOS/queue.c **** 				{
 791:SRC/RTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 448              	r3, [sp, #12]	@ tmp148, pxQueue
 449 0448 0C309DE5 		add	r3, r3, #36	@ D.3636, tmp148,
 450 044c 243083E2 		mov	r0, r3	@, D.3636
 451 0450 0300A0E1 		bl	xTaskRemoveFromEventList	@
 452 0454 FEFFFFEB 		mov	r3, r0	@ D.3637,
 453 0458 0030A0E1 		cmp	r3, #0	@ D.3637,
 454 045c 000053E3 		beq	.L27	@,
 455 0460 0800000A 		.loc 1 795 0
 792:SRC/RTOS/queue.c **** 					{
 793:SRC/RTOS/queue.c **** 						/* The task waiting has a higher priority so record that a
 794:SRC/RTOS/queue.c **** 						context	switch is required. */
 795:SRC/RTOS/queue.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 23


 456              	 [sp, #4]	@ tmp149, pxHigherPriorityTaskWoken
 457 0464 04209DE5 		mov	r3, #1	@ tmp150,
 458 0468 0130A0E3 		str	r3, [r2, #0]	@ tmp150,
 459 046c 003082E5 		b	.L27	@
 460 0470 040000EA 	.L25:
 461              		.loc 1 803 0
 796:SRC/RTOS/queue.c **** 					}
 797:SRC/RTOS/queue.c **** 				}
 798:SRC/RTOS/queue.c **** 			}
 799:SRC/RTOS/queue.c **** 			else
 800:SRC/RTOS/queue.c **** 			{
 801:SRC/RTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
 802:SRC/RTOS/queue.c **** 				knows that data was posted while it was locked. */
 803:SRC/RTOS/queue.c **** 				++( pxQueue->xTxLock );
 462              	3, [sp, #12]	@ tmp151, pxQueue
 463 0474 0C309DE5 		ldr	r3, [r3, #72]	@ D.3638, <variable>.xTxLock
 464 0478 483093E5 		add	r2, r3, #1	@ D.3639, D.3638,
 465 047c 012083E2 		ldr	r3, [sp, #12]	@ tmp152, pxQueue
 466 0480 0C309DE5 		str	r2, [r3, #72]	@ D.3639, <variable>.xTxLock
 467 0484 482083E5 	.L27:
 468              		.loc 1 806 0
 804:SRC/RTOS/queue.c **** 			}
 805:SRC/RTOS/queue.c **** 
 806:SRC/RTOS/queue.c **** 			xReturn = pdPASS;
 469              	, #1	@ tmp153,
 470 0488 0130A0E3 		str	r3, [sp, #16]	@ tmp153, xReturn
 471 048c 10308DE5 		b	.L28	@
 472 0490 010000EA 	.L24:
 473              		.loc 1 811 0
 807:SRC/RTOS/queue.c **** 		}
 808:SRC/RTOS/queue.c **** 		else
 809:SRC/RTOS/queue.c **** 		{
 810:SRC/RTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 811:SRC/RTOS/queue.c **** 			xReturn = errQUEUE_FULL;
 474              	r3, #0	@ tmp154,
 475 0494 0030A0E3 		str	r3, [sp, #16]	@ tmp154, xReturn
 476 0498 10308DE5 	.L28:
 477              		.loc 1 816 0
 812:SRC/RTOS/queue.c **** 		}
 813:SRC/RTOS/queue.c **** 	}
 814:SRC/RTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 815:SRC/RTOS/queue.c **** 
 816:SRC/RTOS/queue.c **** 	return xReturn;
 478              		r3, [sp, #16]	@ D.3640, xReturn
 479 049c 10309DE5 		.loc 1 817 0
 817:SRC/RTOS/queue.c **** }
 480              	ov	r0, r3	@, <result>
 481 04a0 0300A0E1 		add	sp, sp, #24	@,,
 482 04a4 18D08DE2 		ldr	lr, [sp], #4
 483 04a8 04E09DE4 		bx	lr
 484 04ac 1EFF2FE1 	.LFE5:
 485              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 486              		.align	2
 487              		.global	xQueueGenericReceive
 488              		.type	xQueueGenericReceive, %function
 489              	xQueueGenericReceive:
 490              	.LFB6:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 24


 491              		.loc 1 821 0
 818:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 819:SRC/RTOS/queue.c **** 
 820:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 821:SRC/RTOS/queue.c **** {
 492              	supports interworking.
 493              		@ args = 0, pretend = 0, frame = 36
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		str	lr, [sp, #-4]!	@,
 496 04b0 04E02DE5 	.LCFI8:
 497              		sub	sp, sp, #36	@,,
 498 04b4 24D04DE2 	.LCFI9:
 499              		str	r0, [sp, #16]	@ pxQueue, pxQueue
 500 04b8 10008DE5 		str	r1, [sp, #12]	@ pvBuffer, pvBuffer
 501 04bc 0C108DE5 		str	r2, [sp, #8]	@ xTicksToWait, xTicksToWait
 502 04c0 08208DE5 		str	r3, [sp, #4]	@ xJustPeeking, xJustPeeking
 503 04c4 04308DE5 		.loc 1 822 0
 822:SRC/RTOS/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 504              	@ tmp158,
 505 04c8 0030A0E3 		str	r3, [sp, #28]	@ tmp158, xEntryTimeSet
 506 04cc 1C308DE5 	.L46:
 507              		.loc 1 832 0
 823:SRC/RTOS/queue.c **** xTimeOutType xTimeOut;
 824:SRC/RTOS/queue.c **** signed char *pcOriginalReadPosition;
 825:SRC/RTOS/queue.c **** 
 826:SRC/RTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 827:SRC/RTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 828:SRC/RTOS/queue.c **** 	of execution time efficiency. */
 829:SRC/RTOS/queue.c **** 
 830:SRC/RTOS/queue.c **** 	for( ;; )
 831:SRC/RTOS/queue.c **** 	{
 832:SRC/RTOS/queue.c **** 		taskENTER_CRITICAL();
 508              	vPortEnterCritical	@
 509 04d0 FEFFFFEB 		.loc 1 836 0
 833:SRC/RTOS/queue.c **** 		{
 834:SRC/RTOS/queue.c **** 			/* Is there data in the queue now?  To be running we must be
 835:SRC/RTOS/queue.c **** 			the highest priority task wanting to access the queue. */
 836:SRC/RTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 510              	dr	r3, [sp, #16]	@ tmp159, pxQueue
 511 04d4 10309DE5 		ldr	r3, [r3, #56]	@ D.3662, <variable>.uxMessagesWaiting
 512 04d8 383093E5 		cmp	r3, #0	@ D.3662,
 513 04dc 000053E3 		beq	.L31	@,
 514 04e0 3600000A 		.loc 1 839 0
 837:SRC/RTOS/queue.c **** 			{
 838:SRC/RTOS/queue.c **** 				/* Remember our read position in case we are just peeking. */
 839:SRC/RTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 515              	r3, [sp, #16]	@ tmp160, pxQueue
 516 04e4 10309DE5 		ldr	r3, [r3, #12]	@ tmp161, <variable>.pcReadFrom
 517 04e8 0C3093E5 		str	r3, [sp, #32]	@ tmp161, pcOriginalReadPosition
 518 04ec 20308DE5 		.loc 1 841 0
 840:SRC/RTOS/queue.c **** 
 841:SRC/RTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 519              		r0, [sp, #16]	@, pxQueue
 520 04f0 10009DE5 		ldr	r1, [sp, #12]	@, pvBuffer
 521 04f4 0C109DE5 		bl	prvCopyDataFromQueue	@
 522 04f8 330100EB 		.loc 1 843 0
 842:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 25


 843:SRC/RTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
 523              		r3, [sp, #4]	@ tmp162, xJustPeeking
 524 04fc 04309DE5 		cmp	r3, #0	@ tmp162,
 525 0500 000053E3 		bne	.L32	@,
 526 0504 1A00001A 		.loc 1 848 0
 844:SRC/RTOS/queue.c **** 				{
 845:SRC/RTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
 846:SRC/RTOS/queue.c **** 
 847:SRC/RTOS/queue.c **** 					/* We are actually removing data. */
 848:SRC/RTOS/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 527              		r3, [sp, #16]	@ tmp163, pxQueue
 528 0508 10309DE5 		ldr	r3, [r3, #56]	@ D.3663, <variable>.uxMessagesWaiting
 529 050c 383093E5 		sub	r2, r3, #1	@ D.3664, D.3663,
 530 0510 012043E2 		ldr	r3, [sp, #16]	@ tmp164, pxQueue
 531 0514 10309DE5 		str	r2, [r3, #56]	@ D.3664, <variable>.uxMessagesWaiting
 532 0518 382083E5 		.loc 1 852 0
 849:SRC/RTOS/queue.c **** 
 850:SRC/RTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
 851:SRC/RTOS/queue.c **** 					{
 852:SRC/RTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 533              	3, [sp, #16]	@ tmp165, pxQueue
 534 051c 10309DE5 		ldr	r3, [r3, #0]	@ D.3665, <variable>.pcHead
 535 0520 003093E5 		cmp	r3, #0	@ D.3665,
 536 0524 000053E3 		bne	.L33	@,
 537 0528 0400001A 		.loc 1 856 0
 853:SRC/RTOS/queue.c **** 						{
 854:SRC/RTOS/queue.c **** 							/* Record the information required to implement
 855:SRC/RTOS/queue.c **** 							priority inheritance should it become necessary. */
 856:SRC/RTOS/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 538              	TaskGetCurrentTaskHandle	@
 539 052c FEFFFFEB 		mov	r3, r0	@ D.3666,
 540 0530 0030A0E1 		mov	r2, r3	@ D.3667, D.3666
 541 0534 0320A0E1 		ldr	r3, [sp, #16]	@ tmp166, pxQueue
 542 0538 10309DE5 		str	r2, [r3, #4]	@ D.3667, <variable>.pcTail
 543 053c 042083E5 	.L33:
 544              		.loc 1 861 0
 857:SRC/RTOS/queue.c **** 						}
 858:SRC/RTOS/queue.c **** 					}
 859:SRC/RTOS/queue.c **** 					#endif
 860:SRC/RTOS/queue.c **** 
 861:SRC/RTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 545              	, [sp, #16]	@ tmp167, pxQueue
 546 0540 10309DE5 		ldr	r3, [r3, #16]	@ D.3668, <variable>.xTasksWaitingToSend.uxNumberOfItems
 547 0544 103093E5 		cmp	r3, #0	@ D.3668,
 548 0548 000053E3 		beq	.L35	@,
 549 054c 1700000A 		.loc 1 863 0
 862:SRC/RTOS/queue.c **** 					{
 863:SRC/RTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 550              	r3, [sp, #16]	@ tmp168, pxQueue
 551 0550 10309DE5 		add	r3, r3, #16	@ D.3669, tmp168,
 552 0554 103083E2 		mov	r0, r3	@, D.3669
 553 0558 0300A0E1 		bl	xTaskRemoveFromEventList	@
 554 055c FEFFFFEB 		mov	r3, r0	@ D.3670,
 555 0560 0030A0E1 		cmp	r3, #1	@ D.3670,
 556 0564 010053E3 		bne	.L35	@,
 557 0568 1000001A 		.loc 1 865 0
 864:SRC/RTOS/queue.c **** 						{
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 26


 865:SRC/RTOS/queue.c **** 							portYIELD_WITHIN_API();
 558              	RC/RTOS/queue.c" 1
 559              		SWI 0
 560 056c 000000EF 	@ 0 "" 2
 561              		b	.L35	@
 562 0570 0E0000EA 	.L32:
 563              		.loc 1 875 0
 866:SRC/RTOS/queue.c **** 						}
 867:SRC/RTOS/queue.c **** 					}
 868:SRC/RTOS/queue.c **** 				}
 869:SRC/RTOS/queue.c **** 				else
 870:SRC/RTOS/queue.c **** 				{
 871:SRC/RTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
 872:SRC/RTOS/queue.c **** 
 873:SRC/RTOS/queue.c **** 					/* We are not removing the data, so reset our read
 874:SRC/RTOS/queue.c **** 					pointer. */
 875:SRC/RTOS/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
 564              	2, [sp, #16]	@ tmp169, pxQueue
 565 0574 10209DE5 		ldr	r3, [sp, #32]	@ tmp170, pcOriginalReadPosition
 566 0578 20309DE5 		str	r3, [r2, #12]	@ tmp170, <variable>.pcReadFrom
 567 057c 0C3082E5 		.loc 1 879 0
 876:SRC/RTOS/queue.c **** 
 877:SRC/RTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
 878:SRC/RTOS/queue.c **** 					any other tasks waiting for the data. */
 879:SRC/RTOS/queue.c **** 					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 568              		r3, [sp, #16]	@ tmp171, pxQueue
 569 0580 10309DE5 		ldr	r3, [r3, #36]	@ D.3671, <variable>.xTasksWaitingToReceive.uxNumberOfItems
 570 0584 243093E5 		cmp	r3, #0	@ D.3671,
 571 0588 000053E3 		beq	.L35	@,
 572 058c 0700000A 		.loc 1 883 0
 880:SRC/RTOS/queue.c **** 					{
 881:SRC/RTOS/queue.c **** 						/* Tasks that are removed from the event list will get added to
 882:SRC/RTOS/queue.c **** 						the pending ready list as the scheduler is still suspended. */
 883:SRC/RTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 573              	r3, [sp, #16]	@ tmp172, pxQueue
 574 0590 10309DE5 		add	r3, r3, #36	@ D.3672, tmp172,
 575 0594 243083E2 		mov	r0, r3	@, D.3672
 576 0598 0300A0E1 		bl	xTaskRemoveFromEventList	@
 577 059c FEFFFFEB 		mov	r3, r0	@ D.3673,
 578 05a0 0030A0E1 		cmp	r3, #0	@ D.3673,
 579 05a4 000053E3 		beq	.L35	@,
 580 05a8 0000000A 		.loc 1 886 0
 884:SRC/RTOS/queue.c **** 						{
 885:SRC/RTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
 886:SRC/RTOS/queue.c **** 							portYIELD_WITHIN_API();
 581              	RC/RTOS/queue.c" 1
 582              		SWI 0
 583 05ac 000000EF 	@ 0 "" 2
 584              	.L35:
 585              		.loc 1 892 0
 887:SRC/RTOS/queue.c **** 						}
 888:SRC/RTOS/queue.c **** 					}
 889:SRC/RTOS/queue.c **** 
 890:SRC/RTOS/queue.c **** 				}
 891:SRC/RTOS/queue.c **** 
 892:SRC/RTOS/queue.c **** 				taskEXIT_CRITICAL();
 586              	PortExitCritical	@
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 27


 587 05b0 FEFFFFEB 		.loc 1 893 0
 893:SRC/RTOS/queue.c **** 				return pdPASS;
 588              	ov	r3, #1	@,
 589 05b4 0130A0E3 		str	r3, [sp, #0]	@, D.3674
 590 05b8 00308DE5 		b	.L36	@
 591 05bc 4E0000EA 	.L31:
 592              		.loc 1 897 0
 894:SRC/RTOS/queue.c **** 			}
 895:SRC/RTOS/queue.c **** 			else
 896:SRC/RTOS/queue.c **** 			{
 897:SRC/RTOS/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 593              	r3, [sp, #8]	@ xTicksToWait.2, xTicksToWait
 594 05c0 08309DE5 		cmp	r3, #0	@ xTicksToWait.2,
 595 05c4 000053E3 		bne	.L37	@,
 596 05c8 0300001A 		.loc 1 901 0
 898:SRC/RTOS/queue.c **** 				{
 899:SRC/RTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
 900:SRC/RTOS/queue.c **** 					the block time has expired) so leave now. */
 901:SRC/RTOS/queue.c **** 					taskEXIT_CRITICAL();
 597              	vPortExitCritical	@
 598 05cc FEFFFFEB 		.loc 1 903 0
 902:SRC/RTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 903:SRC/RTOS/queue.c **** 					return errQUEUE_EMPTY;
 599              	ov	r3, #0	@,
 600 05d0 0030A0E3 		str	r3, [sp, #0]	@, D.3674
 601 05d4 00308DE5 		b	.L36	@
 602 05d8 470000EA 	.L37:
 603              		.loc 1 905 0
 904:SRC/RTOS/queue.c **** 				}
 905:SRC/RTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 604              	r3, [sp, #28]	@ tmp173, xEntryTimeSet
 605 05dc 1C309DE5 		cmp	r3, #0	@ tmp173,
 606 05e0 000053E3 		bne	.L38	@,
 607 05e4 0400001A 		.loc 1 909 0
 906:SRC/RTOS/queue.c **** 				{
 907:SRC/RTOS/queue.c **** 					/* The queue was empty and a block time was specified so
 908:SRC/RTOS/queue.c **** 					configure the timeout structure. */
 909:SRC/RTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 608              		r3, sp, #20	@ tmp174,,
 609 05e8 14308DE2 		mov	r0, r3	@, tmp174
 610 05ec 0300A0E1 		bl	vTaskSetTimeOutState	@
 611 05f0 FEFFFFEB 		.loc 1 910 0
 910:SRC/RTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 612              		r3, #1	@ tmp175,
 613 05f4 0130A0E3 		str	r3, [sp, #28]	@ tmp175, xEntryTimeSet
 614 05f8 1C308DE5 	.L38:
 615              		.loc 1 914 0
 911:SRC/RTOS/queue.c **** 				}
 912:SRC/RTOS/queue.c **** 			}
 913:SRC/RTOS/queue.c **** 		}
 914:SRC/RTOS/queue.c **** 		taskEXIT_CRITICAL();
 616              	vPortExitCritical	@
 617 05fc FEFFFFEB 		.loc 1 919 0
 915:SRC/RTOS/queue.c **** 
 916:SRC/RTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 917:SRC/RTOS/queue.c **** 		now the critical section has been exited. */
 918:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 28


 919:SRC/RTOS/queue.c **** 		vTaskSuspendAll();
 618              	l	vTaskSuspendAll	@
 619 0600 FEFFFFEB 		.loc 1 920 0
 920:SRC/RTOS/queue.c **** 		prvLockQueue( pxQueue );
 620              	l	vPortEnterCritical	@
 621 0604 FEFFFFEB 		ldr	r3, [sp, #16]	@ tmp176, pxQueue
 622 0608 10309DE5 		ldr	r3, [r3, #68]	@ D.3676, <variable>.xRxLock
 623 060c 443093E5 		cmn	r3, #1	@ D.3676,
 624 0610 010073E3 		bne	.L39	@,
 625 0614 0200001A 		ldr	r2, [sp, #16]	@ tmp177, pxQueue
 626 0618 10209DE5 		mov	r3, #0	@ tmp178,
 627 061c 0030A0E3 		str	r3, [r2, #68]	@ tmp178, <variable>.xRxLock
 628 0620 443082E5 	.L39:
 629              		ldr	r3, [sp, #16]	@ tmp179, pxQueue
 630 0624 10309DE5 		ldr	r3, [r3, #72]	@ D.3677, <variable>.xTxLock
 631 0628 483093E5 		cmn	r3, #1	@ D.3677,
 632 062c 010073E3 		bne	.L40	@,
 633 0630 0200001A 		ldr	r2, [sp, #16]	@ tmp180, pxQueue
 634 0634 10209DE5 		mov	r3, #0	@ tmp181,
 635 0638 0030A0E3 		str	r3, [r2, #72]	@ tmp181, <variable>.xTxLock
 636 063c 483082E5 	.L40:
 637              		bl	vPortExitCritical	@
 638 0640 FEFFFFEB 		.loc 1 923 0
 921:SRC/RTOS/queue.c **** 
 922:SRC/RTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 923:SRC/RTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 639              	tmp182,,
 640 0644 14308DE2 		add	r2, sp, #8	@ tmp183,,
 641 0648 08208DE2 		mov	r0, r3	@, tmp182
 642 064c 0300A0E1 		mov	r1, r2	@, tmp183
 643 0650 0210A0E1 		bl	xTaskCheckForTimeOut	@
 644 0654 FEFFFFEB 		mov	r3, r0	@ D.3678,
 645 0658 0030A0E1 		cmp	r3, #0	@ D.3678,
 646 065c 000053E3 		bne	.L41	@,
 647 0660 2000001A 		.loc 1 925 0
 924:SRC/RTOS/queue.c **** 		{
 925:SRC/RTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) )
 648              	[sp, #16]	@, pxQueue
 649 0664 10009DE5 		bl	prvIsQueueEmpty	@
 650 0668 370100EB 		mov	r3, r0	@ D.3679,
 651 066c 0030A0E1 		cmp	r3, #0	@ D.3679,
 652 0670 000053E3 		beq	.L42	@,
 653 0674 1700000A 		.loc 1 931 0
 926:SRC/RTOS/queue.c **** 			{
 927:SRC/RTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 928:SRC/RTOS/queue.c **** 
 929:SRC/RTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
 930:SRC/RTOS/queue.c **** 				{
 931:SRC/RTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 654              	3, [sp, #16]	@ tmp184, pxQueue
 655 0678 10309DE5 		ldr	r3, [r3, #0]	@ D.3680, <variable>.pcHead
 656 067c 003093E5 		cmp	r3, #0	@ D.3680,
 657 0680 000053E3 		bne	.L43	@,
 658 0684 0500001A 		.loc 1 933 0
 932:SRC/RTOS/queue.c **** 					{
 933:SRC/RTOS/queue.c **** 						portENTER_CRITICAL();
 659              	PortEnterCritical	@
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 29


 660 0688 FEFFFFEB 		.loc 1 935 0
 934:SRC/RTOS/queue.c **** 						{
 935:SRC/RTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 661              	dr	r3, [sp, #16]	@ tmp185, pxQueue
 662 068c 10309DE5 		ldr	r3, [r3, #4]	@ D.3681, <variable>.pcTail
 663 0690 043093E5 		mov	r0, r3	@, D.3682
 664 0694 0300A0E1 		bl	vTaskPriorityInherit	@
 665 0698 FEFFFFEB 		.loc 1 937 0
 936:SRC/RTOS/queue.c **** 						}
 937:SRC/RTOS/queue.c **** 						portEXIT_CRITICAL();
 666              	PortExitCritical	@
 667 069c FEFFFFEB 	.L43:
 668              		.loc 1 942 0
 938:SRC/RTOS/queue.c **** 					}
 939:SRC/RTOS/queue.c **** 				}
 940:SRC/RTOS/queue.c **** 				#endif
 941:SRC/RTOS/queue.c **** 
 942:SRC/RTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 669              	r	r3, [sp, #16]	@ tmp186, pxQueue
 670 06a0 10309DE5 		add	r3, r3, #36	@ D.3683, tmp186,
 671 06a4 243083E2 		ldr	r2, [sp, #8]	@ xTicksToWait.3, xTicksToWait
 672 06a8 08209DE5 		mov	r0, r3	@, D.3683
 673 06ac 0300A0E1 		mov	r1, r2	@, xTicksToWait.3
 674 06b0 0210A0E1 		bl	vTaskPlaceOnEventList	@
 675 06b4 FEFFFFEB 		.loc 1 943 0
 943:SRC/RTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 676              	, [sp, #16]	@, pxQueue
 677 06b8 10009DE5 		bl	prvUnlockQueue	@
 678 06bc E60000EB 		.loc 1 944 0
 944:SRC/RTOS/queue.c **** 				if( !xTaskResumeAll() )
 679              		xTaskResumeAll	@
 680 06c0 FEFFFFEB 		mov	r3, r0	@ D.3685,
 681 06c4 0030A0E1 		cmp	r3, #0	@ D.3685,
 682 06c8 000053E3 		bne	.L46	@,
 683 06cc 7FFFFF1A 		.loc 1 946 0
 945:SRC/RTOS/queue.c **** 				{
 946:SRC/RTOS/queue.c **** 					portYIELD_WITHIN_API();
 684              	 "SRC/RTOS/queue.c" 1
 685              		SWI 0
 686 06d0 000000EF 	@ 0 "" 2
 687              		b	.L46	@
 688 06d4 7DFFFFEA 	.L42:
 689              		.loc 1 952 0
 947:SRC/RTOS/queue.c **** 				}
 948:SRC/RTOS/queue.c **** 			}
 949:SRC/RTOS/queue.c **** 			else
 950:SRC/RTOS/queue.c **** 			{
 951:SRC/RTOS/queue.c **** 				/* Try again. */
 952:SRC/RTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 690              	0, [sp, #16]	@, pxQueue
 691 06d8 10009DE5 		bl	prvUnlockQueue	@
 692 06dc DE0000EB 		.loc 1 953 0
 953:SRC/RTOS/queue.c **** 				( void ) xTaskResumeAll();
 693              		xTaskResumeAll	@
 694 06e0 FEFFFFEB 		b	.L46	@
 695 06e4 79FFFFEA 	.L41:
 696              		.loc 1 958 0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 30


 954:SRC/RTOS/queue.c **** 			}
 955:SRC/RTOS/queue.c **** 		}
 956:SRC/RTOS/queue.c **** 		else
 957:SRC/RTOS/queue.c **** 		{
 958:SRC/RTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 697              		r0, [sp, #16]	@, pxQueue
 698 06e8 10009DE5 		bl	prvUnlockQueue	@
 699 06ec DA0000EB 		.loc 1 959 0
 959:SRC/RTOS/queue.c **** 			( void ) xTaskResumeAll();
 700              		xTaskResumeAll	@
 701 06f0 FEFFFFEB 		.loc 1 961 0
 960:SRC/RTOS/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
 961:SRC/RTOS/queue.c **** 			return errQUEUE_EMPTY;
 702              	ov	r3, #0	@,
 703 06f4 0030A0E3 		str	r3, [sp, #0]	@, D.3674
 704 06f8 00308DE5 	.L36:
 705              		ldr	r3, [sp, #0]	@ <result>, D.3674
 706 06fc 00309DE5 		.loc 1 964 0
 962:SRC/RTOS/queue.c **** 		}
 963:SRC/RTOS/queue.c **** 	}
 964:SRC/RTOS/queue.c **** }
 707              	r0, r3	@, <result>
 708 0700 0300A0E1 		add	sp, sp, #36	@,,
 709 0704 24D08DE2 		ldr	lr, [sp], #4
 710 0708 04E09DE4 		bx	lr
 711 070c 1EFF2FE1 	.LFE6:
 712              		.size	xQueueGenericReceive, .-xQueueGenericReceive
 713              		.align	2
 714              		.global	xQueueReceiveFromISR
 715              		.type	xQueueReceiveFromISR, %function
 716              	xQueueReceiveFromISR:
 717              	.LFB7:
 718              		.loc 1 968 0
 965:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
 966:SRC/RTOS/queue.c **** 
 967:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
 968:SRC/RTOS/queue.c **** {
 719              	supports interworking.
 720              		@ args = 0, pretend = 0, frame = 20
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		str	lr, [sp, #-4]!	@,
 723 0710 04E02DE5 	.LCFI10:
 724              		sub	sp, sp, #20	@,,
 725 0714 14D04DE2 	.LCFI11:
 726              		str	r0, [sp, #8]	@ pxQueue, pxQueue
 727 0718 08008DE5 		str	r1, [sp, #4]	@ pvBuffer, pvBuffer
 728 071c 04108DE5 		str	r2, [sp, #0]	@ pxTaskWoken, pxTaskWoken
 729 0720 00208DE5 		.loc 1 972 0
 969:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
 970:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 971:SRC/RTOS/queue.c **** 
 972:SRC/RTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 730              		@ tmp144,
 731 0724 0030A0E3 		str	r3, [sp, #16]	@ tmp144, uxSavedInterruptStatus
 732 0728 10308DE5 		.loc 1 975 0
 973:SRC/RTOS/queue.c **** 	{
 974:SRC/RTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. */
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 31


 975:SRC/RTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 733              	r	r3, [sp, #8]	@ tmp145, pxQueue
 734 072c 08309DE5 		ldr	r3, [r3, #56]	@ D.3727, <variable>.uxMessagesWaiting
 735 0730 383093E5 		cmp	r3, #0	@ D.3727,
 736 0734 000053E3 		beq	.L49	@,
 737 0738 2200000A 		.loc 1 979 0
 976:SRC/RTOS/queue.c **** 		{
 977:SRC/RTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 978:SRC/RTOS/queue.c **** 
 979:SRC/RTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 738              	r0, [sp, #8]	@, pxQueue
 739 073c 08009DE5 		ldr	r1, [sp, #4]	@, pvBuffer
 740 0740 04109DE5 		bl	prvCopyDataFromQueue	@
 741 0744 A00000EB 		.loc 1 980 0
 980:SRC/RTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 742              		r3, [sp, #8]	@ tmp146, pxQueue
 743 0748 08309DE5 		ldr	r3, [r3, #56]	@ D.3728, <variable>.uxMessagesWaiting
 744 074c 383093E5 		sub	r2, r3, #1	@ D.3729, D.3728,
 745 0750 012043E2 		ldr	r3, [sp, #8]	@ tmp147, pxQueue
 746 0754 08309DE5 		str	r2, [r3, #56]	@ D.3729, <variable>.uxMessagesWaiting
 747 0758 382083E5 		.loc 1 985 0
 981:SRC/RTOS/queue.c **** 
 982:SRC/RTOS/queue.c **** 			/* If the queue is locked we will not modify the event list.  Instead
 983:SRC/RTOS/queue.c **** 			we update the lock count so the task that unlocks the queue will know
 984:SRC/RTOS/queue.c **** 			that an ISR has removed data while the queue was locked. */
 985:SRC/RTOS/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 748              	3, [sp, #8]	@ tmp148, pxQueue
 749 075c 08309DE5 		ldr	r3, [r3, #68]	@ D.3730, <variable>.xRxLock
 750 0760 443093E5 		cmn	r3, #1	@ D.3730,
 751 0764 010073E3 		bne	.L50	@,
 752 0768 0E00001A 		.loc 1 987 0
 986:SRC/RTOS/queue.c **** 			{
 987:SRC/RTOS/queue.c **** 				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
 753              	r3, [sp, #8]	@ tmp149, pxQueue
 754 076c 08309DE5 		ldr	r3, [r3, #16]	@ D.3731, <variable>.xTasksWaitingToSend.uxNumberOfItems
 755 0770 103093E5 		cmp	r3, #0	@ D.3731,
 756 0774 000053E3 		beq	.L52	@,
 757 0778 0F00000A 		.loc 1 989 0
 988:SRC/RTOS/queue.c **** 				{
 989:SRC/RTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 758              	r3, [sp, #8]	@ tmp150, pxQueue
 759 077c 08309DE5 		add	r3, r3, #16	@ D.3732, tmp150,
 760 0780 103083E2 		mov	r0, r3	@, D.3732
 761 0784 0300A0E1 		bl	xTaskRemoveFromEventList	@
 762 0788 FEFFFFEB 		mov	r3, r0	@ D.3733,
 763 078c 0030A0E1 		cmp	r3, #0	@ D.3733,
 764 0790 000053E3 		beq	.L52	@,
 765 0794 0800000A 		.loc 1 993 0
 990:SRC/RTOS/queue.c **** 					{
 991:SRC/RTOS/queue.c **** 						/* The task waiting has a higher priority than us so
 992:SRC/RTOS/queue.c **** 						force a context switch. */
 993:SRC/RTOS/queue.c **** 						*pxTaskWoken = pdTRUE;
 766              	 [sp, #0]	@ tmp151, pxTaskWoken
 767 0798 00209DE5 		mov	r3, #1	@ tmp152,
 768 079c 0130A0E3 		str	r3, [r2, #0]	@ tmp152,
 769 07a0 003082E5 		b	.L52	@
 770 07a4 040000EA 	.L50:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 32


 771              		.loc 1 1001 0
 994:SRC/RTOS/queue.c **** 					}
 995:SRC/RTOS/queue.c **** 				}
 996:SRC/RTOS/queue.c **** 			}
 997:SRC/RTOS/queue.c **** 			else
 998:SRC/RTOS/queue.c **** 			{
 999:SRC/RTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1000:SRC/RTOS/queue.c **** 				knows that data was removed while it was locked. */
1001:SRC/RTOS/queue.c **** 				++( pxQueue->xRxLock );
 772              	3, [sp, #8]	@ tmp153, pxQueue
 773 07a8 08309DE5 		ldr	r3, [r3, #68]	@ D.3734, <variable>.xRxLock
 774 07ac 443093E5 		add	r2, r3, #1	@ D.3735, D.3734,
 775 07b0 012083E2 		ldr	r3, [sp, #8]	@ tmp154, pxQueue
 776 07b4 08309DE5 		str	r2, [r3, #68]	@ D.3735, <variable>.xRxLock
 777 07b8 442083E5 	.L52:
 778              		.loc 1 1004 0
1002:SRC/RTOS/queue.c **** 			}
1003:SRC/RTOS/queue.c **** 
1004:SRC/RTOS/queue.c **** 			xReturn = pdPASS;
 779              	, #1	@ tmp155,
 780 07bc 0130A0E3 		str	r3, [sp, #12]	@ tmp155, xReturn
 781 07c0 0C308DE5 		b	.L53	@
 782 07c4 010000EA 	.L49:
 783              		.loc 1 1008 0
1005:SRC/RTOS/queue.c **** 		}
1006:SRC/RTOS/queue.c **** 		else
1007:SRC/RTOS/queue.c **** 		{
1008:SRC/RTOS/queue.c **** 			xReturn = pdFAIL;
 784              	r3, #0	@ tmp156,
 785 07c8 0030A0E3 		str	r3, [sp, #12]	@ tmp156, xReturn
 786 07cc 0C308DE5 	.L53:
 787              		.loc 1 1014 0
1009:SRC/RTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1010:SRC/RTOS/queue.c **** 		}
1011:SRC/RTOS/queue.c **** 	}
1012:SRC/RTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1013:SRC/RTOS/queue.c **** 
1014:SRC/RTOS/queue.c **** 	return xReturn;
 788              		r3, [sp, #12]	@ D.3736, xReturn
 789 07d0 0C309DE5 		.loc 1 1015 0
1015:SRC/RTOS/queue.c **** }
 790              	ov	r0, r3	@, <result>
 791 07d4 0300A0E1 		add	sp, sp, #20	@,,
 792 07d8 14D08DE2 		ldr	lr, [sp], #4
 793 07dc 04E09DE4 		bx	lr
 794 07e0 1EFF2FE1 	.LFE7:
 795              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 796              		.align	2
 797              		.global	uxQueueMessagesWaiting
 798              		.type	uxQueueMessagesWaiting, %function
 799              	uxQueueMessagesWaiting:
 800              	.LFB8:
 801              		.loc 1 1019 0
1016:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1017:SRC/RTOS/queue.c **** 
1018:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
1019:SRC/RTOS/queue.c **** {
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 33


 802              	supports interworking.
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		str	lr, [sp, #-4]!	@,
 806 07e4 04E02DE5 	.LCFI12:
 807              		sub	sp, sp, #8	@,,
 808 07e8 08D04DE2 	.LCFI13:
 809              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 810 07ec 00008DE5 		.loc 1 1022 0
1020:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxReturn;
1021:SRC/RTOS/queue.c **** 
1022:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();
 811              	EnterCritical	@
 812 07f0 FEFFFFEB 		.loc 1 1023 0
1023:SRC/RTOS/queue.c **** 		uxReturn = pxQueue->uxMessagesWaiting;
 813              	dr	r3, [sp, #0]	@ tmp135, pxQueue
 814 07f4 00309DE5 		ldr	r3, [r3, #56]	@ tmp136, <variable>.uxMessagesWaiting
 815 07f8 383093E5 		str	r3, [sp, #4]	@ tmp136, uxReturn
 816 07fc 04308DE5 		.loc 1 1024 0
1024:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();
 817              	vPortExitCritical	@
 818 0800 FEFFFFEB 		.loc 1 1026 0
1025:SRC/RTOS/queue.c **** 
1026:SRC/RTOS/queue.c **** 	return uxReturn;
 819              	dr	r3, [sp, #4]	@ D.3752, uxReturn
 820 0804 04309DE5 		.loc 1 1027 0
1027:SRC/RTOS/queue.c **** }
 821              	ov	r0, r3	@, <result>
 822 0808 0300A0E1 		add	sp, sp, #8	@,,
 823 080c 08D08DE2 		ldr	lr, [sp], #4
 824 0810 04E09DE4 		bx	lr
 825 0814 1EFF2FE1 	.LFE8:
 826              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 827              		.align	2
 828              		.global	uxQueueMessagesWaitingFromISR
 829              		.type	uxQueueMessagesWaitingFromISR, %function
 830              	uxQueueMessagesWaitingFromISR:
 831              	.LFB9:
 832              		.loc 1 1031 0
1028:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1029:SRC/RTOS/queue.c **** 
1030:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
1031:SRC/RTOS/queue.c **** {
 833              	supports interworking.
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 837              		sub	sp, sp, #8	@,,
 838 0818 08D04DE2 	.LCFI14:
 839              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 840 081c 00008DE5 		.loc 1 1034 0
1032:SRC/RTOS/queue.c **** unsigned portBASE_TYPE uxReturn;
1033:SRC/RTOS/queue.c **** 
1034:SRC/RTOS/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 841              	 [sp, #0]	@ tmp135, pxQueue
 842 0820 00309DE5 		ldr	r3, [r3, #56]	@ tmp136, <variable>.uxMessagesWaiting
 843 0824 383093E5 		str	r3, [sp, #4]	@ tmp136, uxReturn
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 34


 844 0828 04308DE5 		.loc 1 1036 0
1035:SRC/RTOS/queue.c **** 
1036:SRC/RTOS/queue.c **** 	return uxReturn;
 845              		r3, [sp, #4]	@ D.3758, uxReturn
 846 082c 04309DE5 		.loc 1 1037 0
1037:SRC/RTOS/queue.c **** }
 847              	ov	r0, r3	@, <result>
 848 0830 0300A0E1 		add	sp, sp, #8	@,,
 849 0834 08D08DE2 		bx	lr
 850 0838 1EFF2FE1 	.LFE9:
 851              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 852              		.align	2
 853              		.global	vQueueDelete
 854              		.type	vQueueDelete, %function
 855              	vQueueDelete:
 856              	.LFB10:
 857              		.loc 1 1041 0
1038:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1039:SRC/RTOS/queue.c **** 
1040:SRC/RTOS/queue.c **** void vQueueDelete( xQueueHandle pxQueue )
1041:SRC/RTOS/queue.c **** {
 858              	 supports interworking.
 859              		@ args = 0, pretend = 0, frame = 4
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		str	lr, [sp, #-4]!	@,
 862 083c 04E02DE5 	.LCFI15:
 863              		sub	sp, sp, #4	@,,
 864 0840 04D04DE2 	.LCFI16:
 865              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 866 0844 00008DE5 		.loc 1 1044 0
1042:SRC/RTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1043:SRC/RTOS/queue.c **** 	vQueueUnregisterQueue( pxQueue );
1044:SRC/RTOS/queue.c **** 	vPortFree( pxQueue->pcHead );
 867              	[sp, #0]	@ tmp134, pxQueue
 868 0848 00309DE5 		ldr	r3, [r3, #0]	@ D.3763, <variable>.pcHead
 869 084c 003093E5 		mov	r0, r3	@, D.3763
 870 0850 0300A0E1 		bl	vPortFree	@
 871 0854 FEFFFFEB 		.loc 1 1045 0
1045:SRC/RTOS/queue.c **** 	vPortFree( pxQueue );
 872              	r0, [sp, #0]	@, pxQueue
 873 0858 00009DE5 		bl	vPortFree	@
 874 085c FEFFFFEB 		.loc 1 1046 0
1046:SRC/RTOS/queue.c **** }
 875              	d	sp, sp, #4	@,,
 876 0860 04D08DE2 		ldr	lr, [sp], #4
 877 0864 04E09DE4 		bx	lr
 878 0868 1EFF2FE1 	.LFE10:
 879              		.size	vQueueDelete, .-vQueueDelete
 880              		.align	2
 881              		.type	prvCopyDataToQueue, %function
 882              	prvCopyDataToQueue:
 883              	.LFB11:
 884              		.loc 1 1050 0
1047:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1048:SRC/RTOS/queue.c **** 
1049:SRC/RTOS/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1050:SRC/RTOS/queue.c **** {
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 35


 885              	n supports interworking.
 886              		@ args = 0, pretend = 0, frame = 12
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              		str	lr, [sp, #-4]!	@,
 889 086c 04E02DE5 	.LCFI17:
 890              		sub	sp, sp, #12	@,,
 891 0870 0CD04DE2 	.LCFI18:
 892              		str	r0, [sp, #8]	@ pxQueue, pxQueue
 893 0874 08008DE5 		str	r1, [sp, #4]	@ pvItemToQueue, pvItemToQueue
 894 0878 04108DE5 		str	r2, [sp, #0]	@ xPosition, xPosition
 895 087c 00208DE5 		.loc 1 1051 0
1051:SRC/RTOS/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 896              	p, #8]	@ tmp159, pxQueue
 897 0880 08309DE5 		ldr	r3, [r3, #64]	@ D.3769, <variable>.uxItemSize
 898 0884 403093E5 		cmp	r3, #0	@ D.3769,
 899 0888 000053E3 		bne	.L62	@,
 900 088c 0B00001A 		.loc 1 1055 0
1052:SRC/RTOS/queue.c **** 	{
1053:SRC/RTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1054:SRC/RTOS/queue.c **** 		{
1055:SRC/RTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 901              	r3, [sp, #8]	@ tmp160, pxQueue
 902 0890 08309DE5 		ldr	r3, [r3, #0]	@ D.3770, <variable>.pcHead
 903 0894 003093E5 		cmp	r3, #0	@ D.3770,
 904 0898 000053E3 		bne	.L64	@,
 905 089c 4200001A 		.loc 1 1058 0
1056:SRC/RTOS/queue.c **** 			{
1057:SRC/RTOS/queue.c **** 				/* The mutex is no longer being held. */
1058:SRC/RTOS/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 906              	r3, [sp, #8]	@ tmp161, pxQueue
 907 08a0 08309DE5 		ldr	r3, [r3, #4]	@ D.3771, <variable>.pcTail
 908 08a4 043093E5 		mov	r0, r3	@, D.3772
 909 08a8 0300A0E1 		bl	vTaskPriorityDisinherit	@
 910 08ac FEFFFFEB 		.loc 1 1059 0
1059:SRC/RTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 911              	r2, [sp, #8]	@ tmp162, pxQueue
 912 08b0 08209DE5 		mov	r3, #0	@ tmp163,
 913 08b4 0030A0E3 		str	r3, [r2, #4]	@ tmp163, <variable>.pcTail
 914 08b8 043082E5 		b	.L64	@
 915 08bc 3A0000EA 	.L62:
 916              		.loc 1 1064 0
1060:SRC/RTOS/queue.c **** 			}
1061:SRC/RTOS/queue.c **** 		}
1062:SRC/RTOS/queue.c **** 		#endif
1063:SRC/RTOS/queue.c **** 	}
1064:SRC/RTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 917              	3, [sp, #0]	@ tmp164, xPosition
 918 08c0 00309DE5 		cmp	r3, #0	@ tmp164,
 919 08c4 000053E3 		bne	.L65	@,
 920 08c8 1900001A 		.loc 1 1066 0
1065:SRC/RTOS/queue.c **** 	{
1066:SRC/RTOS/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 921              		r3, [sp, #8]	@ tmp165, pxQueue
 922 08cc 08309DE5 		ldr	r2, [r3, #8]	@ D.3773, <variable>.pcWriteTo
 923 08d0 082093E5 		ldr	r3, [sp, #8]	@ tmp166, pxQueue
 924 08d4 08309DE5 		ldr	r3, [r3, #64]	@ D.3774, <variable>.uxItemSize
 925 08d8 403093E5 		mov	r0, r2	@, D.3773
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 36


 926 08dc 0200A0E1 		ldr	r1, [sp, #4]	@, pvItemToQueue
 927 08e0 04109DE5 		mov	r2, r3	@, D.3774
 928 08e4 0320A0E1 		bl	memcpy	@
 929 08e8 FEFFFFEB 		.loc 1 1067 0
1067:SRC/RTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 930              	[sp, #8]	@ tmp167, pxQueue
 931 08ec 08309DE5 		ldr	r2, [r3, #8]	@ D.3775, <variable>.pcWriteTo
 932 08f0 082093E5 		ldr	r3, [sp, #8]	@ tmp168, pxQueue
 933 08f4 08309DE5 		ldr	r3, [r3, #64]	@ D.3776, <variable>.uxItemSize
 934 08f8 403093E5 		add	r2, r2, r3	@ D.3777, D.3775, D.3776
 935 08fc 032082E0 		ldr	r3, [sp, #8]	@ tmp169, pxQueue
 936 0900 08309DE5 		str	r2, [r3, #8]	@ D.3777, <variable>.pcWriteTo
 937 0904 082083E5 		.loc 1 1068 0
1068:SRC/RTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 938              	 [sp, #8]	@ tmp170, pxQueue
 939 0908 08309DE5 		ldr	r2, [r3, #8]	@ D.3778, <variable>.pcWriteTo
 940 090c 082093E5 		ldr	r3, [sp, #8]	@ tmp171, pxQueue
 941 0910 08309DE5 		ldr	r3, [r3, #4]	@ D.3779, <variable>.pcTail
 942 0914 043093E5 		cmp	r2, r3	@ D.3778, D.3779
 943 0918 030052E1 		bcc	.L64	@,
 944 091c 2200003A 		.loc 1 1070 0
1069:SRC/RTOS/queue.c **** 		{
1070:SRC/RTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 945              	, [sp, #8]	@ tmp172, pxQueue
 946 0920 08309DE5 		ldr	r2, [r3, #0]	@ D.3780, <variable>.pcHead
 947 0924 002093E5 		ldr	r3, [sp, #8]	@ tmp173, pxQueue
 948 0928 08309DE5 		str	r2, [r3, #8]	@ D.3780, <variable>.pcWriteTo
 949 092c 082083E5 		b	.L64	@
 950 0930 1D0000EA 	.L65:
 951              		.loc 1 1075 0
1071:SRC/RTOS/queue.c **** 		}
1072:SRC/RTOS/queue.c **** 	}
1073:SRC/RTOS/queue.c **** 	else
1074:SRC/RTOS/queue.c **** 	{
1075:SRC/RTOS/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 952              	, [sp, #8]	@ tmp174, pxQueue
 953 0934 08309DE5 		ldr	r2, [r3, #12]	@ D.3781, <variable>.pcReadFrom
 954 0938 0C2093E5 		ldr	r3, [sp, #8]	@ tmp175, pxQueue
 955 093c 08309DE5 		ldr	r3, [r3, #64]	@ D.3782, <variable>.uxItemSize
 956 0940 403093E5 		mov	r0, r2	@, D.3781
 957 0944 0200A0E1 		ldr	r1, [sp, #4]	@, pvItemToQueue
 958 0948 04109DE5 		mov	r2, r3	@, D.3782
 959 094c 0320A0E1 		bl	memcpy	@
 960 0950 FEFFFFEB 		.loc 1 1076 0
1076:SRC/RTOS/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 961              	[sp, #8]	@ tmp176, pxQueue
 962 0954 08309DE5 		ldr	r2, [r3, #12]	@ D.3783, <variable>.pcReadFrom
 963 0958 0C2093E5 		ldr	r3, [sp, #8]	@ tmp177, pxQueue
 964 095c 08309DE5 		ldr	r3, [r3, #64]	@ D.3784, <variable>.uxItemSize
 965 0960 403093E5 		rsb	r3, r3, #0	@ D.3785, D.3784
 966 0964 003063E2 		add	r2, r2, r3	@ D.3786, D.3783, D.3785
 967 0968 032082E0 		ldr	r3, [sp, #8]	@ tmp178, pxQueue
 968 096c 08309DE5 		str	r2, [r3, #12]	@ D.3786, <variable>.pcReadFrom
 969 0970 0C2083E5 		.loc 1 1077 0
1077:SRC/RTOS/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 970              	[sp, #8]	@ tmp179, pxQueue
 971 0974 08309DE5 		ldr	r2, [r3, #12]	@ D.3787, <variable>.pcReadFrom
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 37


 972 0978 0C2093E5 		ldr	r3, [sp, #8]	@ tmp180, pxQueue
 973 097c 08309DE5 		ldr	r3, [r3, #0]	@ D.3788, <variable>.pcHead
 974 0980 003093E5 		cmp	r2, r3	@ D.3787, D.3788
 975 0984 030052E1 		bcs	.L64	@,
 976 0988 0700002A 		.loc 1 1079 0
1078:SRC/RTOS/queue.c **** 		{
1079:SRC/RTOS/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 977              	, [sp, #8]	@ tmp181, pxQueue
 978 098c 08309DE5 		ldr	r2, [r3, #4]	@ D.3789, <variable>.pcTail
 979 0990 042093E5 		ldr	r3, [sp, #8]	@ tmp182, pxQueue
 980 0994 08309DE5 		ldr	r3, [r3, #64]	@ D.3790, <variable>.uxItemSize
 981 0998 403093E5 		rsb	r3, r3, #0	@ D.3791, D.3790
 982 099c 003063E2 		add	r2, r2, r3	@ D.3792, D.3789, D.3791
 983 09a0 032082E0 		ldr	r3, [sp, #8]	@ tmp183, pxQueue
 984 09a4 08309DE5 		str	r2, [r3, #12]	@ D.3792, <variable>.pcReadFrom
 985 09a8 0C2083E5 	.L64:
 986              		.loc 1 1083 0
1080:SRC/RTOS/queue.c **** 		}
1081:SRC/RTOS/queue.c **** 	}
1082:SRC/RTOS/queue.c **** 
1083:SRC/RTOS/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 987              	sp, #8]	@ tmp184, pxQueue
 988 09ac 08309DE5 		ldr	r3, [r3, #56]	@ D.3793, <variable>.uxMessagesWaiting
 989 09b0 383093E5 		add	r2, r3, #1	@ D.3794, D.3793,
 990 09b4 012083E2 		ldr	r3, [sp, #8]	@ tmp185, pxQueue
 991 09b8 08309DE5 		str	r2, [r3, #56]	@ D.3794, <variable>.uxMessagesWaiting
 992 09bc 382083E5 		.loc 1 1084 0
1084:SRC/RTOS/queue.c **** }
 993              	p, sp, #12	@,,
 994 09c0 0CD08DE2 		ldr	lr, [sp], #4
 995 09c4 04E09DE4 		bx	lr
 996 09c8 1EFF2FE1 	.LFE11:
 997              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 998              		.align	2
 999              		.type	prvCopyDataFromQueue, %function
 1000              	prvCopyDataFromQueue:
 1001              	.LFB12:
 1002              		.loc 1 1088 0
1085:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1086:SRC/RTOS/queue.c **** 
1087:SRC/RTOS/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
1088:SRC/RTOS/queue.c **** {
 1003              	n supports interworking.
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		str	lr, [sp, #-4]!	@,
 1007 09cc 04E02DE5 	.LCFI19:
 1008              		sub	sp, sp, #8	@,,
 1009 09d0 08D04DE2 	.LCFI20:
 1010              		str	r0, [sp, #4]	@ pxQueue, pxQueue
 1011 09d4 04008DE5 		str	r1, [sp, #0]	@ pvBuffer, pvBuffer
 1012 09d8 00108DE5 		.loc 1 1089 0
1089:SRC/RTOS/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 1013              	sp, #4]	@ tmp142, pxQueue
 1014 09dc 04309DE5 		ldr	r3, [r3, #0]	@ D.3811, <variable>.pcHead
 1015 09e0 003093E5 		cmp	r3, #0	@ D.3811,
 1016 09e4 000053E3 		beq	.L71	@,
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 38


 1017 09e8 1800000A 		.loc 1 1091 0
1090:SRC/RTOS/queue.c **** 	{
1091:SRC/RTOS/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1018              	r3, [sp, #4]	@ tmp143, pxQueue
 1019 09ec 04309DE5 		ldr	r2, [r3, #12]	@ D.3812, <variable>.pcReadFrom
 1020 09f0 0C2093E5 		ldr	r3, [sp, #4]	@ tmp144, pxQueue
 1021 09f4 04309DE5 		ldr	r3, [r3, #64]	@ D.3813, <variable>.uxItemSize
 1022 09f8 403093E5 		add	r2, r2, r3	@ D.3814, D.3812, D.3813
 1023 09fc 032082E0 		ldr	r3, [sp, #4]	@ tmp145, pxQueue
 1024 0a00 04309DE5 		str	r2, [r3, #12]	@ D.3814, <variable>.pcReadFrom
 1025 0a04 0C2083E5 		.loc 1 1092 0
1092:SRC/RTOS/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1026              	 [sp, #4]	@ tmp146, pxQueue
 1027 0a08 04309DE5 		ldr	r2, [r3, #12]	@ D.3815, <variable>.pcReadFrom
 1028 0a0c 0C2093E5 		ldr	r3, [sp, #4]	@ tmp147, pxQueue
 1029 0a10 04309DE5 		ldr	r3, [r3, #4]	@ D.3816, <variable>.pcTail
 1030 0a14 043093E5 		cmp	r2, r3	@ D.3815, D.3816
 1031 0a18 030052E1 		bcc	.L70	@,
 1032 0a1c 0300003A 		.loc 1 1094 0
1093:SRC/RTOS/queue.c **** 		{
1094:SRC/RTOS/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
 1033              	, [sp, #4]	@ tmp148, pxQueue
 1034 0a20 04309DE5 		ldr	r2, [r3, #0]	@ D.3817, <variable>.pcHead
 1035 0a24 002093E5 		ldr	r3, [sp, #4]	@ tmp149, pxQueue
 1036 0a28 04309DE5 		str	r2, [r3, #12]	@ D.3817, <variable>.pcReadFrom
 1037 0a2c 0C2083E5 	.L70:
 1038              		.loc 1 1096 0
1095:SRC/RTOS/queue.c **** 		}
1096:SRC/RTOS/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 1039              	3, [sp, #4]	@ tmp150, pxQueue
 1040 0a30 04309DE5 		ldr	r2, [r3, #12]	@ D.3818, <variable>.pcReadFrom
 1041 0a34 0C2093E5 		ldr	r3, [sp, #4]	@ tmp151, pxQueue
 1042 0a38 04309DE5 		ldr	r3, [r3, #64]	@ D.3819, <variable>.uxItemSize
 1043 0a3c 403093E5 		ldr	r0, [sp, #0]	@, pvBuffer
 1044 0a40 00009DE5 		mov	r1, r2	@, D.3818
 1045 0a44 0210A0E1 		mov	r2, r3	@, D.3819
 1046 0a48 0320A0E1 		bl	memcpy	@
 1047 0a4c FEFFFFEB 	.L71:
 1048              		.loc 1 1098 0
1097:SRC/RTOS/queue.c **** 	}
1098:SRC/RTOS/queue.c **** }
 1049              	p, #8	@,,
 1050 0a50 08D08DE2 		ldr	lr, [sp], #4
 1051 0a54 04E09DE4 		bx	lr
 1052 0a58 1EFF2FE1 	.LFE12:
 1053              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 1054              		.align	2
 1055              		.type	prvUnlockQueue, %function
 1056              	prvUnlockQueue:
 1057              	.LFB13:
 1058              		.loc 1 1102 0
1099:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1100:SRC/RTOS/queue.c **** 
1101:SRC/RTOS/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue )
1102:SRC/RTOS/queue.c **** {
 1059              	n supports interworking.
 1060              		@ args = 0, pretend = 0, frame = 4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 39


 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		str	lr, [sp, #-4]!	@,
 1063 0a5c 04E02DE5 	.LCFI21:
 1064              		sub	sp, sp, #4	@,,
 1065 0a60 04D04DE2 	.LCFI22:
 1066              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 1067 0a64 00008DE5 		.loc 1 1109 0
1103:SRC/RTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1104:SRC/RTOS/queue.c **** 
1105:SRC/RTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1106:SRC/RTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1107:SRC/RTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1108:SRC/RTOS/queue.c **** 	updated. */
1109:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();
 1068              	EnterCritical	@
 1069 0a68 FEFFFFEB 		b	.L73	@
 1070 0a6c 100000EA 	.L76:
 1071              		.loc 1 1116 0
1110:SRC/RTOS/queue.c **** 	{
1111:SRC/RTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1112:SRC/RTOS/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1113:SRC/RTOS/queue.c **** 		{
1114:SRC/RTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1115:SRC/RTOS/queue.c **** 			blocked waiting for data to become available? */
1116:SRC/RTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
 1072              		r3, [sp, #0]	@ tmp145, pxQueue
 1073 0a70 00309DE5 		ldr	r3, [r3, #36]	@ D.3833, <variable>.xTasksWaitingToReceive.uxNumberOfItems
 1074 0a74 243093E5 		cmp	r3, #0	@ D.3833,
 1075 0a78 000053E3 		beq	.L74	@,
 1076 0a7c 1000000A 		.loc 1 1120 0
1117:SRC/RTOS/queue.c **** 			{
1118:SRC/RTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1119:SRC/RTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1120:SRC/RTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1077              	r3, [sp, #0]	@ tmp146, pxQueue
 1078 0a80 00309DE5 		add	r3, r3, #36	@ D.3834, tmp146,
 1079 0a84 243083E2 		mov	r0, r3	@, D.3834
 1080 0a88 0300A0E1 		bl	xTaskRemoveFromEventList	@
 1081 0a8c FEFFFFEB 		mov	r3, r0	@ D.3835,
 1082 0a90 0030A0E1 		cmp	r3, #0	@ D.3835,
 1083 0a94 000053E3 		beq	.L75	@,
 1084 0a98 0000000A 		.loc 1 1124 0
1121:SRC/RTOS/queue.c **** 				{
1122:SRC/RTOS/queue.c **** 					/* The task waiting has a higher priority so record that a
1123:SRC/RTOS/queue.c **** 					context	switch is required. */
1124:SRC/RTOS/queue.c **** 					vTaskMissedYield();
 1085              	kMissedYield	@
 1086 0a9c FEFFFFEB 	.L75:
 1087              		.loc 1 1127 0
1125:SRC/RTOS/queue.c **** 				}
1126:SRC/RTOS/queue.c **** 
1127:SRC/RTOS/queue.c **** 				--( pxQueue->xTxLock );
 1088              	r	r3, [sp, #0]	@ tmp147, pxQueue
 1089 0aa0 00309DE5 		ldr	r3, [r3, #72]	@ D.3836, <variable>.xTxLock
 1090 0aa4 483093E5 		sub	r2, r3, #1	@ D.3837, D.3836,
 1091 0aa8 012043E2 		ldr	r3, [sp, #0]	@ tmp148, pxQueue
 1092 0aac 00309DE5 		str	r2, [r3, #72]	@ D.3837, <variable>.xTxLock
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 40


 1093 0ab0 482083E5 	.L73:
 1094              		.loc 1 1112 0
 1095              		ldr	r3, [sp, #0]	@ tmp149, pxQueue
 1096 0ab4 00309DE5 		ldr	r3, [r3, #72]	@ D.3838, <variable>.xTxLock
 1097 0ab8 483093E5 		cmp	r3, #0	@ D.3838,
 1098 0abc 000053E3 		bgt	.L76	@,
 1099 0ac0 EAFFFFCA 	.L74:
 1100              		.loc 1 1135 0
1128:SRC/RTOS/queue.c **** 			}
1129:SRC/RTOS/queue.c **** 			else
1130:SRC/RTOS/queue.c **** 			{
1131:SRC/RTOS/queue.c **** 				break;
1132:SRC/RTOS/queue.c **** 			}
1133:SRC/RTOS/queue.c **** 		}
1134:SRC/RTOS/queue.c **** 
1135:SRC/RTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 1101              	 #0]	@ tmp150, pxQueue
 1102 0ac4 00209DE5 		mvn	r3, #0	@ tmp151,
 1103 0ac8 0030E0E3 		str	r3, [r2, #72]	@ tmp151, <variable>.xTxLock
 1104 0acc 483082E5 		.loc 1 1137 0
1136:SRC/RTOS/queue.c **** 	}
1137:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();
 1105              	vPortExitCritical	@
 1106 0ad0 FEFFFFEB 		.loc 1 1140 0
1138:SRC/RTOS/queue.c **** 
1139:SRC/RTOS/queue.c **** 	/* Do the same for the Rx lock. */
1140:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();
 1107              	l	vPortEnterCritical	@
 1108 0ad4 FEFFFFEB 		b	.L77	@
 1109 0ad8 100000EA 	.L80:
 1110              		.loc 1 1144 0
1141:SRC/RTOS/queue.c **** 	{
1142:SRC/RTOS/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1143:SRC/RTOS/queue.c **** 		{
1144:SRC/RTOS/queue.c **** 			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
 1111              		r3, [sp, #0]	@ tmp152, pxQueue
 1112 0adc 00309DE5 		ldr	r3, [r3, #16]	@ D.3839, <variable>.xTasksWaitingToSend.uxNumberOfItems
 1113 0ae0 103093E5 		cmp	r3, #0	@ D.3839,
 1114 0ae4 000053E3 		beq	.L78	@,
 1115 0ae8 1000000A 		.loc 1 1146 0
1145:SRC/RTOS/queue.c **** 			{
1146:SRC/RTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1116              	r3, [sp, #0]	@ tmp153, pxQueue
 1117 0aec 00309DE5 		add	r3, r3, #16	@ D.3840, tmp153,
 1118 0af0 103083E2 		mov	r0, r3	@, D.3840
 1119 0af4 0300A0E1 		bl	xTaskRemoveFromEventList	@
 1120 0af8 FEFFFFEB 		mov	r3, r0	@ D.3841,
 1121 0afc 0030A0E1 		cmp	r3, #0	@ D.3841,
 1122 0b00 000053E3 		beq	.L79	@,
 1123 0b04 0000000A 		.loc 1 1148 0
1147:SRC/RTOS/queue.c **** 				{
1148:SRC/RTOS/queue.c **** 					vTaskMissedYield();
 1124              	kMissedYield	@
 1125 0b08 FEFFFFEB 	.L79:
 1126              		.loc 1 1151 0
1149:SRC/RTOS/queue.c **** 				}
1150:SRC/RTOS/queue.c **** 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 41


1151:SRC/RTOS/queue.c **** 				--( pxQueue->xRxLock );
 1127              	r	r3, [sp, #0]	@ tmp154, pxQueue
 1128 0b0c 00309DE5 		ldr	r3, [r3, #68]	@ D.3842, <variable>.xRxLock
 1129 0b10 443093E5 		sub	r2, r3, #1	@ D.3843, D.3842,
 1130 0b14 012043E2 		ldr	r3, [sp, #0]	@ tmp155, pxQueue
 1131 0b18 00309DE5 		str	r2, [r3, #68]	@ D.3843, <variable>.xRxLock
 1132 0b1c 442083E5 	.L77:
 1133              		.loc 1 1142 0
 1134              		ldr	r3, [sp, #0]	@ tmp156, pxQueue
 1135 0b20 00309DE5 		ldr	r3, [r3, #68]	@ D.3844, <variable>.xRxLock
 1136 0b24 443093E5 		cmp	r3, #0	@ D.3844,
 1137 0b28 000053E3 		bgt	.L80	@,
 1138 0b2c EAFFFFCA 	.L78:
 1139              		.loc 1 1159 0
1152:SRC/RTOS/queue.c **** 			}
1153:SRC/RTOS/queue.c **** 			else
1154:SRC/RTOS/queue.c **** 			{
1155:SRC/RTOS/queue.c **** 				break;
1156:SRC/RTOS/queue.c **** 			}
1157:SRC/RTOS/queue.c **** 		}
1158:SRC/RTOS/queue.c **** 
1159:SRC/RTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 1140              	 #0]	@ tmp157, pxQueue
 1141 0b30 00209DE5 		mvn	r3, #0	@ tmp158,
 1142 0b34 0030E0E3 		str	r3, [r2, #68]	@ tmp158, <variable>.xRxLock
 1143 0b38 443082E5 		.loc 1 1161 0
1160:SRC/RTOS/queue.c **** 	}
1161:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();
 1144              	vPortExitCritical	@
 1145 0b3c FEFFFFEB 		.loc 1 1162 0
1162:SRC/RTOS/queue.c **** }
 1146              	dd	sp, sp, #4	@,,
 1147 0b40 04D08DE2 		ldr	lr, [sp], #4
 1148 0b44 04E09DE4 		bx	lr
 1149 0b48 1EFF2FE1 	.LFE13:
 1150              		.size	prvUnlockQueue, .-prvUnlockQueue
 1151              		.align	2
 1152              		.type	prvIsQueueEmpty, %function
 1153              	prvIsQueueEmpty:
 1154              	.LFB14:
 1155              		.loc 1 1166 0
1163:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1164:SRC/RTOS/queue.c **** 
1165:SRC/RTOS/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
1166:SRC/RTOS/queue.c **** {
 1156              	n supports interworking.
 1157              		@ args = 0, pretend = 0, frame = 8
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              		str	lr, [sp, #-4]!	@,
 1160 0b4c 04E02DE5 	.LCFI23:
 1161              		sub	sp, sp, #8	@,,
 1162 0b50 08D04DE2 	.LCFI24:
 1163              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 1164 0b54 00008DE5 		.loc 1 1169 0
1167:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
1168:SRC/RTOS/queue.c **** 
1169:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 42


 1165              	EnterCritical	@
 1166 0b58 FEFFFFEB 		.loc 1 1170 0
1170:SRC/RTOS/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 1167              	dr	r3, [sp, #0]	@ tmp136, pxQueue
 1168 0b5c 00309DE5 		ldr	r3, [r3, #56]	@ D.3855, <variable>.uxMessagesWaiting
 1169 0b60 383093E5 		cmp	r3, #0	@ D.3855,
 1170 0b64 000053E3 		movne	r3, #0	@, tmp137
 1171 0b68 0030A013 		moveq	r3, #1	@, tmp137
 1172 0b6c 0130A003 		str	r3, [sp, #4]	@ tmp137, xReturn
 1173 0b70 04308DE5 		.loc 1 1171 0
1171:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();
 1174              	rtExitCritical	@
 1175 0b74 FEFFFFEB 		.loc 1 1173 0
1172:SRC/RTOS/queue.c **** 
1173:SRC/RTOS/queue.c **** 	return xReturn;
 1176              	dr	r3, [sp, #4]	@ D.3856, xReturn
 1177 0b78 04309DE5 		.loc 1 1174 0
1174:SRC/RTOS/queue.c **** }
 1178              	ov	r0, r3	@, <result>
 1179 0b7c 0300A0E1 		add	sp, sp, #8	@,,
 1180 0b80 08D08DE2 		ldr	lr, [sp], #4
 1181 0b84 04E09DE4 		bx	lr
 1182 0b88 1EFF2FE1 	.LFE14:
 1183              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 1184              		.align	2
 1185              		.global	xQueueIsQueueEmptyFromISR
 1186              		.type	xQueueIsQueueEmptyFromISR, %function
 1187              	xQueueIsQueueEmptyFromISR:
 1188              	.LFB15:
 1189              		.loc 1 1178 0
1175:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1176:SRC/RTOS/queue.c **** 
1177:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
1178:SRC/RTOS/queue.c **** {
 1190              	supports interworking.
 1191              		@ args = 0, pretend = 0, frame = 8
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              		@ link register save eliminated.
 1194              		sub	sp, sp, #8	@,,
 1195 0b8c 08D04DE2 	.LCFI25:
 1196              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 1197 0b90 00008DE5 		.loc 1 1181 0
1179:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
1180:SRC/RTOS/queue.c **** 
1181:SRC/RTOS/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 1198              	 [sp, #0]	@ tmp136, pxQueue
 1199 0b94 00309DE5 		ldr	r3, [r3, #56]	@ D.3862, <variable>.uxMessagesWaiting
 1200 0b98 383093E5 		cmp	r3, #0	@ D.3862,
 1201 0b9c 000053E3 		movne	r3, #0	@, tmp137
 1202 0ba0 0030A013 		moveq	r3, #1	@, tmp137
 1203 0ba4 0130A003 		str	r3, [sp, #4]	@ tmp137, xReturn
 1204 0ba8 04308DE5 		.loc 1 1183 0
1182:SRC/RTOS/queue.c **** 
1183:SRC/RTOS/queue.c **** 	return xReturn;
 1205              	, [sp, #4]	@ D.3863, xReturn
 1206 0bac 04309DE5 		.loc 1 1184 0
1184:SRC/RTOS/queue.c **** }
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 43


 1207              	ov	r0, r3	@, <result>
 1208 0bb0 0300A0E1 		add	sp, sp, #8	@,,
 1209 0bb4 08D08DE2 		bx	lr
 1210 0bb8 1EFF2FE1 	.LFE15:
 1211              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 1212              		.align	2
 1213              		.type	prvIsQueueFull, %function
 1214              	prvIsQueueFull:
 1215              	.LFB16:
 1216              		.loc 1 1188 0
1185:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1186:SRC/RTOS/queue.c **** 
1187:SRC/RTOS/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
1188:SRC/RTOS/queue.c **** {
 1217              	n supports interworking.
 1218              		@ args = 0, pretend = 0, frame = 8
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		str	lr, [sp, #-4]!	@,
 1221 0bbc 04E02DE5 	.LCFI26:
 1222              		sub	sp, sp, #8	@,,
 1223 0bc0 08D04DE2 	.LCFI27:
 1224              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 1225 0bc4 00008DE5 		.loc 1 1191 0
1189:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
1190:SRC/RTOS/queue.c **** 
1191:SRC/RTOS/queue.c **** 	taskENTER_CRITICAL();
 1226              	EnterCritical	@
 1227 0bc8 FEFFFFEB 		.loc 1 1192 0
1192:SRC/RTOS/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 1228              	dr	r3, [sp, #0]	@ tmp137, pxQueue
 1229 0bcc 00309DE5 		ldr	r2, [r3, #56]	@ D.3869, <variable>.uxMessagesWaiting
 1230 0bd0 382093E5 		ldr	r3, [sp, #0]	@ tmp138, pxQueue
 1231 0bd4 00309DE5 		ldr	r3, [r3, #60]	@ D.3870, <variable>.uxLength
 1232 0bd8 3C3093E5 		cmp	r2, r3	@ D.3869, D.3870
 1233 0bdc 030052E1 		movne	r3, #0	@, tmp139
 1234 0be0 0030A013 		moveq	r3, #1	@, tmp139
 1235 0be4 0130A003 		str	r3, [sp, #4]	@ tmp139, xReturn
 1236 0be8 04308DE5 		.loc 1 1193 0
1193:SRC/RTOS/queue.c **** 	taskEXIT_CRITICAL();
 1237              	ExitCritical	@
 1238 0bec FEFFFFEB 		.loc 1 1195 0
1194:SRC/RTOS/queue.c **** 
1195:SRC/RTOS/queue.c **** 	return xReturn;
 1239              	dr	r3, [sp, #4]	@ D.3871, xReturn
 1240 0bf0 04309DE5 		.loc 1 1196 0
1196:SRC/RTOS/queue.c **** }
 1241              	ov	r0, r3	@, <result>
 1242 0bf4 0300A0E1 		add	sp, sp, #8	@,,
 1243 0bf8 08D08DE2 		ldr	lr, [sp], #4
 1244 0bfc 04E09DE4 		bx	lr
 1245 0c00 1EFF2FE1 	.LFE16:
 1246              		.size	prvIsQueueFull, .-prvIsQueueFull
 1247              		.align	2
 1248              		.global	xQueueIsQueueFullFromISR
 1249              		.type	xQueueIsQueueFullFromISR, %function
 1250              	xQueueIsQueueFullFromISR:
 1251              	.LFB17:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 44


 1252              		.loc 1 1200 0
1197:SRC/RTOS/queue.c **** /*-----------------------------------------------------------*/
1198:SRC/RTOS/queue.c **** 
1199:SRC/RTOS/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
1200:SRC/RTOS/queue.c **** {
 1253              	supports interworking.
 1254              		@ args = 0, pretend = 0, frame = 8
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 1257              		sub	sp, sp, #8	@,,
 1258 0c04 08D04DE2 	.LCFI28:
 1259              		str	r0, [sp, #0]	@ pxQueue, pxQueue
 1260 0c08 00008DE5 		.loc 1 1203 0
1201:SRC/RTOS/queue.c **** signed portBASE_TYPE xReturn;
1202:SRC/RTOS/queue.c **** 
1203:SRC/RTOS/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 1261              	 [sp, #0]	@ tmp137, pxQueue
 1262 0c0c 00309DE5 		ldr	r2, [r3, #56]	@ D.3877, <variable>.uxMessagesWaiting
 1263 0c10 382093E5 		ldr	r3, [sp, #0]	@ tmp138, pxQueue
 1264 0c14 00309DE5 		ldr	r3, [r3, #60]	@ D.3878, <variable>.uxLength
 1265 0c18 3C3093E5 		cmp	r2, r3	@ D.3877, D.3878
 1266 0c1c 030052E1 		movne	r3, #0	@, tmp139
 1267 0c20 0030A013 		moveq	r3, #1	@, tmp139
 1268 0c24 0130A003 		str	r3, [sp, #4]	@ tmp139, xReturn
 1269 0c28 04308DE5 		.loc 1 1205 0
1204:SRC/RTOS/queue.c **** 
1205:SRC/RTOS/queue.c **** 	return xReturn;
 1270              	[sp, #4]	@ D.3879, xReturn
 1271 0c2c 04309DE5 		.loc 1 1206 0
1206:SRC/RTOS/queue.c **** }
 1272              	ov	r0, r3	@, <result>
 1273 0c30 0300A0E1 		add	sp, sp, #8	@,,
 1274 0c34 08D08DE2 		bx	lr
 1275 0c38 1EFF2FE1 	.LFE17:
 1276              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 1277              		.section	.debug_frame,"",%progbits
 1278              	.Lframe0:
 1279              		.4byte	.LECIE0-.LSCIE0
 1280 0000 0C000000 	.LSCIE0:
 1281              		.4byte	0xffffffff
 1282 0004 FFFFFFFF 		.byte	0x1
 1283 0008 01       		.ascii	"\000"
 1284 0009 00       		.uleb128 0x1
 1285 000a 01       		.sleb128 -4
 1286 000b 7C       		.byte	0xe
 1287 000c 0E       		.byte	0xc
 1288 000d 0C       		.uleb128 0xd
 1289 000e 0D       		.uleb128 0x0
 1290 000f 00       		.align	2
 1291              	.LECIE0:
 1292              	.LSFDE0:
 1293              		.4byte	.LEFDE0-.LASFDE0
 1294 0010 14000000 	.LASFDE0:
 1295              		.4byte	.Lframe0
 1296 0014 00000000 		.4byte	.LFB2
 1297 0018 00000000 		.4byte	.LFE2-.LFB2
 1298 001c 54010000 		.byte	0x4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 45


 1299 0020 44       		.4byte	.LCFI0-.LFB2
 1300              		.byte	0xe
 1301 0021 0E       		.uleb128 0x4
 1302 0022 04       		.byte	0x4
 1303 0023 44       		.4byte	.LCFI1-.LCFI0
 1304              		.byte	0xe
 1305 0024 0E       		.uleb128 0x18
 1306 0025 18       		.byte	0x8e
 1307 0026 8E       		.uleb128 0x1
 1308 0027 01       		.align	2
 1309              	.LEFDE0:
 1310              	.LSFDE2:
 1311              		.4byte	.LEFDE2-.LASFDE2
 1312 0028 14000000 	.LASFDE2:
 1313              		.4byte	.Lframe0
 1314 002c 00000000 		.4byte	.LFB3
 1315 0030 54010000 		.4byte	.LFE3-.LFB3
 1316 0034 D8000000 		.byte	0x4
 1317 0038 44       		.4byte	.LCFI2-.LFB3
 1318              		.byte	0xe
 1319 0039 0E       		.uleb128 0x4
 1320 003a 04       		.byte	0x4
 1321 003b 44       		.4byte	.LCFI3-.LCFI2
 1322              		.byte	0xe
 1323 003c 0E       		.uleb128 0x8
 1324 003d 08       		.byte	0x8e
 1325 003e 8E       		.uleb128 0x1
 1326 003f 01       		.align	2
 1327              	.LEFDE2:
 1328              	.LSFDE4:
 1329              		.4byte	.LEFDE4-.LASFDE4
 1330 0040 14000000 	.LASFDE4:
 1331              		.4byte	.Lframe0
 1332 0044 00000000 		.4byte	.LFB4
 1333 0048 2C020000 		.4byte	.LFE4-.LFB4
 1334 004c B4010000 		.byte	0x4
 1335 0050 44       		.4byte	.LCFI4-.LFB4
 1336              		.byte	0xe
 1337 0051 0E       		.uleb128 0x4
 1338 0052 04       		.byte	0x4
 1339 0053 44       		.4byte	.LCFI5-.LCFI4
 1340              		.byte	0xe
 1341 0054 0E       		.uleb128 0x24
 1342 0055 24       		.byte	0x8e
 1343 0056 8E       		.uleb128 0x1
 1344 0057 01       		.align	2
 1345              	.LEFDE4:
 1346              	.LSFDE6:
 1347              		.4byte	.LEFDE6-.LASFDE6
 1348 0058 14000000 	.LASFDE6:
 1349              		.4byte	.Lframe0
 1350 005c 00000000 		.4byte	.LFB5
 1351 0060 E0030000 		.4byte	.LFE5-.LFB5
 1352 0064 D0000000 		.byte	0x4
 1353 0068 44       		.4byte	.LCFI6-.LFB5
 1354              		.byte	0xe
 1355 0069 0E       		.uleb128 0x4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 46


 1356 006a 04       		.byte	0x4
 1357 006b 44       		.4byte	.LCFI7-.LCFI6
 1358              		.byte	0xe
 1359 006c 0E       		.uleb128 0x1c
 1360 006d 1C       		.byte	0x8e
 1361 006e 8E       		.uleb128 0x1
 1362 006f 01       		.align	2
 1363              	.LEFDE6:
 1364              	.LSFDE8:
 1365              		.4byte	.LEFDE8-.LASFDE8
 1366 0070 14000000 	.LASFDE8:
 1367              		.4byte	.Lframe0
 1368 0074 00000000 		.4byte	.LFB6
 1369 0078 B0040000 		.4byte	.LFE6-.LFB6
 1370 007c 60020000 		.byte	0x4
 1371 0080 44       		.4byte	.LCFI8-.LFB6
 1372              		.byte	0xe
 1373 0081 0E       		.uleb128 0x4
 1374 0082 04       		.byte	0x4
 1375 0083 44       		.4byte	.LCFI9-.LCFI8
 1376              		.byte	0xe
 1377 0084 0E       		.uleb128 0x28
 1378 0085 28       		.byte	0x8e
 1379 0086 8E       		.uleb128 0x1
 1380 0087 01       		.align	2
 1381              	.LEFDE8:
 1382              	.LSFDE10:
 1383              		.4byte	.LEFDE10-.LASFDE10
 1384 0088 14000000 	.LASFDE10:
 1385              		.4byte	.Lframe0
 1386 008c 00000000 		.4byte	.LFB7
 1387 0090 10070000 		.4byte	.LFE7-.LFB7
 1388 0094 D4000000 		.byte	0x4
 1389 0098 44       		.4byte	.LCFI10-.LFB7
 1390              		.byte	0xe
 1391 0099 0E       		.uleb128 0x4
 1392 009a 04       		.byte	0x4
 1393 009b 44       		.4byte	.LCFI11-.LCFI10
 1394              		.byte	0xe
 1395 009c 0E       		.uleb128 0x18
 1396 009d 18       		.byte	0x8e
 1397 009e 8E       		.uleb128 0x1
 1398 009f 01       		.align	2
 1399              	.LEFDE10:
 1400              	.LSFDE12:
 1401              		.4byte	.LEFDE12-.LASFDE12
 1402 00a0 14000000 	.LASFDE12:
 1403              		.4byte	.Lframe0
 1404 00a4 00000000 		.4byte	.LFB8
 1405 00a8 E4070000 		.4byte	.LFE8-.LFB8
 1406 00ac 34000000 		.byte	0x4
 1407 00b0 44       		.4byte	.LCFI12-.LFB8
 1408              		.byte	0xe
 1409 00b1 0E       		.uleb128 0x4
 1410 00b2 04       		.byte	0x4
 1411 00b3 44       		.4byte	.LCFI13-.LCFI12
 1412              		.byte	0xe
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 47


 1413 00b4 0E       		.uleb128 0xc
 1414 00b5 0C       		.byte	0x8e
 1415 00b6 8E       		.uleb128 0x1
 1416 00b7 01       		.align	2
 1417              	.LEFDE12:
 1418              	.LSFDE14:
 1419              		.4byte	.LEFDE14-.LASFDE14
 1420 00b8 10000000 	.LASFDE14:
 1421              		.4byte	.Lframe0
 1422 00bc 00000000 		.4byte	.LFB9
 1423 00c0 18080000 		.4byte	.LFE9-.LFB9
 1424 00c4 24000000 		.byte	0x4
 1425 00c8 44       		.4byte	.LCFI14-.LFB9
 1426              		.byte	0xe
 1427 00c9 0E       		.uleb128 0x8
 1428 00ca 08       		.align	2
 1429 00cb 00       	.LEFDE14:
 1430              	.LSFDE16:
 1431              		.4byte	.LEFDE16-.LASFDE16
 1432 00cc 14000000 	.LASFDE16:
 1433              		.4byte	.Lframe0
 1434 00d0 00000000 		.4byte	.LFB10
 1435 00d4 3C080000 		.4byte	.LFE10-.LFB10
 1436 00d8 30000000 		.byte	0x4
 1437 00dc 44       		.4byte	.LCFI15-.LFB10
 1438              		.byte	0xe
 1439 00dd 0E       		.uleb128 0x4
 1440 00de 04       		.byte	0x4
 1441 00df 44       		.4byte	.LCFI16-.LCFI15
 1442              		.byte	0xe
 1443 00e0 0E       		.uleb128 0x8
 1444 00e1 08       		.byte	0x8e
 1445 00e2 8E       		.uleb128 0x1
 1446 00e3 01       		.align	2
 1447              	.LEFDE16:
 1448              	.LSFDE18:
 1449              		.4byte	.LEFDE18-.LASFDE18
 1450 00e4 14000000 	.LASFDE18:
 1451              		.4byte	.Lframe0
 1452 00e8 00000000 		.4byte	.LFB11
 1453 00ec 6C080000 		.4byte	.LFE11-.LFB11
 1454 00f0 60010000 		.byte	0x4
 1455 00f4 44       		.4byte	.LCFI17-.LFB11
 1456              		.byte	0xe
 1457 00f5 0E       		.uleb128 0x4
 1458 00f6 04       		.byte	0x4
 1459 00f7 44       		.4byte	.LCFI18-.LCFI17
 1460              		.byte	0xe
 1461 00f8 0E       		.uleb128 0x10
 1462 00f9 10       		.byte	0x8e
 1463 00fa 8E       		.uleb128 0x1
 1464 00fb 01       		.align	2
 1465              	.LEFDE18:
 1466              	.LSFDE20:
 1467              		.4byte	.LEFDE20-.LASFDE20
 1468 00fc 14000000 	.LASFDE20:
 1469              		.4byte	.Lframe0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 48


 1470 0100 00000000 		.4byte	.LFB12
 1471 0104 CC090000 		.4byte	.LFE12-.LFB12
 1472 0108 90000000 		.byte	0x4
 1473 010c 44       		.4byte	.LCFI19-.LFB12
 1474              		.byte	0xe
 1475 010d 0E       		.uleb128 0x4
 1476 010e 04       		.byte	0x4
 1477 010f 44       		.4byte	.LCFI20-.LCFI19
 1478              		.byte	0xe
 1479 0110 0E       		.uleb128 0xc
 1480 0111 0C       		.byte	0x8e
 1481 0112 8E       		.uleb128 0x1
 1482 0113 01       		.align	2
 1483              	.LEFDE20:
 1484              	.LSFDE22:
 1485              		.4byte	.LEFDE22-.LASFDE22
 1486 0114 14000000 	.LASFDE22:
 1487              		.4byte	.Lframe0
 1488 0118 00000000 		.4byte	.LFB13
 1489 011c 5C0A0000 		.4byte	.LFE13-.LFB13
 1490 0120 F0000000 		.byte	0x4
 1491 0124 44       		.4byte	.LCFI21-.LFB13
 1492              		.byte	0xe
 1493 0125 0E       		.uleb128 0x4
 1494 0126 04       		.byte	0x4
 1495 0127 44       		.4byte	.LCFI22-.LCFI21
 1496              		.byte	0xe
 1497 0128 0E       		.uleb128 0x8
 1498 0129 08       		.byte	0x8e
 1499 012a 8E       		.uleb128 0x1
 1500 012b 01       		.align	2
 1501              	.LEFDE22:
 1502              	.LSFDE24:
 1503              		.4byte	.LEFDE24-.LASFDE24
 1504 012c 14000000 	.LASFDE24:
 1505              		.4byte	.Lframe0
 1506 0130 00000000 		.4byte	.LFB14
 1507 0134 4C0B0000 		.4byte	.LFE14-.LFB14
 1508 0138 40000000 		.byte	0x4
 1509 013c 44       		.4byte	.LCFI23-.LFB14
 1510              		.byte	0xe
 1511 013d 0E       		.uleb128 0x4
 1512 013e 04       		.byte	0x4
 1513 013f 44       		.4byte	.LCFI24-.LCFI23
 1514              		.byte	0xe
 1515 0140 0E       		.uleb128 0xc
 1516 0141 0C       		.byte	0x8e
 1517 0142 8E       		.uleb128 0x1
 1518 0143 01       		.align	2
 1519              	.LEFDE24:
 1520              	.LSFDE26:
 1521              		.4byte	.LEFDE26-.LASFDE26
 1522 0144 10000000 	.LASFDE26:
 1523              		.4byte	.Lframe0
 1524 0148 00000000 		.4byte	.LFB15
 1525 014c 8C0B0000 		.4byte	.LFE15-.LFB15
 1526 0150 30000000 		.byte	0x4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 49


 1527 0154 44       		.4byte	.LCFI25-.LFB15
 1528              		.byte	0xe
 1529 0155 0E       		.uleb128 0x8
 1530 0156 08       		.align	2
 1531 0157 00       	.LEFDE26:
 1532              	.LSFDE28:
 1533              		.4byte	.LEFDE28-.LASFDE28
 1534 0158 14000000 	.LASFDE28:
 1535              		.4byte	.Lframe0
 1536 015c 00000000 		.4byte	.LFB16
 1537 0160 BC0B0000 		.4byte	.LFE16-.LFB16
 1538 0164 48000000 		.byte	0x4
 1539 0168 44       		.4byte	.LCFI26-.LFB16
 1540              		.byte	0xe
 1541 0169 0E       		.uleb128 0x4
 1542 016a 04       		.byte	0x4
 1543 016b 44       		.4byte	.LCFI27-.LCFI26
 1544              		.byte	0xe
 1545 016c 0E       		.uleb128 0xc
 1546 016d 0C       		.byte	0x8e
 1547 016e 8E       		.uleb128 0x1
 1548 016f 01       		.align	2
 1549              	.LEFDE28:
 1550              	.LSFDE30:
 1551              		.4byte	.LEFDE30-.LASFDE30
 1552 0170 10000000 	.LASFDE30:
 1553              		.4byte	.Lframe0
 1554 0174 00000000 		.4byte	.LFB17
 1555 0178 040C0000 		.4byte	.LFE17-.LFB17
 1556 017c 38000000 		.byte	0x4
 1557 0180 44       		.4byte	.LCFI28-.LFB17
 1558              		.byte	0xe
 1559 0181 0E       		.uleb128 0x8
 1560 0182 08       		.align	2
 1561 0183 00       	.LEFDE30:
 1562              		.text
 1563              	.Letext0:
 1564              		.section	.debug_loc,"",%progbits
 1565              	.Ldebug_loc0:
 1566              	.LLST0:
 1567              		.4byte	.LFB2-.Ltext0
 1568 0000 00000000 		.4byte	.LCFI0-.Ltext0
 1569 0004 04000000 		.2byte	0x1
 1570 0008 0100     		.byte	0x5d
 1571 000a 5D       		.4byte	.LCFI0-.Ltext0
 1572 000b 04000000 		.4byte	.LCFI1-.Ltext0
 1573 000f 08000000 		.2byte	0x2
 1574 0013 0200     		.byte	0x7d
 1575 0015 7D       		.sleb128 4
 1576 0016 04       		.4byte	.LCFI1-.Ltext0
 1577 0017 08000000 		.4byte	.LFE2-.Ltext0
 1578 001b 54010000 		.2byte	0x2
 1579 001f 0200     		.byte	0x7d
 1580 0021 7D       		.sleb128 24
 1581 0022 18       		.4byte	0x0
 1582 0023 00000000 		.4byte	0x0
 1583 0027 00000000 	.LLST1:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 50


 1584              		.4byte	.LFB3-.Ltext0
 1585 002b 54010000 		.4byte	.LCFI2-.Ltext0
 1586 002f 58010000 		.2byte	0x1
 1587 0033 0100     		.byte	0x5d
 1588 0035 5D       		.4byte	.LCFI2-.Ltext0
 1589 0036 58010000 		.4byte	.LCFI3-.Ltext0
 1590 003a 5C010000 		.2byte	0x2
 1591 003e 0200     		.byte	0x7d
 1592 0040 7D       		.sleb128 4
 1593 0041 04       		.4byte	.LCFI3-.Ltext0
 1594 0042 5C010000 		.4byte	.LFE3-.Ltext0
 1595 0046 2C020000 		.2byte	0x2
 1596 004a 0200     		.byte	0x7d
 1597 004c 7D       		.sleb128 8
 1598 004d 08       		.4byte	0x0
 1599 004e 00000000 		.4byte	0x0
 1600 0052 00000000 	.LLST2:
 1601              		.4byte	.LFB4-.Ltext0
 1602 0056 2C020000 		.4byte	.LCFI4-.Ltext0
 1603 005a 30020000 		.2byte	0x1
 1604 005e 0100     		.byte	0x5d
 1605 0060 5D       		.4byte	.LCFI4-.Ltext0
 1606 0061 30020000 		.4byte	.LCFI5-.Ltext0
 1607 0065 34020000 		.2byte	0x2
 1608 0069 0200     		.byte	0x7d
 1609 006b 7D       		.sleb128 4
 1610 006c 04       		.4byte	.LCFI5-.Ltext0
 1611 006d 34020000 		.4byte	.LFE4-.Ltext0
 1612 0071 E0030000 		.2byte	0x2
 1613 0075 0200     		.byte	0x7d
 1614 0077 7D       		.sleb128 36
 1615 0078 24       		.4byte	0x0
 1616 0079 00000000 		.4byte	0x0
 1617 007d 00000000 	.LLST3:
 1618              		.4byte	.LFB5-.Ltext0
 1619 0081 E0030000 		.4byte	.LCFI6-.Ltext0
 1620 0085 E4030000 		.2byte	0x1
 1621 0089 0100     		.byte	0x5d
 1622 008b 5D       		.4byte	.LCFI6-.Ltext0
 1623 008c E4030000 		.4byte	.LCFI7-.Ltext0
 1624 0090 E8030000 		.2byte	0x2
 1625 0094 0200     		.byte	0x7d
 1626 0096 7D       		.sleb128 4
 1627 0097 04       		.4byte	.LCFI7-.Ltext0
 1628 0098 E8030000 		.4byte	.LFE5-.Ltext0
 1629 009c B0040000 		.2byte	0x2
 1630 00a0 0200     		.byte	0x7d
 1631 00a2 7D       		.sleb128 28
 1632 00a3 1C       		.4byte	0x0
 1633 00a4 00000000 		.4byte	0x0
 1634 00a8 00000000 	.LLST4:
 1635              		.4byte	.LFB6-.Ltext0
 1636 00ac B0040000 		.4byte	.LCFI8-.Ltext0
 1637 00b0 B4040000 		.2byte	0x1
 1638 00b4 0100     		.byte	0x5d
 1639 00b6 5D       		.4byte	.LCFI8-.Ltext0
 1640 00b7 B4040000 		.4byte	.LCFI9-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 51


 1641 00bb B8040000 		.2byte	0x2
 1642 00bf 0200     		.byte	0x7d
 1643 00c1 7D       		.sleb128 4
 1644 00c2 04       		.4byte	.LCFI9-.Ltext0
 1645 00c3 B8040000 		.4byte	.LFE6-.Ltext0
 1646 00c7 10070000 		.2byte	0x2
 1647 00cb 0200     		.byte	0x7d
 1648 00cd 7D       		.sleb128 40
 1649 00ce 28       		.4byte	0x0
 1650 00cf 00000000 		.4byte	0x0
 1651 00d3 00000000 	.LLST5:
 1652              		.4byte	.LFB7-.Ltext0
 1653 00d7 10070000 		.4byte	.LCFI10-.Ltext0
 1654 00db 14070000 		.2byte	0x1
 1655 00df 0100     		.byte	0x5d
 1656 00e1 5D       		.4byte	.LCFI10-.Ltext0
 1657 00e2 14070000 		.4byte	.LCFI11-.Ltext0
 1658 00e6 18070000 		.2byte	0x2
 1659 00ea 0200     		.byte	0x7d
 1660 00ec 7D       		.sleb128 4
 1661 00ed 04       		.4byte	.LCFI11-.Ltext0
 1662 00ee 18070000 		.4byte	.LFE7-.Ltext0
 1663 00f2 E4070000 		.2byte	0x2
 1664 00f6 0200     		.byte	0x7d
 1665 00f8 7D       		.sleb128 24
 1666 00f9 18       		.4byte	0x0
 1667 00fa 00000000 		.4byte	0x0
 1668 00fe 00000000 	.LLST6:
 1669              		.4byte	.LFB8-.Ltext0
 1670 0102 E4070000 		.4byte	.LCFI12-.Ltext0
 1671 0106 E8070000 		.2byte	0x1
 1672 010a 0100     		.byte	0x5d
 1673 010c 5D       		.4byte	.LCFI12-.Ltext0
 1674 010d E8070000 		.4byte	.LCFI13-.Ltext0
 1675 0111 EC070000 		.2byte	0x2
 1676 0115 0200     		.byte	0x7d
 1677 0117 7D       		.sleb128 4
 1678 0118 04       		.4byte	.LCFI13-.Ltext0
 1679 0119 EC070000 		.4byte	.LFE8-.Ltext0
 1680 011d 18080000 		.2byte	0x2
 1681 0121 0200     		.byte	0x7d
 1682 0123 7D       		.sleb128 12
 1683 0124 0C       		.4byte	0x0
 1684 0125 00000000 		.4byte	0x0
 1685 0129 00000000 	.LLST7:
 1686              		.4byte	.LFB9-.Ltext0
 1687 012d 18080000 		.4byte	.LCFI14-.Ltext0
 1688 0131 1C080000 		.2byte	0x1
 1689 0135 0100     		.byte	0x5d
 1690 0137 5D       		.4byte	.LCFI14-.Ltext0
 1691 0138 1C080000 		.4byte	.LFE9-.Ltext0
 1692 013c 3C080000 		.2byte	0x2
 1693 0140 0200     		.byte	0x7d
 1694 0142 7D       		.sleb128 8
 1695 0143 08       		.4byte	0x0
 1696 0144 00000000 		.4byte	0x0
 1697 0148 00000000 	.LLST8:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 52


 1698              		.4byte	.LFB10-.Ltext0
 1699 014c 3C080000 		.4byte	.LCFI15-.Ltext0
 1700 0150 40080000 		.2byte	0x1
 1701 0154 0100     		.byte	0x5d
 1702 0156 5D       		.4byte	.LCFI15-.Ltext0
 1703 0157 40080000 		.4byte	.LCFI16-.Ltext0
 1704 015b 44080000 		.2byte	0x2
 1705 015f 0200     		.byte	0x7d
 1706 0161 7D       		.sleb128 4
 1707 0162 04       		.4byte	.LCFI16-.Ltext0
 1708 0163 44080000 		.4byte	.LFE10-.Ltext0
 1709 0167 6C080000 		.2byte	0x2
 1710 016b 0200     		.byte	0x7d
 1711 016d 7D       		.sleb128 8
 1712 016e 08       		.4byte	0x0
 1713 016f 00000000 		.4byte	0x0
 1714 0173 00000000 	.LLST9:
 1715              		.4byte	.LFB11-.Ltext0
 1716 0177 6C080000 		.4byte	.LCFI17-.Ltext0
 1717 017b 70080000 		.2byte	0x1
 1718 017f 0100     		.byte	0x5d
 1719 0181 5D       		.4byte	.LCFI17-.Ltext0
 1720 0182 70080000 		.4byte	.LCFI18-.Ltext0
 1721 0186 74080000 		.2byte	0x2
 1722 018a 0200     		.byte	0x7d
 1723 018c 7D       		.sleb128 4
 1724 018d 04       		.4byte	.LCFI18-.Ltext0
 1725 018e 74080000 		.4byte	.LFE11-.Ltext0
 1726 0192 CC090000 		.2byte	0x2
 1727 0196 0200     		.byte	0x7d
 1728 0198 7D       		.sleb128 16
 1729 0199 10       		.4byte	0x0
 1730 019a 00000000 		.4byte	0x0
 1731 019e 00000000 	.LLST10:
 1732              		.4byte	.LFB12-.Ltext0
 1733 01a2 CC090000 		.4byte	.LCFI19-.Ltext0
 1734 01a6 D0090000 		.2byte	0x1
 1735 01aa 0100     		.byte	0x5d
 1736 01ac 5D       		.4byte	.LCFI19-.Ltext0
 1737 01ad D0090000 		.4byte	.LCFI20-.Ltext0
 1738 01b1 D4090000 		.2byte	0x2
 1739 01b5 0200     		.byte	0x7d
 1740 01b7 7D       		.sleb128 4
 1741 01b8 04       		.4byte	.LCFI20-.Ltext0
 1742 01b9 D4090000 		.4byte	.LFE12-.Ltext0
 1743 01bd 5C0A0000 		.2byte	0x2
 1744 01c1 0200     		.byte	0x7d
 1745 01c3 7D       		.sleb128 12
 1746 01c4 0C       		.4byte	0x0
 1747 01c5 00000000 		.4byte	0x0
 1748 01c9 00000000 	.LLST11:
 1749              		.4byte	.LFB13-.Ltext0
 1750 01cd 5C0A0000 		.4byte	.LCFI21-.Ltext0
 1751 01d1 600A0000 		.2byte	0x1
 1752 01d5 0100     		.byte	0x5d
 1753 01d7 5D       		.4byte	.LCFI21-.Ltext0
 1754 01d8 600A0000 		.4byte	.LCFI22-.Ltext0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 53


 1755 01dc 640A0000 		.2byte	0x2
 1756 01e0 0200     		.byte	0x7d
 1757 01e2 7D       		.sleb128 4
 1758 01e3 04       		.4byte	.LCFI22-.Ltext0
 1759 01e4 640A0000 		.4byte	.LFE13-.Ltext0
 1760 01e8 4C0B0000 		.2byte	0x2
 1761 01ec 0200     		.byte	0x7d
 1762 01ee 7D       		.sleb128 8
 1763 01ef 08       		.4byte	0x0
 1764 01f0 00000000 		.4byte	0x0
 1765 01f4 00000000 	.LLST12:
 1766              		.4byte	.LFB14-.Ltext0
 1767 01f8 4C0B0000 		.4byte	.LCFI23-.Ltext0
 1768 01fc 500B0000 		.2byte	0x1
 1769 0200 0100     		.byte	0x5d
 1770 0202 5D       		.4byte	.LCFI23-.Ltext0
 1771 0203 500B0000 		.4byte	.LCFI24-.Ltext0
 1772 0207 540B0000 		.2byte	0x2
 1773 020b 0200     		.byte	0x7d
 1774 020d 7D       		.sleb128 4
 1775 020e 04       		.4byte	.LCFI24-.Ltext0
 1776 020f 540B0000 		.4byte	.LFE14-.Ltext0
 1777 0213 8C0B0000 		.2byte	0x2
 1778 0217 0200     		.byte	0x7d
 1779 0219 7D       		.sleb128 12
 1780 021a 0C       		.4byte	0x0
 1781 021b 00000000 		.4byte	0x0
 1782 021f 00000000 	.LLST13:
 1783              		.4byte	.LFB15-.Ltext0
 1784 0223 8C0B0000 		.4byte	.LCFI25-.Ltext0
 1785 0227 900B0000 		.2byte	0x1
 1786 022b 0100     		.byte	0x5d
 1787 022d 5D       		.4byte	.LCFI25-.Ltext0
 1788 022e 900B0000 		.4byte	.LFE15-.Ltext0
 1789 0232 BC0B0000 		.2byte	0x2
 1790 0236 0200     		.byte	0x7d
 1791 0238 7D       		.sleb128 8
 1792 0239 08       		.4byte	0x0
 1793 023a 00000000 		.4byte	0x0
 1794 023e 00000000 	.LLST14:
 1795              		.4byte	.LFB16-.Ltext0
 1796 0242 BC0B0000 		.4byte	.LCFI26-.Ltext0
 1797 0246 C00B0000 		.2byte	0x1
 1798 024a 0100     		.byte	0x5d
 1799 024c 5D       		.4byte	.LCFI26-.Ltext0
 1800 024d C00B0000 		.4byte	.LCFI27-.Ltext0
 1801 0251 C40B0000 		.2byte	0x2
 1802 0255 0200     		.byte	0x7d
 1803 0257 7D       		.sleb128 4
 1804 0258 04       		.4byte	.LCFI27-.Ltext0
 1805 0259 C40B0000 		.4byte	.LFE16-.Ltext0
 1806 025d 040C0000 		.2byte	0x2
 1807 0261 0200     		.byte	0x7d
 1808 0263 7D       		.sleb128 12
 1809 0264 0C       		.4byte	0x0
 1810 0265 00000000 		.4byte	0x0
 1811 0269 00000000 	.LLST15:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 54


 1812              		.4byte	.LFB17-.Ltext0
 1813 026d 040C0000 		.4byte	.LCFI28-.Ltext0
 1814 0271 080C0000 		.2byte	0x1
 1815 0275 0100     		.byte	0x5d
 1816 0277 5D       		.4byte	.LCFI28-.Ltext0
 1817 0278 080C0000 		.4byte	.LFE17-.Ltext0
 1818 027c 3C0C0000 		.2byte	0x2
 1819 0280 0200     		.byte	0x7d
 1820 0282 7D       		.sleb128 8
 1821 0283 08       		.4byte	0x0
 1822 0284 00000000 		.4byte	0x0
 1823 0288 00000000 		.file 2 "d:\\programy\\mikrokontrolery\\arm\\yagarto\\bin\\../lib/gcc/arm-elf/4.3.3/include/stddef
 1824              		.file 3 "INC/RTOS/portmacro.h"
 1825              		.file 4 "INC/RTOS/list.h"
 1826              		.file 5 "INC/RTOS/task.h"
 1827              		.section	.debug_info
 1828              		.4byte	0x750
 1829 0000 50070000 		.2byte	0x2
 1830 0004 0200     		.4byte	.Ldebug_abbrev0
 1831 0006 00000000 		.byte	0x4
 1832 000a 04       		.uleb128 0x1
 1833 000b 01       		.4byte	.LASF78
 1834 000c 0D000000 		.byte	0x1
 1835 0010 01       		.4byte	.LASF79
 1836 0011 65020000 		.4byte	.LASF80
 1837 0015 82020000 		.4byte	.Ltext0
 1838 0019 00000000 		.4byte	.Letext0
 1839 001d 3C0C0000 		.4byte	.Ldebug_line0
 1840 0021 00000000 		.uleb128 0x2
 1841 0025 02       		.4byte	.LASF10
 1842 0026 2D000000 		.byte	0x2
 1843 002a 02       		.byte	0xd6
 1844 002b D6       		.4byte	0x30
 1845 002c 30000000 		.uleb128 0x3
 1846 0030 03       		.byte	0x4
 1847 0031 04       		.byte	0x7
 1848 0032 07       		.4byte	.LASF0
 1849 0033 B0030000 		.uleb128 0x4
 1850 0037 04       		.byte	0x4
 1851 0038 04       		.byte	0x5
 1852 0039 05       		.ascii	"int\000"
 1853 003a 696E7400 		.uleb128 0x3
 1854 003e 03       		.byte	0x1
 1855 003f 01       		.byte	0x6
 1856 0040 06       		.4byte	.LASF1
 1857 0041 19020000 		.uleb128 0x3
 1858 0045 03       		.byte	0x1
 1859 0046 01       		.byte	0x8
 1860 0047 08       		.4byte	.LASF2
 1861 0048 EC010000 		.uleb128 0x3
 1862 004c 03       		.byte	0x2
 1863 004d 02       		.byte	0x5
 1864 004e 05       		.4byte	.LASF3
 1865 004f 23000000 		.uleb128 0x3
 1866 0053 03       		.byte	0x2
 1867 0054 02       		.byte	0x7
 1868 0055 07       		.4byte	.LASF4
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 55


 1869 0056 F4020000 		.uleb128 0x3
 1870 005a 03       		.byte	0x4
 1871 005b 04       		.byte	0x7
 1872 005c 07       		.4byte	.LASF5
 1873 005d 58020000 		.uleb128 0x3
 1874 0061 03       		.byte	0x8
 1875 0062 08       		.byte	0x5
 1876 0063 05       		.4byte	.LASF6
 1877 0064 2D010000 		.uleb128 0x3
 1878 0068 03       		.byte	0x8
 1879 0069 08       		.byte	0x7
 1880 006a 07       		.4byte	.LASF7
 1881 006b 3A020000 		.uleb128 0x3
 1882 006f 03       		.byte	0x4
 1883 0070 04       		.byte	0x5
 1884 0071 05       		.4byte	.LASF8
 1885 0072 64010000 		.uleb128 0x5
 1886 0076 05       		.byte	0x4
 1887 0077 04       		.byte	0x7
 1888 0078 07       		.uleb128 0x6
 1889 0079 06       		.byte	0x4
 1890 007a 04       		.uleb128 0x3
 1891 007b 03       		.byte	0x1
 1892 007c 01       		.byte	0x8
 1893 007d 08       		.4byte	.LASF9
 1894 007e 36030000 		.uleb128 0x2
 1895 0082 02       		.4byte	.LASF11
 1896 0083 67000000 		.byte	0x3
 1897 0087 03       		.byte	0x6b
 1898 0088 6B       		.4byte	0x30
 1899 0089 30000000 		.uleb128 0x7
 1900 008d 07       		.4byte	.LASF18
 1901 008e D3010000 		.byte	0x14
 1902 0092 14       		.byte	0x4
 1903 0093 04       		.byte	0x63
 1904 0094 63       		.4byte	0xe0
 1905 0095 E0000000 		.uleb128 0x8
 1906 0099 08       		.4byte	.LASF12
 1907 009a 8D010000 		.byte	0x4
 1908 009e 04       		.byte	0x64
 1909 009f 64       		.4byte	0x82
 1910 00a0 82000000 		.byte	0x2
 1911 00a4 02       		.byte	0x23
 1912 00a5 23       		.uleb128 0x0
 1913 00a6 00       		.uleb128 0x8
 1914 00a7 08       		.4byte	.LASF13
 1915 00a8 3F000000 		.byte	0x4
 1916 00ac 04       		.byte	0x65
 1917 00ad 65       		.4byte	0xe0
 1918 00ae E0000000 		.byte	0x2
 1919 00b2 02       		.byte	0x23
 1920 00b3 23       		.uleb128 0x4
 1921 00b4 04       		.uleb128 0x8
 1922 00b5 08       		.4byte	.LASF14
 1923 00b6 34000000 		.byte	0x4
 1924 00ba 04       		.byte	0x66
 1925 00bb 66       		.4byte	0xe0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 56


 1926 00bc E0000000 		.byte	0x2
 1927 00c0 02       		.byte	0x23
 1928 00c1 23       		.uleb128 0x8
 1929 00c2 08       		.uleb128 0x8
 1930 00c3 08       		.4byte	.LASF15
 1931 00c4 8E000000 		.byte	0x4
 1932 00c8 04       		.byte	0x67
 1933 00c9 67       		.4byte	0x79
 1934 00ca 79000000 		.byte	0x2
 1935 00ce 02       		.byte	0x23
 1936 00cf 23       		.uleb128 0xc
 1937 00d0 0C       		.uleb128 0x8
 1938 00d1 08       		.4byte	.LASF16
 1939 00d2 76020000 		.byte	0x4
 1940 00d6 04       		.byte	0x68
 1941 00d7 68       		.4byte	0x79
 1942 00d8 79000000 		.byte	0x2
 1943 00dc 02       		.byte	0x23
 1944 00dd 23       		.uleb128 0x10
 1945 00de 10       		.byte	0x0
 1946 00df 00       		.uleb128 0x9
 1947 00e0 09       		.byte	0x4
 1948 00e1 04       		.4byte	0xe6
 1949 00e2 E6000000 		.uleb128 0xa
 1950 00e6 0A       		.4byte	.LASF18
 1951 00e7 D3010000 		.4byte	0x8d
 1952 00eb 8D000000 		.uleb128 0x2
 1953 00ef 02       		.4byte	.LASF17
 1954 00f0 E2030000 		.byte	0x4
 1955 00f4 04       		.byte	0x6a
 1956 00f5 6A       		.4byte	0x8d
 1957 00f6 8D000000 		.uleb128 0x7
 1958 00fa 07       		.4byte	.LASF19
 1959 00fb 7A040000 		.byte	0xc
 1960 00ff 0C       		.byte	0x4
 1961 0100 04       		.byte	0x6d
 1962 0101 6D       		.4byte	0x131
 1963 0102 31010000 		.uleb128 0x8
 1964 0106 08       		.4byte	.LASF12
 1965 0107 8D010000 		.byte	0x4
 1966 010b 04       		.byte	0x6e
 1967 010c 6E       		.4byte	0x82
 1968 010d 82000000 		.byte	0x2
 1969 0111 02       		.byte	0x23
 1970 0112 23       		.uleb128 0x0
 1971 0113 00       		.uleb128 0x8
 1972 0114 08       		.4byte	.LASF13
 1973 0115 3F000000 		.byte	0x4
 1974 0119 04       		.byte	0x6f
 1975 011a 6F       		.4byte	0xe0
 1976 011b E0000000 		.byte	0x2
 1977 011f 02       		.byte	0x23
 1978 0120 23       		.uleb128 0x4
 1979 0121 04       		.uleb128 0x8
 1980 0122 08       		.4byte	.LASF14
 1981 0123 34000000 		.byte	0x4
 1982 0127 04       		.byte	0x70
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 57


 1983 0128 70       		.4byte	0xe0
 1984 0129 E0000000 		.byte	0x2
 1985 012d 02       		.byte	0x23
 1986 012e 23       		.uleb128 0x8
 1987 012f 08       		.byte	0x0
 1988 0130 00       		.uleb128 0x2
 1989 0131 02       		.4byte	.LASF20
 1990 0132 DE010000 		.byte	0x4
 1991 0136 04       		.byte	0x72
 1992 0137 72       		.4byte	0xfa
 1993 0138 FA000000 		.uleb128 0x7
 1994 013c 07       		.4byte	.LASF21
 1995 013d 6D010000 		.byte	0x14
 1996 0141 14       		.byte	0x4
 1997 0142 04       		.byte	0x78
 1998 0143 78       		.4byte	0x173
 1999 0144 73010000 		.uleb128 0x8
 2000 0148 08       		.4byte	.LASF22
 2001 0149 D2030000 		.byte	0x4
 2002 014d 04       		.byte	0x79
 2003 014e 79       		.4byte	0x173
 2004 014f 73010000 		.byte	0x2
 2005 0153 02       		.byte	0x23
 2006 0154 23       		.uleb128 0x0
 2007 0155 00       		.uleb128 0x8
 2008 0156 08       		.4byte	.LASF23
 2009 0157 72040000 		.byte	0x4
 2010 015b 04       		.byte	0x7a
 2011 015c 7A       		.4byte	0x178
 2012 015d 78010000 		.byte	0x2
 2013 0161 02       		.byte	0x23
 2014 0162 23       		.uleb128 0x4
 2015 0163 04       		.uleb128 0x8
 2016 0164 08       		.4byte	.LASF24
 2017 0165 0E010000 		.byte	0x4
 2018 0169 04       		.byte	0x7b
 2019 016a 7B       		.4byte	0x183
 2020 016b 83010000 		.byte	0x2
 2021 016f 02       		.byte	0x23
 2022 0170 23       		.uleb128 0x8
 2023 0171 08       		.byte	0x0
 2024 0172 00       		.uleb128 0xb
 2025 0173 0B       		.4byte	0x30
 2026 0174 30000000 		.uleb128 0x9
 2027 0178 09       		.byte	0x4
 2028 0179 04       		.4byte	0x17e
 2029 017a 7E010000 		.uleb128 0xb
 2030 017e 0B       		.4byte	0xef
 2031 017f EF000000 		.uleb128 0xb
 2032 0183 0B       		.4byte	0x131
 2033 0184 31010000 		.uleb128 0x2
 2034 0188 02       		.4byte	.LASF25
 2035 0189 43010000 		.byte	0x4
 2036 018d 04       		.byte	0x7c
 2037 018e 7C       		.4byte	0x13c
 2038 018f 3C010000 		.uleb128 0x7
 2039 0193 07       		.4byte	.LASF26
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 58


 2040 0194 19000000 		.byte	0x8
 2041 0198 08       		.byte	0x5
 2042 0199 05       		.byte	0x5d
 2043 019a 5D       		.4byte	0x1bc
 2044 019b BC010000 		.uleb128 0x8
 2045 019f 08       		.4byte	.LASF27
 2046 01a0 0A020000 		.byte	0x5
 2047 01a4 05       		.byte	0x5e
 2048 01a5 5E       		.4byte	0x6f
 2049 01a6 6F000000 		.byte	0x2
 2050 01aa 02       		.byte	0x23
 2051 01ab 23       		.uleb128 0x0
 2052 01ac 00       		.uleb128 0x8
 2053 01ad 08       		.4byte	.LASF28
 2054 01ae FA010000 		.byte	0x5
 2055 01b2 05       		.byte	0x5f
 2056 01b3 5F       		.4byte	0x82
 2057 01b4 82000000 		.byte	0x2
 2058 01b8 02       		.byte	0x23
 2059 01b9 23       		.uleb128 0x4
 2060 01ba 04       		.byte	0x0
 2061 01bb 00       		.uleb128 0x2
 2062 01bc 02       		.4byte	.LASF29
 2063 01bd 80010000 		.byte	0x5
 2064 01c1 05       		.byte	0x60
 2065 01c2 60       		.4byte	0x193
 2066 01c3 93010000 		.uleb128 0x7
 2067 01c7 07       		.4byte	.LASF30
 2068 01c8 D5020000 		.byte	0x4c
 2069 01cc 4C       		.byte	0x1
 2070 01cd 01       		.byte	0x63
 2071 01ce 63       		.4byte	0x26e
 2072 01cf 6E020000 		.uleb128 0x8
 2073 01d3 08       		.4byte	.LASF31
 2074 01d4 51020000 		.byte	0x1
 2075 01d8 01       		.byte	0x64
 2076 01d9 64       		.4byte	0x26e
 2077 01da 6E020000 		.byte	0x2
 2078 01de 02       		.byte	0x23
 2079 01df 23       		.uleb128 0x0
 2080 01e0 00       		.uleb128 0x8
 2081 01e1 08       		.4byte	.LASF32
 2082 01e2 F5000000 		.byte	0x1
 2083 01e6 01       		.byte	0x65
 2084 01e7 65       		.4byte	0x26e
 2085 01e8 6E020000 		.byte	0x2
 2086 01ec 02       		.byte	0x23
 2087 01ed 23       		.uleb128 0x4
 2088 01ee 04       		.uleb128 0x8
 2089 01ef 08       		.4byte	.LASF33
 2090 01f0 3B030000 		.byte	0x1
 2091 01f4 01       		.byte	0x67
 2092 01f5 67       		.4byte	0x26e
 2093 01f6 6E020000 		.byte	0x2
 2094 01fa 02       		.byte	0x23
 2095 01fb 23       		.uleb128 0x8
 2096 01fc 08       		.uleb128 0x8
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 59


 2097 01fd 08       		.4byte	.LASF34
 2098 01fe 6C030000 		.byte	0x1
 2099 0202 01       		.byte	0x68
 2100 0203 68       		.4byte	0x26e
 2101 0204 6E020000 		.byte	0x2
 2102 0208 02       		.byte	0x23
 2103 0209 23       		.uleb128 0xc
 2104 020a 0C       		.uleb128 0x8
 2105 020b 08       		.4byte	.LASF35
 2106 020c 5E040000 		.byte	0x1
 2107 0210 01       		.byte	0x6a
 2108 0211 6A       		.4byte	0x188
 2109 0212 88010000 		.byte	0x2
 2110 0216 02       		.byte	0x23
 2111 0217 23       		.uleb128 0x10
 2112 0218 10       		.uleb128 0x8
 2113 0219 08       		.4byte	.LASF36
 2114 021a AC020000 		.byte	0x1
 2115 021e 01       		.byte	0x6b
 2116 021f 6B       		.4byte	0x188
 2117 0220 88010000 		.byte	0x2
 2118 0224 02       		.byte	0x23
 2119 0225 23       		.uleb128 0x24
 2120 0226 24       		.uleb128 0x8
 2121 0227 08       		.4byte	.LASF37
 2122 0228 FF030000 		.byte	0x1
 2123 022c 01       		.byte	0x6d
 2124 022d 6D       		.4byte	0x173
 2125 022e 73010000 		.byte	0x2
 2126 0232 02       		.byte	0x23
 2127 0233 23       		.uleb128 0x38
 2128 0234 38       		.uleb128 0x8
 2129 0235 08       		.4byte	.LASF38
 2130 0236 5B010000 		.byte	0x1
 2131 023a 01       		.byte	0x6e
 2132 023b 6E       		.4byte	0x30
 2133 023c 30000000 		.byte	0x2
 2134 0240 02       		.byte	0x23
 2135 0241 23       		.uleb128 0x3c
 2136 0242 3C       		.uleb128 0x8
 2137 0243 08       		.4byte	.LASF39
 2138 0244 BD010000 		.byte	0x1
 2139 0248 01       		.byte	0x6f
 2140 0249 6F       		.4byte	0x30
 2141 024a 30000000 		.byte	0x2
 2142 024e 02       		.byte	0x23
 2143 024f 23       		.uleb128 0x40
 2144 0250 40       		.uleb128 0x8
 2145 0251 08       		.4byte	.LASF40
 2146 0252 1D040000 		.byte	0x1
 2147 0256 01       		.byte	0x71
 2148 0257 71       		.4byte	0x6f
 2149 0258 6F000000 		.byte	0x2
 2150 025c 02       		.byte	0x23
 2151 025d 23       		.uleb128 0x44
 2152 025e 44       		.uleb128 0x8
 2153 025f 08       		.4byte	.LASF41
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 60


 2154 0260 3B010000 		.byte	0x1
 2155 0264 01       		.byte	0x72
 2156 0265 72       		.4byte	0x6f
 2157 0266 6F000000 		.byte	0x2
 2158 026a 02       		.byte	0x23
 2159 026b 23       		.uleb128 0x48
 2160 026c 48       		.byte	0x0
 2161 026d 00       		.uleb128 0x9
 2162 026e 09       		.byte	0x4
 2163 026f 04       		.4byte	0x3e
 2164 0270 3E000000 		.uleb128 0x2
 2165 0274 02       		.4byte	.LASF42
 2166 0275 B6010000 		.byte	0x1
 2167 0279 01       		.byte	0x74
 2168 027a 74       		.4byte	0x1c7
 2169 027b C7010000 		.uleb128 0x2
 2170 027f 02       		.4byte	.LASF43
 2171 0280 73010000 		.byte	0x1
 2172 0284 01       		.byte	0x7c
 2173 0285 7C       		.4byte	0x28a
 2174 0286 8A020000 		.uleb128 0x9
 2175 028a 09       		.byte	0x4
 2176 028b 04       		.4byte	0x274
 2177 028c 74020000 		.uleb128 0xc
 2178 0290 0C       		.byte	0x1
 2179 0291 01       		.4byte	.LASF47
 2180 0292 00000000 		.byte	0x1
 2181 0296 01       		.byte	0xf8
 2182 0297 F8       		.byte	0x1
 2183 0298 01       		.4byte	0x27f
 2184 0299 7F020000 		.4byte	.LFB2
 2185 029d 00000000 		.4byte	.LFE2
 2186 02a1 54010000 		.4byte	.LLST0
 2187 02a5 00000000 		.4byte	0x2e6
 2188 02a9 E6020000 		.uleb128 0xd
 2189 02ad 0D       		.4byte	.LASF44
 2190 02ae 07030000 		.byte	0x1
 2191 02b2 01       		.byte	0xf7
 2192 02b3 F7       		.4byte	0x30
 2193 02b4 30000000 		.byte	0x2
 2194 02b8 02       		.byte	0x91
 2195 02b9 91       		.sleb128 -16
 2196 02ba 70       		.uleb128 0xd
 2197 02bb 0D       		.4byte	.LASF39
 2198 02bc BD010000 		.byte	0x1
 2199 02c0 01       		.byte	0xf7
 2200 02c1 F7       		.4byte	0x30
 2201 02c2 30000000 		.byte	0x2
 2202 02c6 02       		.byte	0x91
 2203 02c7 91       		.sleb128 -20
 2204 02c8 6C       		.uleb128 0xe
 2205 02c9 0E       		.4byte	.LASF45
 2206 02ca C8010000 		.byte	0x1
 2207 02ce 01       		.byte	0xf9
 2208 02cf F9       		.4byte	0x28a
 2209 02d0 8A020000 		.byte	0x2
 2210 02d4 02       		.byte	0x91
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 61


 2211 02d5 91       		.sleb128 -12
 2212 02d6 74       		.uleb128 0xe
 2213 02d7 0E       		.4byte	.LASF46
 2214 02d8 C3020000 		.byte	0x1
 2215 02dc 01       		.byte	0xfa
 2216 02dd FA       		.4byte	0x25
 2217 02de 25000000 		.byte	0x2
 2218 02e2 02       		.byte	0x91
 2219 02e3 91       		.sleb128 -8
 2220 02e4 78       		.byte	0x0
 2221 02e5 00       		.uleb128 0xf
 2222 02e6 0F       		.byte	0x1
 2223 02e7 01       		.4byte	.LASF48
 2224 02e8 49010000 		.byte	0x1
 2225 02ec 01       		.2byte	0x12c
 2226 02ed 2C01     		.byte	0x1
 2227 02ef 01       		.4byte	0x27f
 2228 02f0 7F020000 		.4byte	.LFB3
 2229 02f4 54010000 		.4byte	.LFE3
 2230 02f8 2C020000 		.4byte	.LLST1
 2231 02fc 2B000000 		.4byte	0x314
 2232 0300 14030000 		.uleb128 0x10
 2233 0304 10       		.4byte	.LASF45
 2234 0305 C8010000 		.byte	0x1
 2235 0309 01       		.2byte	0x12d
 2236 030a 2D01     		.4byte	0x28a
 2237 030c 8A020000 		.byte	0x2
 2238 0310 02       		.byte	0x91
 2239 0311 91       		.sleb128 -8
 2240 0312 78       		.byte	0x0
 2241 0313 00       		.uleb128 0xf
 2242 0314 0F       		.byte	0x1
 2243 0315 01       		.4byte	.LASF49
 2244 0316 FC000000 		.byte	0x1
 2245 031a 01       		.2byte	0x1c4
 2246 031b C401     		.byte	0x1
 2247 031d 01       		.4byte	0x6f
 2248 031e 6F000000 		.4byte	.LFB4
 2249 0322 2C020000 		.4byte	.LFE4
 2250 0326 E0030000 		.4byte	.LLST2
 2251 032a 56000000 		.4byte	0x38d
 2252 032e 8D030000 		.uleb128 0x11
 2253 0332 11       		.4byte	.LASF50
 2254 0333 15030000 		.byte	0x1
 2255 0337 01       		.2byte	0x1c3
 2256 0338 C301     		.4byte	0x27f
 2257 033a 7F020000 		.byte	0x2
 2258 033e 02       		.byte	0x91
 2259 033f 91       		.sleb128 -20
 2260 0340 6C       		.uleb128 0x11
 2261 0341 11       		.4byte	.LASF51
 2262 0342 45030000 		.byte	0x1
 2263 0346 01       		.2byte	0x1c3
 2264 0347 C301     		.4byte	0x38d
 2265 0349 8D030000 		.byte	0x2
 2266 034d 02       		.byte	0x91
 2267 034e 91       		.sleb128 -24
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 62


 2268 034f 68       		.uleb128 0x11
 2269 0350 11       		.4byte	.LASF52
 2270 0351 20010000 		.byte	0x1
 2271 0355 01       		.2byte	0x1c3
 2272 0356 C301     		.4byte	0x82
 2273 0358 82000000 		.byte	0x2
 2274 035c 02       		.byte	0x91
 2275 035d 91       		.sleb128 -28
 2276 035e 64       		.uleb128 0x11
 2277 035f 11       		.4byte	.LASF53
 2278 0360 A3000000 		.byte	0x1
 2279 0364 01       		.2byte	0x1c3
 2280 0365 C301     		.4byte	0x6f
 2281 0367 6F000000 		.byte	0x2
 2282 036b 02       		.byte	0x91
 2283 036c 91       		.sleb128 -32
 2284 036d 60       		.uleb128 0x10
 2285 036e 10       		.4byte	.LASF54
 2286 036f 8C030000 		.byte	0x1
 2287 0373 01       		.2byte	0x1c5
 2288 0374 C501     		.4byte	0x6f
 2289 0376 6F000000 		.byte	0x2
 2290 037a 02       		.byte	0x91
 2291 037b 91       		.sleb128 -8
 2292 037c 78       		.uleb128 0x10
 2293 037d 10       		.4byte	.LASF55
 2294 037e B1000000 		.byte	0x1
 2295 0382 01       		.2byte	0x1c6
 2296 0383 C601     		.4byte	0x1bc
 2297 0385 BC010000 		.byte	0x2
 2298 0389 02       		.byte	0x91
 2299 038a 91       		.sleb128 -16
 2300 038b 70       		.byte	0x0
 2301 038c 00       		.uleb128 0x12
 2302 038d 12       		.4byte	0x392
 2303 038e 92030000 		.uleb128 0x9
 2304 0392 09       		.byte	0x4
 2305 0393 04       		.4byte	0x398
 2306 0394 98030000 		.uleb128 0x13
 2307 0398 13       		.uleb128 0xf
 2308 0399 0F       		.byte	0x1
 2309 039a 01       		.4byte	.LASF56
 2310 039b 1D030000 		.byte	0x1
 2311 039f 01       		.2byte	0x300
 2312 03a0 0003     		.byte	0x1
 2313 03a2 01       		.4byte	0x6f
 2314 03a3 6F000000 		.4byte	.LFB5
 2315 03a7 E0030000 		.4byte	.LFE5
 2316 03ab B0040000 		.4byte	.LLST3
 2317 03af 81000000 		.4byte	0x412
 2318 03b3 12040000 		.uleb128 0x11
 2319 03b7 11       		.4byte	.LASF50
 2320 03b8 15030000 		.byte	0x1
 2321 03bc 01       		.2byte	0x2ff
 2322 03bd FF02     		.4byte	0x27f
 2323 03bf 7F020000 		.byte	0x2
 2324 03c3 02       		.byte	0x91
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 63


 2325 03c4 91       		.sleb128 -16
 2326 03c5 70       		.uleb128 0x11
 2327 03c6 11       		.4byte	.LASF51
 2328 03c7 45030000 		.byte	0x1
 2329 03cb 01       		.2byte	0x2ff
 2330 03cc FF02     		.4byte	0x38d
 2331 03ce 8D030000 		.byte	0x2
 2332 03d2 02       		.byte	0x91
 2333 03d3 91       		.sleb128 -20
 2334 03d4 6C       		.uleb128 0x11
 2335 03d5 11       		.4byte	.LASF57
 2336 03d6 44040000 		.byte	0x1
 2337 03da 01       		.2byte	0x2ff
 2338 03db FF02     		.4byte	0x412
 2339 03dd 12040000 		.byte	0x2
 2340 03e1 02       		.byte	0x91
 2341 03e2 91       		.sleb128 -24
 2342 03e3 68       		.uleb128 0x11
 2343 03e4 11       		.4byte	.LASF53
 2344 03e5 A3000000 		.byte	0x1
 2345 03e9 01       		.2byte	0x2ff
 2346 03ea FF02     		.4byte	0x6f
 2347 03ec 6F000000 		.byte	0x2
 2348 03f0 02       		.byte	0x91
 2349 03f1 91       		.sleb128 -28
 2350 03f2 64       		.uleb128 0x10
 2351 03f3 10       		.4byte	.LASF58
 2352 03f4 3C040000 		.byte	0x1
 2353 03f8 01       		.2byte	0x301
 2354 03f9 0103     		.4byte	0x6f
 2355 03fb 6F000000 		.byte	0x2
 2356 03ff 02       		.byte	0x91
 2357 0400 91       		.sleb128 -12
 2358 0401 74       		.uleb128 0x10
 2359 0402 10       		.4byte	.LASF59
 2360 0403 25040000 		.byte	0x1
 2361 0407 01       		.2byte	0x302
 2362 0408 0203     		.4byte	0x30
 2363 040a 30000000 		.byte	0x2
 2364 040e 02       		.byte	0x91
 2365 040f 91       		.sleb128 -8
 2366 0410 78       		.byte	0x0
 2367 0411 00       		.uleb128 0x9
 2368 0412 09       		.byte	0x4
 2369 0413 04       		.4byte	0x6f
 2370 0414 6F000000 		.uleb128 0xf
 2371 0418 0F       		.byte	0x1
 2372 0419 01       		.4byte	.LASF60
 2373 041a 77030000 		.byte	0x1
 2374 041e 01       		.2byte	0x335
 2375 041f 3503     		.byte	0x1
 2376 0421 01       		.4byte	0x6f
 2377 0422 6F000000 		.4byte	.LFB6
 2378 0426 B0040000 		.4byte	.LFE6
 2379 042a 10070000 		.4byte	.LLST4
 2380 042e AC000000 		.4byte	0x4a0
 2381 0432 A0040000 		.uleb128 0x11
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 64


 2382 0436 11       		.4byte	.LASF50
 2383 0437 15030000 		.byte	0x1
 2384 043b 01       		.2byte	0x334
 2385 043c 3403     		.4byte	0x27f
 2386 043e 7F020000 		.byte	0x2
 2387 0442 02       		.byte	0x91
 2388 0443 91       		.sleb128 -24
 2389 0444 68       		.uleb128 0x11
 2390 0445 11       		.4byte	.LASF61
 2391 0446 17010000 		.byte	0x1
 2392 044a 01       		.2byte	0x334
 2393 044b 3403     		.4byte	0x4a0
 2394 044d A0040000 		.byte	0x2
 2395 0451 02       		.byte	0x91
 2396 0452 91       		.sleb128 -28
 2397 0453 64       		.uleb128 0x11
 2398 0454 11       		.4byte	.LASF52
 2399 0455 20010000 		.byte	0x1
 2400 0459 01       		.2byte	0x334
 2401 045a 3403     		.4byte	0x82
 2402 045c 82000000 		.byte	0x2
 2403 0460 02       		.byte	0x91
 2404 0461 91       		.sleb128 -32
 2405 0462 60       		.uleb128 0x11
 2406 0463 11       		.4byte	.LASF62
 2407 0464 96000000 		.byte	0x1
 2408 0468 01       		.2byte	0x334
 2409 0469 3403     		.4byte	0x6f
 2410 046b 6F000000 		.byte	0x2
 2411 046f 02       		.byte	0x91
 2412 0470 91       		.sleb128 -36
 2413 0471 5C       		.uleb128 0x10
 2414 0472 10       		.4byte	.LASF54
 2415 0473 8C030000 		.byte	0x1
 2416 0477 01       		.2byte	0x336
 2417 0478 3603     		.4byte	0x6f
 2418 047a 6F000000 		.byte	0x2
 2419 047e 02       		.byte	0x91
 2420 047f 91       		.sleb128 -12
 2421 0480 74       		.uleb128 0x10
 2422 0481 10       		.4byte	.LASF55
 2423 0482 B1000000 		.byte	0x1
 2424 0486 01       		.2byte	0x337
 2425 0487 3703     		.4byte	0x1bc
 2426 0489 BC010000 		.byte	0x2
 2427 048d 02       		.byte	0x91
 2428 048e 91       		.sleb128 -20
 2429 048f 6C       		.uleb128 0x10
 2430 0490 10       		.4byte	.LASF63
 2431 0491 CF000000 		.byte	0x1
 2432 0495 01       		.2byte	0x338
 2433 0496 3803     		.4byte	0x26e
 2434 0498 6E020000 		.byte	0x2
 2435 049c 02       		.byte	0x91
 2436 049d 91       		.sleb128 -8
 2437 049e 78       		.byte	0x0
 2438 049f 00       		.uleb128 0x12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 65


 2439 04a0 12       		.4byte	0x79
 2440 04a1 79000000 		.uleb128 0xf
 2441 04a5 0F       		.byte	0x1
 2442 04a6 01       		.4byte	.LASF64
 2443 04a7 BA000000 		.byte	0x1
 2444 04ab 01       		.2byte	0x3c8
 2445 04ac C803     		.byte	0x1
 2446 04ae 01       		.4byte	0x6f
 2447 04af 6F000000 		.4byte	.LFB7
 2448 04b3 10070000 		.4byte	.LFE7
 2449 04b7 E4070000 		.4byte	.LLST5
 2450 04bb D7000000 		.4byte	0x50f
 2451 04bf 0F050000 		.uleb128 0x11
 2452 04c3 11       		.4byte	.LASF50
 2453 04c4 15030000 		.byte	0x1
 2454 04c8 01       		.2byte	0x3c7
 2455 04c9 C703     		.4byte	0x27f
 2456 04cb 7F020000 		.byte	0x2
 2457 04cf 02       		.byte	0x91
 2458 04d0 91       		.sleb128 -16
 2459 04d1 70       		.uleb128 0x11
 2460 04d2 11       		.4byte	.LASF61
 2461 04d3 17010000 		.byte	0x1
 2462 04d7 01       		.2byte	0x3c7
 2463 04d8 C703     		.4byte	0x4a0
 2464 04da A0040000 		.byte	0x2
 2465 04de 02       		.byte	0x91
 2466 04df 91       		.sleb128 -20
 2467 04e0 6C       		.uleb128 0x11
 2468 04e1 11       		.4byte	.LASF65
 2469 04e2 11040000 		.byte	0x1
 2470 04e6 01       		.2byte	0x3c7
 2471 04e7 C703     		.4byte	0x412
 2472 04e9 12040000 		.byte	0x2
 2473 04ed 02       		.byte	0x91
 2474 04ee 91       		.sleb128 -24
 2475 04ef 68       		.uleb128 0x10
 2476 04f0 10       		.4byte	.LASF58
 2477 04f1 3C040000 		.byte	0x1
 2478 04f5 01       		.2byte	0x3c9
 2479 04f6 C903     		.4byte	0x6f
 2480 04f8 6F000000 		.byte	0x2
 2481 04fc 02       		.byte	0x91
 2482 04fd 91       		.sleb128 -12
 2483 04fe 74       		.uleb128 0x10
 2484 04ff 10       		.4byte	.LASF59
 2485 0500 25040000 		.byte	0x1
 2486 0504 01       		.2byte	0x3ca
 2487 0505 CA03     		.4byte	0x30
 2488 0507 30000000 		.byte	0x2
 2489 050b 02       		.byte	0x91
 2490 050c 91       		.sleb128 -8
 2491 050d 78       		.byte	0x0
 2492 050e 00       		.uleb128 0xf
 2493 050f 0F       		.byte	0x1
 2494 0510 01       		.4byte	.LASF66
 2495 0511 50000000 		.byte	0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 66


 2496 0515 01       		.2byte	0x3fb
 2497 0516 FB03     		.byte	0x1
 2498 0518 01       		.4byte	0x30
 2499 0519 30000000 		.4byte	.LFB8
 2500 051d E4070000 		.4byte	.LFE8
 2501 0521 18080000 		.4byte	.LLST6
 2502 0525 02010000 		.4byte	0x54c
 2503 0529 4C050000 		.uleb128 0x11
 2504 052d 11       		.4byte	.LASF50
 2505 052e 15030000 		.byte	0x1
 2506 0532 01       		.2byte	0x3fa
 2507 0533 FA03     		.4byte	0x54c
 2508 0535 4C050000 		.byte	0x2
 2509 0539 02       		.byte	0x91
 2510 053a 91       		.sleb128 -12
 2511 053b 74       		.uleb128 0x10
 2512 053c 10       		.4byte	.LASF67
 2513 053d A7030000 		.byte	0x1
 2514 0541 01       		.2byte	0x3fc
 2515 0542 FC03     		.4byte	0x30
 2516 0544 30000000 		.byte	0x2
 2517 0548 02       		.byte	0x91
 2518 0549 91       		.sleb128 -8
 2519 054a 78       		.byte	0x0
 2520 054b 00       		.uleb128 0x12
 2521 054c 12       		.4byte	0x27f
 2522 054d 7F020000 		.uleb128 0xf
 2523 0551 0F       		.byte	0x1
 2524 0552 01       		.4byte	.LASF68
 2525 0553 98010000 		.byte	0x1
 2526 0557 01       		.2byte	0x407
 2527 0558 0704     		.byte	0x1
 2528 055a 01       		.4byte	0x30
 2529 055b 30000000 		.4byte	.LFB9
 2530 055f 18080000 		.4byte	.LFE9
 2531 0563 3C080000 		.4byte	.LLST7
 2532 0567 2D010000 		.4byte	0x58e
 2533 056b 8E050000 		.uleb128 0x11
 2534 056f 11       		.4byte	.LASF50
 2535 0570 15030000 		.byte	0x1
 2536 0574 01       		.2byte	0x406
 2537 0575 0604     		.4byte	0x54c
 2538 0577 4C050000 		.byte	0x2
 2539 057b 02       		.byte	0x91
 2540 057c 91       		.sleb128 -8
 2541 057d 78       		.uleb128 0x10
 2542 057e 10       		.4byte	.LASF67
 2543 057f A7030000 		.byte	0x1
 2544 0583 01       		.2byte	0x408
 2545 0584 0804     		.4byte	0x30
 2546 0586 30000000 		.byte	0x2
 2547 058a 02       		.byte	0x91
 2548 058b 91       		.sleb128 -4
 2549 058c 7C       		.byte	0x0
 2550 058d 00       		.uleb128 0x14
 2551 058e 14       		.byte	0x1
 2552 058f 01       		.4byte	.LASF76
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 67


 2553 0590 9A030000 		.byte	0x1
 2554 0594 01       		.2byte	0x411
 2555 0595 1104     		.byte	0x1
 2556 0597 01       		.4byte	.LFB10
 2557 0598 3C080000 		.4byte	.LFE10
 2558 059c 6C080000 		.4byte	.LLST8
 2559 05a0 4C010000 		.4byte	0x5b8
 2560 05a4 B8050000 		.uleb128 0x11
 2561 05a8 11       		.4byte	.LASF50
 2562 05a9 15030000 		.byte	0x1
 2563 05ad 01       		.2byte	0x410
 2564 05ae 1004     		.4byte	0x27f
 2565 05b0 7F020000 		.byte	0x2
 2566 05b4 02       		.byte	0x91
 2567 05b5 91       		.sleb128 -8
 2568 05b6 78       		.byte	0x0
 2569 05b7 00       		.uleb128 0x15
 2570 05b8 15       		.4byte	.LASF70
 2571 05b9 EC030000 		.byte	0x1
 2572 05bd 01       		.2byte	0x41a
 2573 05be 1A04     		.byte	0x1
 2574 05c0 01       		.4byte	.LFB11
 2575 05c1 6C080000 		.4byte	.LFE11
 2576 05c5 CC090000 		.4byte	.LLST9
 2577 05c9 77010000 		.4byte	0x5ff
 2578 05cd FF050000 		.uleb128 0x11
 2579 05d1 11       		.4byte	.LASF50
 2580 05d2 15030000 		.byte	0x1
 2581 05d6 01       		.2byte	0x419
 2582 05d7 1904     		.4byte	0x28a
 2583 05d9 8A020000 		.byte	0x2
 2584 05dd 02       		.byte	0x91
 2585 05de 91       		.sleb128 -8
 2586 05df 78       		.uleb128 0x11
 2587 05e0 11       		.4byte	.LASF51
 2588 05e1 45030000 		.byte	0x1
 2589 05e5 01       		.2byte	0x419
 2590 05e6 1904     		.4byte	0x392
 2591 05e8 92030000 		.byte	0x2
 2592 05ec 02       		.byte	0x91
 2593 05ed 91       		.sleb128 -12
 2594 05ee 74       		.uleb128 0x11
 2595 05ef 11       		.4byte	.LASF69
 2596 05f0 46000000 		.byte	0x1
 2597 05f4 01       		.2byte	0x419
 2598 05f5 1904     		.4byte	0x6f
 2599 05f7 6F000000 		.byte	0x2
 2600 05fb 02       		.byte	0x91
 2601 05fc 91       		.sleb128 -16
 2602 05fd 70       		.byte	0x0
 2603 05fe 00       		.uleb128 0x15
 2604 05ff 15       		.4byte	.LASF71
 2605 0600 25020000 		.byte	0x1
 2606 0604 01       		.2byte	0x440
 2607 0605 4004     		.byte	0x1
 2608 0607 01       		.4byte	.LFB12
 2609 0608 CC090000 		.4byte	.LFE12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 68


 2610 060c 5C0A0000 		.4byte	.LLST10
 2611 0610 A2010000 		.4byte	0x637
 2612 0614 37060000 		.uleb128 0x11
 2613 0618 11       		.4byte	.LASF50
 2614 0619 15030000 		.byte	0x1
 2615 061d 01       		.2byte	0x43f
 2616 061e 3F04     		.4byte	0x637
 2617 0620 37060000 		.byte	0x2
 2618 0624 02       		.byte	0x91
 2619 0625 91       		.sleb128 -8
 2620 0626 78       		.uleb128 0x11
 2621 0627 11       		.4byte	.LASF61
 2622 0628 17010000 		.byte	0x1
 2623 062c 01       		.2byte	0x43f
 2624 062d 3F04     		.4byte	0x392
 2625 062f 92030000 		.byte	0x2
 2626 0633 02       		.byte	0x91
 2627 0634 91       		.sleb128 -12
 2628 0635 74       		.byte	0x0
 2629 0636 00       		.uleb128 0x12
 2630 0637 12       		.4byte	0x28a
 2631 0638 8A020000 		.uleb128 0x15
 2632 063c 15       		.4byte	.LASF72
 2633 063d E5020000 		.byte	0x1
 2634 0641 01       		.2byte	0x44e
 2635 0642 4E04     		.byte	0x1
 2636 0644 01       		.4byte	.LFB13
 2637 0645 5C0A0000 		.4byte	.LFE13
 2638 0649 4C0B0000 		.4byte	.LLST11
 2639 064d CD010000 		.4byte	0x665
 2640 0651 65060000 		.uleb128 0x11
 2641 0655 11       		.4byte	.LASF50
 2642 0656 15030000 		.byte	0x1
 2643 065a 01       		.2byte	0x44d
 2644 065b 4D04     		.4byte	0x27f
 2645 065d 7F020000 		.byte	0x2
 2646 0661 02       		.byte	0x91
 2647 0662 91       		.sleb128 -8
 2648 0663 78       		.byte	0x0
 2649 0664 00       		.uleb128 0x16
 2650 0665 16       		.4byte	.LASF74
 2651 0666 C2030000 		.byte	0x1
 2652 066a 01       		.2byte	0x48e
 2653 066b 8E04     		.byte	0x1
 2654 066d 01       		.4byte	0x6f
 2655 066e 6F000000 		.4byte	.LFB14
 2656 0672 4C0B0000 		.4byte	.LFE14
 2657 0676 8C0B0000 		.4byte	.LLST12
 2658 067a F8010000 		.4byte	0x6a1
 2659 067e A1060000 		.uleb128 0x11
 2660 0682 11       		.4byte	.LASF50
 2661 0683 15030000 		.byte	0x1
 2662 0687 01       		.2byte	0x48d
 2663 0688 8D04     		.4byte	0x54c
 2664 068a 4C050000 		.byte	0x2
 2665 068e 02       		.byte	0x91
 2666 068f 91       		.sleb128 -12
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 69


 2667 0690 74       		.uleb128 0x10
 2668 0691 10       		.4byte	.LASF58
 2669 0692 3C040000 		.byte	0x1
 2670 0696 01       		.2byte	0x48f
 2671 0697 8F04     		.4byte	0x6f
 2672 0699 6F000000 		.byte	0x2
 2673 069d 02       		.byte	0x91
 2674 069e 91       		.sleb128 -8
 2675 069f 78       		.byte	0x0
 2676 06a0 00       		.uleb128 0xf
 2677 06a1 0F       		.byte	0x1
 2678 06a2 01       		.4byte	.LASF73
 2679 06a3 74000000 		.byte	0x1
 2680 06a7 01       		.2byte	0x49a
 2681 06a8 9A04     		.byte	0x1
 2682 06aa 01       		.4byte	0x6f
 2683 06ab 6F000000 		.4byte	.LFB15
 2684 06af 8C0B0000 		.4byte	.LFE15
 2685 06b3 BC0B0000 		.4byte	.LLST13
 2686 06b7 23020000 		.4byte	0x6de
 2687 06bb DE060000 		.uleb128 0x11
 2688 06bf 11       		.4byte	.LASF50
 2689 06c0 15030000 		.byte	0x1
 2690 06c4 01       		.2byte	0x499
 2691 06c5 9904     		.4byte	0x54c
 2692 06c7 4C050000 		.byte	0x2
 2693 06cb 02       		.byte	0x91
 2694 06cc 91       		.sleb128 -8
 2695 06cd 78       		.uleb128 0x10
 2696 06ce 10       		.4byte	.LASF58
 2697 06cf 3C040000 		.byte	0x1
 2698 06d3 01       		.2byte	0x49b
 2699 06d4 9B04     		.4byte	0x6f
 2700 06d6 6F000000 		.byte	0x2
 2701 06da 02       		.byte	0x91
 2702 06db 91       		.sleb128 -4
 2703 06dc 7C       		.byte	0x0
 2704 06dd 00       		.uleb128 0x16
 2705 06de 16       		.4byte	.LASF75
 2706 06df E6000000 		.byte	0x1
 2707 06e3 01       		.2byte	0x4a4
 2708 06e4 A404     		.byte	0x1
 2709 06e6 01       		.4byte	0x6f
 2710 06e7 6F000000 		.4byte	.LFB16
 2711 06eb BC0B0000 		.4byte	.LFE16
 2712 06ef 040C0000 		.4byte	.LLST14
 2713 06f3 42020000 		.4byte	0x71a
 2714 06f7 1A070000 		.uleb128 0x11
 2715 06fb 11       		.4byte	.LASF50
 2716 06fc 15030000 		.byte	0x1
 2717 0700 01       		.2byte	0x4a3
 2718 0701 A304     		.4byte	0x54c
 2719 0703 4C050000 		.byte	0x2
 2720 0707 02       		.byte	0x91
 2721 0708 91       		.sleb128 -12
 2722 0709 74       		.uleb128 0x10
 2723 070a 10       		.4byte	.LASF58
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 70


 2724 070b 3C040000 		.byte	0x1
 2725 070f 01       		.2byte	0x4a5
 2726 0710 A504     		.4byte	0x6f
 2727 0712 6F000000 		.byte	0x2
 2728 0716 02       		.byte	0x91
 2729 0717 91       		.sleb128 -8
 2730 0718 78       		.byte	0x0
 2731 0719 00       		.uleb128 0x17
 2732 071a 17       		.byte	0x1
 2733 071b 01       		.4byte	.LASF77
 2734 071c 53030000 		.byte	0x1
 2735 0720 01       		.2byte	0x4b0
 2736 0721 B004     		.byte	0x1
 2737 0723 01       		.4byte	0x6f
 2738 0724 6F000000 		.4byte	.LFB17
 2739 0728 040C0000 		.4byte	.LFE17
 2740 072c 3C0C0000 		.4byte	.LLST15
 2741 0730 6D020000 		.uleb128 0x11
 2742 0734 11       		.4byte	.LASF50
 2743 0735 15030000 		.byte	0x1
 2744 0739 01       		.2byte	0x4af
 2745 073a AF04     		.4byte	0x54c
 2746 073c 4C050000 		.byte	0x2
 2747 0740 02       		.byte	0x91
 2748 0741 91       		.sleb128 -8
 2749 0742 78       		.uleb128 0x10
 2750 0743 10       		.4byte	.LASF58
 2751 0744 3C040000 		.byte	0x1
 2752 0748 01       		.2byte	0x4b1
 2753 0749 B104     		.4byte	0x6f
 2754 074b 6F000000 		.byte	0x2
 2755 074f 02       		.byte	0x91
 2756 0750 91       		.sleb128 -4
 2757 0751 7C       		.byte	0x0
 2758 0752 00       		.byte	0x0
 2759 0753 00       		.section	.debug_abbrev
 2760              		.uleb128 0x1
 2761 0000 01       		.uleb128 0x11
 2762 0001 11       		.byte	0x1
 2763 0002 01       		.uleb128 0x25
 2764 0003 25       		.uleb128 0xe
 2765 0004 0E       		.uleb128 0x13
 2766 0005 13       		.uleb128 0xb
 2767 0006 0B       		.uleb128 0x3
 2768 0007 03       		.uleb128 0xe
 2769 0008 0E       		.uleb128 0x1b
 2770 0009 1B       		.uleb128 0xe
 2771 000a 0E       		.uleb128 0x11
 2772 000b 11       		.uleb128 0x1
 2773 000c 01       		.uleb128 0x12
 2774 000d 12       		.uleb128 0x1
 2775 000e 01       		.uleb128 0x10
 2776 000f 10       		.uleb128 0x6
 2777 0010 06       		.byte	0x0
 2778 0011 00       		.byte	0x0
 2779 0012 00       		.uleb128 0x2
 2780 0013 02       		.uleb128 0x16
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 71


 2781 0014 16       		.byte	0x0
 2782 0015 00       		.uleb128 0x3
 2783 0016 03       		.uleb128 0xe
 2784 0017 0E       		.uleb128 0x3a
 2785 0018 3A       		.uleb128 0xb
 2786 0019 0B       		.uleb128 0x3b
 2787 001a 3B       		.uleb128 0xb
 2788 001b 0B       		.uleb128 0x49
 2789 001c 49       		.uleb128 0x13
 2790 001d 13       		.byte	0x0
 2791 001e 00       		.byte	0x0
 2792 001f 00       		.uleb128 0x3
 2793 0020 03       		.uleb128 0x24
 2794 0021 24       		.byte	0x0
 2795 0022 00       		.uleb128 0xb
 2796 0023 0B       		.uleb128 0xb
 2797 0024 0B       		.uleb128 0x3e
 2798 0025 3E       		.uleb128 0xb
 2799 0026 0B       		.uleb128 0x3
 2800 0027 03       		.uleb128 0xe
 2801 0028 0E       		.byte	0x0
 2802 0029 00       		.byte	0x0
 2803 002a 00       		.uleb128 0x4
 2804 002b 04       		.uleb128 0x24
 2805 002c 24       		.byte	0x0
 2806 002d 00       		.uleb128 0xb
 2807 002e 0B       		.uleb128 0xb
 2808 002f 0B       		.uleb128 0x3e
 2809 0030 3E       		.uleb128 0xb
 2810 0031 0B       		.uleb128 0x3
 2811 0032 03       		.uleb128 0x8
 2812 0033 08       		.byte	0x0
 2813 0034 00       		.byte	0x0
 2814 0035 00       		.uleb128 0x5
 2815 0036 05       		.uleb128 0x24
 2816 0037 24       		.byte	0x0
 2817 0038 00       		.uleb128 0xb
 2818 0039 0B       		.uleb128 0xb
 2819 003a 0B       		.uleb128 0x3e
 2820 003b 3E       		.uleb128 0xb
 2821 003c 0B       		.byte	0x0
 2822 003d 00       		.byte	0x0
 2823 003e 00       		.uleb128 0x6
 2824 003f 06       		.uleb128 0xf
 2825 0040 0F       		.byte	0x0
 2826 0041 00       		.uleb128 0xb
 2827 0042 0B       		.uleb128 0xb
 2828 0043 0B       		.byte	0x0
 2829 0044 00       		.byte	0x0
 2830 0045 00       		.uleb128 0x7
 2831 0046 07       		.uleb128 0x13
 2832 0047 13       		.byte	0x1
 2833 0048 01       		.uleb128 0x3
 2834 0049 03       		.uleb128 0xe
 2835 004a 0E       		.uleb128 0xb
 2836 004b 0B       		.uleb128 0xb
 2837 004c 0B       		.uleb128 0x3a
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 72


 2838 004d 3A       		.uleb128 0xb
 2839 004e 0B       		.uleb128 0x3b
 2840 004f 3B       		.uleb128 0xb
 2841 0050 0B       		.uleb128 0x1
 2842 0051 01       		.uleb128 0x13
 2843 0052 13       		.byte	0x0
 2844 0053 00       		.byte	0x0
 2845 0054 00       		.uleb128 0x8
 2846 0055 08       		.uleb128 0xd
 2847 0056 0D       		.byte	0x0
 2848 0057 00       		.uleb128 0x3
 2849 0058 03       		.uleb128 0xe
 2850 0059 0E       		.uleb128 0x3a
 2851 005a 3A       		.uleb128 0xb
 2852 005b 0B       		.uleb128 0x3b
 2853 005c 3B       		.uleb128 0xb
 2854 005d 0B       		.uleb128 0x49
 2855 005e 49       		.uleb128 0x13
 2856 005f 13       		.uleb128 0x38
 2857 0060 38       		.uleb128 0xa
 2858 0061 0A       		.byte	0x0
 2859 0062 00       		.byte	0x0
 2860 0063 00       		.uleb128 0x9
 2861 0064 09       		.uleb128 0xf
 2862 0065 0F       		.byte	0x0
 2863 0066 00       		.uleb128 0xb
 2864 0067 0B       		.uleb128 0xb
 2865 0068 0B       		.uleb128 0x49
 2866 0069 49       		.uleb128 0x13
 2867 006a 13       		.byte	0x0
 2868 006b 00       		.byte	0x0
 2869 006c 00       		.uleb128 0xa
 2870 006d 0A       		.uleb128 0x35
 2871 006e 35       		.byte	0x0
 2872 006f 00       		.uleb128 0x3
 2873 0070 03       		.uleb128 0xe
 2874 0071 0E       		.uleb128 0x49
 2875 0072 49       		.uleb128 0x13
 2876 0073 13       		.byte	0x0
 2877 0074 00       		.byte	0x0
 2878 0075 00       		.uleb128 0xb
 2879 0076 0B       		.uleb128 0x35
 2880 0077 35       		.byte	0x0
 2881 0078 00       		.uleb128 0x49
 2882 0079 49       		.uleb128 0x13
 2883 007a 13       		.byte	0x0
 2884 007b 00       		.byte	0x0
 2885 007c 00       		.uleb128 0xc
 2886 007d 0C       		.uleb128 0x2e
 2887 007e 2E       		.byte	0x1
 2888 007f 01       		.uleb128 0x3f
 2889 0080 3F       		.uleb128 0xc
 2890 0081 0C       		.uleb128 0x3
 2891 0082 03       		.uleb128 0xe
 2892 0083 0E       		.uleb128 0x3a
 2893 0084 3A       		.uleb128 0xb
 2894 0085 0B       		.uleb128 0x3b
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 73


 2895 0086 3B       		.uleb128 0xb
 2896 0087 0B       		.uleb128 0x27
 2897 0088 27       		.uleb128 0xc
 2898 0089 0C       		.uleb128 0x49
 2899 008a 49       		.uleb128 0x13
 2900 008b 13       		.uleb128 0x11
 2901 008c 11       		.uleb128 0x1
 2902 008d 01       		.uleb128 0x12
 2903 008e 12       		.uleb128 0x1
 2904 008f 01       		.uleb128 0x40
 2905 0090 40       		.uleb128 0x6
 2906 0091 06       		.uleb128 0x1
 2907 0092 01       		.uleb128 0x13
 2908 0093 13       		.byte	0x0
 2909 0094 00       		.byte	0x0
 2910 0095 00       		.uleb128 0xd
 2911 0096 0D       		.uleb128 0x5
 2912 0097 05       		.byte	0x0
 2913 0098 00       		.uleb128 0x3
 2914 0099 03       		.uleb128 0xe
 2915 009a 0E       		.uleb128 0x3a
 2916 009b 3A       		.uleb128 0xb
 2917 009c 0B       		.uleb128 0x3b
 2918 009d 3B       		.uleb128 0xb
 2919 009e 0B       		.uleb128 0x49
 2920 009f 49       		.uleb128 0x13
 2921 00a0 13       		.uleb128 0x2
 2922 00a1 02       		.uleb128 0xa
 2923 00a2 0A       		.byte	0x0
 2924 00a3 00       		.byte	0x0
 2925 00a4 00       		.uleb128 0xe
 2926 00a5 0E       		.uleb128 0x34
 2927 00a6 34       		.byte	0x0
 2928 00a7 00       		.uleb128 0x3
 2929 00a8 03       		.uleb128 0xe
 2930 00a9 0E       		.uleb128 0x3a
 2931 00aa 3A       		.uleb128 0xb
 2932 00ab 0B       		.uleb128 0x3b
 2933 00ac 3B       		.uleb128 0xb
 2934 00ad 0B       		.uleb128 0x49
 2935 00ae 49       		.uleb128 0x13
 2936 00af 13       		.uleb128 0x2
 2937 00b0 02       		.uleb128 0xa
 2938 00b1 0A       		.byte	0x0
 2939 00b2 00       		.byte	0x0
 2940 00b3 00       		.uleb128 0xf
 2941 00b4 0F       		.uleb128 0x2e
 2942 00b5 2E       		.byte	0x1
 2943 00b6 01       		.uleb128 0x3f
 2944 00b7 3F       		.uleb128 0xc
 2945 00b8 0C       		.uleb128 0x3
 2946 00b9 03       		.uleb128 0xe
 2947 00ba 0E       		.uleb128 0x3a
 2948 00bb 3A       		.uleb128 0xb
 2949 00bc 0B       		.uleb128 0x3b
 2950 00bd 3B       		.uleb128 0x5
 2951 00be 05       		.uleb128 0x27
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 74


 2952 00bf 27       		.uleb128 0xc
 2953 00c0 0C       		.uleb128 0x49
 2954 00c1 49       		.uleb128 0x13
 2955 00c2 13       		.uleb128 0x11
 2956 00c3 11       		.uleb128 0x1
 2957 00c4 01       		.uleb128 0x12
 2958 00c5 12       		.uleb128 0x1
 2959 00c6 01       		.uleb128 0x40
 2960 00c7 40       		.uleb128 0x6
 2961 00c8 06       		.uleb128 0x1
 2962 00c9 01       		.uleb128 0x13
 2963 00ca 13       		.byte	0x0
 2964 00cb 00       		.byte	0x0
 2965 00cc 00       		.uleb128 0x10
 2966 00cd 10       		.uleb128 0x34
 2967 00ce 34       		.byte	0x0
 2968 00cf 00       		.uleb128 0x3
 2969 00d0 03       		.uleb128 0xe
 2970 00d1 0E       		.uleb128 0x3a
 2971 00d2 3A       		.uleb128 0xb
 2972 00d3 0B       		.uleb128 0x3b
 2973 00d4 3B       		.uleb128 0x5
 2974 00d5 05       		.uleb128 0x49
 2975 00d6 49       		.uleb128 0x13
 2976 00d7 13       		.uleb128 0x2
 2977 00d8 02       		.uleb128 0xa
 2978 00d9 0A       		.byte	0x0
 2979 00da 00       		.byte	0x0
 2980 00db 00       		.uleb128 0x11
 2981 00dc 11       		.uleb128 0x5
 2982 00dd 05       		.byte	0x0
 2983 00de 00       		.uleb128 0x3
 2984 00df 03       		.uleb128 0xe
 2985 00e0 0E       		.uleb128 0x3a
 2986 00e1 3A       		.uleb128 0xb
 2987 00e2 0B       		.uleb128 0x3b
 2988 00e3 3B       		.uleb128 0x5
 2989 00e4 05       		.uleb128 0x49
 2990 00e5 49       		.uleb128 0x13
 2991 00e6 13       		.uleb128 0x2
 2992 00e7 02       		.uleb128 0xa
 2993 00e8 0A       		.byte	0x0
 2994 00e9 00       		.byte	0x0
 2995 00ea 00       		.uleb128 0x12
 2996 00eb 12       		.uleb128 0x26
 2997 00ec 26       		.byte	0x0
 2998 00ed 00       		.uleb128 0x49
 2999 00ee 49       		.uleb128 0x13
 3000 00ef 13       		.byte	0x0
 3001 00f0 00       		.byte	0x0
 3002 00f1 00       		.uleb128 0x13
 3003 00f2 13       		.uleb128 0x26
 3004 00f3 26       		.byte	0x0
 3005 00f4 00       		.byte	0x0
 3006 00f5 00       		.byte	0x0
 3007 00f6 00       		.uleb128 0x14
 3008 00f7 14       		.uleb128 0x2e
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 75


 3009 00f8 2E       		.byte	0x1
 3010 00f9 01       		.uleb128 0x3f
 3011 00fa 3F       		.uleb128 0xc
 3012 00fb 0C       		.uleb128 0x3
 3013 00fc 03       		.uleb128 0xe
 3014 00fd 0E       		.uleb128 0x3a
 3015 00fe 3A       		.uleb128 0xb
 3016 00ff 0B       		.uleb128 0x3b
 3017 0100 3B       		.uleb128 0x5
 3018 0101 05       		.uleb128 0x27
 3019 0102 27       		.uleb128 0xc
 3020 0103 0C       		.uleb128 0x11
 3021 0104 11       		.uleb128 0x1
 3022 0105 01       		.uleb128 0x12
 3023 0106 12       		.uleb128 0x1
 3024 0107 01       		.uleb128 0x40
 3025 0108 40       		.uleb128 0x6
 3026 0109 06       		.uleb128 0x1
 3027 010a 01       		.uleb128 0x13
 3028 010b 13       		.byte	0x0
 3029 010c 00       		.byte	0x0
 3030 010d 00       		.uleb128 0x15
 3031 010e 15       		.uleb128 0x2e
 3032 010f 2E       		.byte	0x1
 3033 0110 01       		.uleb128 0x3
 3034 0111 03       		.uleb128 0xe
 3035 0112 0E       		.uleb128 0x3a
 3036 0113 3A       		.uleb128 0xb
 3037 0114 0B       		.uleb128 0x3b
 3038 0115 3B       		.uleb128 0x5
 3039 0116 05       		.uleb128 0x27
 3040 0117 27       		.uleb128 0xc
 3041 0118 0C       		.uleb128 0x11
 3042 0119 11       		.uleb128 0x1
 3043 011a 01       		.uleb128 0x12
 3044 011b 12       		.uleb128 0x1
 3045 011c 01       		.uleb128 0x40
 3046 011d 40       		.uleb128 0x6
 3047 011e 06       		.uleb128 0x1
 3048 011f 01       		.uleb128 0x13
 3049 0120 13       		.byte	0x0
 3050 0121 00       		.byte	0x0
 3051 0122 00       		.uleb128 0x16
 3052 0123 16       		.uleb128 0x2e
 3053 0124 2E       		.byte	0x1
 3054 0125 01       		.uleb128 0x3
 3055 0126 03       		.uleb128 0xe
 3056 0127 0E       		.uleb128 0x3a
 3057 0128 3A       		.uleb128 0xb
 3058 0129 0B       		.uleb128 0x3b
 3059 012a 3B       		.uleb128 0x5
 3060 012b 05       		.uleb128 0x27
 3061 012c 27       		.uleb128 0xc
 3062 012d 0C       		.uleb128 0x49
 3063 012e 49       		.uleb128 0x13
 3064 012f 13       		.uleb128 0x11
 3065 0130 11       		.uleb128 0x1
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 76


 3066 0131 01       		.uleb128 0x12
 3067 0132 12       		.uleb128 0x1
 3068 0133 01       		.uleb128 0x40
 3069 0134 40       		.uleb128 0x6
 3070 0135 06       		.uleb128 0x1
 3071 0136 01       		.uleb128 0x13
 3072 0137 13       		.byte	0x0
 3073 0138 00       		.byte	0x0
 3074 0139 00       		.uleb128 0x17
 3075 013a 17       		.uleb128 0x2e
 3076 013b 2E       		.byte	0x1
 3077 013c 01       		.uleb128 0x3f
 3078 013d 3F       		.uleb128 0xc
 3079 013e 0C       		.uleb128 0x3
 3080 013f 03       		.uleb128 0xe
 3081 0140 0E       		.uleb128 0x3a
 3082 0141 3A       		.uleb128 0xb
 3083 0142 0B       		.uleb128 0x3b
 3084 0143 3B       		.uleb128 0x5
 3085 0144 05       		.uleb128 0x27
 3086 0145 27       		.uleb128 0xc
 3087 0146 0C       		.uleb128 0x49
 3088 0147 49       		.uleb128 0x13
 3089 0148 13       		.uleb128 0x11
 3090 0149 11       		.uleb128 0x1
 3091 014a 01       		.uleb128 0x12
 3092 014b 12       		.uleb128 0x1
 3093 014c 01       		.uleb128 0x40
 3094 014d 40       		.uleb128 0x6
 3095 014e 06       		.byte	0x0
 3096 014f 00       		.byte	0x0
 3097 0150 00       		.byte	0x0
 3098 0151 00       		.section	.debug_pubnames,"",%progbits
 3099              		.4byte	0x123
 3100 0000 23010000 		.2byte	0x2
 3101 0004 0200     		.4byte	.Ldebug_info0
 3102 0006 00000000 		.4byte	0x754
 3103 000a 54070000 		.4byte	0x290
 3104 000e 90020000 		.ascii	"xQueueCreate\000"
 3105 0012 78517565 		.4byte	0x2e6
 3105      75654372 
 3105      65617465 
 3105      00
 3106 001f E6020000 		.ascii	"xQueueCreateMutex\000"
 3107 0023 78517565 		.4byte	0x314
 3107      75654372 
 3107      65617465 
 3107      4D757465 
 3107      7800
 3108 0035 14030000 		.ascii	"xQueueGenericSend\000"
 3109 0039 78517565 		.4byte	0x399
 3109      75654765 
 3109      6E657269 
 3109      6353656E 
 3109      6400
 3110 004b 99030000 		.ascii	"xQueueGenericSendFromISR\000"
 3111 004f 78517565 		.4byte	0x418
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 77


 3111      75654765 
 3111      6E657269 
 3111      6353656E 
 3111      6446726F 
 3112 0068 18040000 		.ascii	"xQueueGenericReceive\000"
 3113 006c 78517565 		.4byte	0x4a5
 3113      75654765 
 3113      6E657269 
 3113      63526563 
 3113      65697665 
 3114 0081 A5040000 		.ascii	"xQueueReceiveFromISR\000"
 3115 0085 78517565 		.4byte	0x50f
 3115      75655265 
 3115      63656976 
 3115      6546726F 
 3115      6D495352 
 3116 009a 0F050000 		.ascii	"uxQueueMessagesWaiting\000"
 3117 009e 75785175 		.4byte	0x551
 3117      6575654D 
 3117      65737361 
 3117      67657357 
 3117      61697469 
 3118 00b5 51050000 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 3119 00b9 75785175 		.4byte	0x58e
 3119      6575654D 
 3119      65737361 
 3119      67657357 
 3119      61697469 
 3120 00d7 8E050000 		.ascii	"vQueueDelete\000"
 3121 00db 76517565 		.4byte	0x6a1
 3121      75654465 
 3121      6C657465 
 3121      00
 3122 00e8 A1060000 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 3123 00ec 78517565 		.4byte	0x71a
 3123      75654973 
 3123      51756575 
 3123      65456D70 
 3123      74794672 
 3124 0106 1A070000 		.ascii	"xQueueIsQueueFullFromISR\000"
 3125 010a 78517565 		.4byte	0x0
 3125      75654973 
 3125      51756575 
 3125      6546756C 
 3125      6C46726F 
 3126 0123 00000000 		.section	.debug_aranges,"",%progbits
 3127              		.4byte	0x1c
 3128 0000 1C000000 		.2byte	0x2
 3129 0004 0200     		.4byte	.Ldebug_info0
 3130 0006 00000000 		.byte	0x4
 3131 000a 04       		.byte	0x0
 3132 000b 00       		.2byte	0x0
 3133 000c 0000     		.2byte	0x0
 3134 000e 0000     		.4byte	.Ltext0
 3135 0010 00000000 		.4byte	.Letext0-.Ltext0
 3136 0014 3C0C0000 		.4byte	0x0
 3137 0018 00000000 		.4byte	0x0
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 78


 3138 001c 00000000 		.section	.debug_str,"MS",%progbits,1
 3139              	.LASF47:
 3140              		.ascii	"xQueueCreate\000"
 3141 0000 78517565 	.LASF78:
 3141      75654372 
 3141      65617465 
 3141      00
 3142              		.ascii	"GNU C 4.3.3\000"
 3143 000d 474E5520 	.LASF26:
 3143      4320342E 
 3143      332E3300 
 3144              		.ascii	"xTIME_OUT\000"
 3145 0019 7854494D 	.LASF3:
 3145      455F4F55 
 3145      5400
 3146              		.ascii	"short int\000"
 3147 0023 73686F72 	.LASF10:
 3147      7420696E 
 3147      7400
 3148              		.ascii	"size_t\000"
 3149 002d 73697A65 	.LASF14:
 3149      5F7400
 3150              		.ascii	"pxPrevious\000"
 3151 0034 70785072 	.LASF13:
 3151      6576696F 
 3151      757300
 3152              		.ascii	"pxNext\000"
 3153 003f 70784E65 	.LASF69:
 3153      787400
 3154              		.ascii	"xPosition\000"
 3155 0046 78506F73 	.LASF66:
 3155      6974696F 
 3155      6E00
 3156              		.ascii	"uxQueueMessagesWaiting\000"
 3157 0050 75785175 	.LASF11:
 3157      6575654D 
 3157      65737361 
 3157      67657357 
 3157      61697469 
 3158              		.ascii	"portTickType\000"
 3159 0067 706F7274 	.LASF73:
 3159      5469636B 
 3159      54797065 
 3159      00
 3160              		.ascii	"xQueueIsQueueEmptyFromISR\000"
 3161 0074 78517565 	.LASF15:
 3161      75654973 
 3161      51756575 
 3161      65456D70 
 3161      74794672 
 3162              		.ascii	"pvOwner\000"
 3163 008e 70764F77 	.LASF62:
 3163      6E657200 
 3164              		.ascii	"xJustPeeking\000"
 3165 0096 784A7573 	.LASF53:
 3165      74506565 
 3165      6B696E67 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 79


 3165      00
 3166              		.ascii	"xCopyPosition\000"
 3167 00a3 78436F70 	.LASF55:
 3167      79506F73 
 3167      6974696F 
 3167      6E00
 3168              		.ascii	"xTimeOut\000"
 3169 00b1 7854696D 	.LASF64:
 3169      654F7574 
 3169      00
 3170              		.ascii	"xQueueReceiveFromISR\000"
 3171 00ba 78517565 	.LASF63:
 3171      75655265 
 3171      63656976 
 3171      6546726F 
 3171      6D495352 
 3172              		.ascii	"pcOriginalReadPosition\000"
 3173 00cf 70634F72 	.LASF75:
 3173      6967696E 
 3173      616C5265 
 3173      6164506F 
 3173      73697469 
 3174              		.ascii	"prvIsQueueFull\000"
 3175 00e6 70727649 	.LASF32:
 3175      73517565 
 3175      75654675 
 3175      6C6C00
 3176              		.ascii	"pcTail\000"
 3177 00f5 70635461 	.LASF49:
 3177      696C00
 3178              		.ascii	"xQueueGenericSend\000"
 3179 00fc 78517565 	.LASF24:
 3179      75654765 
 3179      6E657269 
 3179      6353656E 
 3179      6400
 3180              		.ascii	"xListEnd\000"
 3181 010e 784C6973 	.LASF61:
 3181      74456E64 
 3181      00
 3182              		.ascii	"pvBuffer\000"
 3183 0117 70764275 	.LASF52:
 3183      66666572 
 3183      00
 3184              		.ascii	"xTicksToWait\000"
 3185 0120 78546963 	.LASF6:
 3185      6B73546F 
 3185      57616974 
 3185      00
 3186              		.ascii	"long long int\000"
 3187 012d 6C6F6E67 	.LASF41:
 3187      206C6F6E 
 3187      6720696E 
 3187      7400
 3188              		.ascii	"xTxLock\000"
 3189 013b 7854784C 	.LASF25:
 3189      6F636B00 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 80


 3190              		.ascii	"xList\000"
 3191 0143 784C6973 	.LASF48:
 3191      7400
 3192              		.ascii	"xQueueCreateMutex\000"
 3193 0149 78517565 	.LASF38:
 3193      75654372 
 3193      65617465 
 3193      4D757465 
 3193      7800
 3194              		.ascii	"uxLength\000"
 3195 015b 75784C65 	.LASF8:
 3195      6E677468 
 3195      00
 3196              		.ascii	"long int\000"
 3197 0164 6C6F6E67 	.LASF21:
 3197      20696E74 
 3197      00
 3198              		.ascii	"xLIST\000"
 3199 016d 784C4953 	.LASF43:
 3199      5400
 3200              		.ascii	"xQueueHandle\000"
 3201 0173 78517565 	.LASF29:
 3201      75654861 
 3201      6E646C65 
 3201      00
 3202              		.ascii	"xTimeOutType\000"
 3203 0180 7854696D 	.LASF12:
 3203      654F7574 
 3203      54797065 
 3203      00
 3204              		.ascii	"xItemValue\000"
 3205 018d 78497465 	.LASF68:
 3205      6D56616C 
 3205      756500
 3206              		.ascii	"uxQueueMessagesWaitingFromISR\000"
 3207 0198 75785175 	.LASF42:
 3207      6575654D 
 3207      65737361 
 3207      67657357 
 3207      61697469 
 3208              		.ascii	"xQUEUE\000"
 3209 01b6 78515545 	.LASF39:
 3209      554500
 3210              		.ascii	"uxItemSize\000"
 3211 01bd 75784974 	.LASF45:
 3211      656D5369 
 3211      7A6500
 3212              		.ascii	"pxNewQueue\000"
 3213 01c8 70784E65 	.LASF18:
 3213      77517565 
 3213      756500
 3214              		.ascii	"xLIST_ITEM\000"
 3215 01d3 784C4953 	.LASF20:
 3215      545F4954 
 3215      454D00
 3216              		.ascii	"xMiniListItem\000"
 3217 01de 784D696E 	.LASF2:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 81


 3217      694C6973 
 3217      74497465 
 3217      6D00
 3218              		.ascii	"unsigned char\000"
 3219 01ec 756E7369 	.LASF28:
 3219      676E6564 
 3219      20636861 
 3219      7200
 3220              		.ascii	"xTimeOnEntering\000"
 3221 01fa 7854696D 	.LASF27:
 3221      654F6E45 
 3221      6E746572 
 3221      696E6700 
 3222              		.ascii	"xOverflowCount\000"
 3223 020a 784F7665 	.LASF1:
 3223      72666C6F 
 3223      77436F75 
 3223      6E7400
 3224              		.ascii	"signed char\000"
 3225 0219 7369676E 	.LASF71:
 3225      65642063 
 3225      68617200 
 3226              		.ascii	"prvCopyDataFromQueue\000"
 3227 0225 70727643 	.LASF7:
 3227      6F707944 
 3227      61746146 
 3227      726F6D51 
 3227      75657565 
 3228              		.ascii	"long long unsigned int\000"
 3229 023a 6C6F6E67 	.LASF31:
 3229      206C6F6E 
 3229      6720756E 
 3229      7369676E 
 3229      65642069 
 3230              		.ascii	"pcHead\000"
 3231 0251 70634865 	.LASF5:
 3231      616400
 3232              		.ascii	"unsigned int\000"
 3233 0258 756E7369 	.LASF79:
 3233      676E6564 
 3233      20696E74 
 3233      00
 3234              		.ascii	"SRC/RTOS/queue.c\000"
 3235 0265 5352432F 	.LASF16:
 3235      52544F53 
 3235      2F717565 
 3235      75652E63 
 3235      00
 3236              		.ascii	"pvContainer\000"
 3237 0276 7076436F 	.LASF80:
 3237      6E746169 
 3237      6E657200 
 3238              		.ascii	"E:\\Projekty\\ARM\\Eclipse\\AT91SAM7Sxxx_RTOS\000"
 3239 0282 453A5C50 	.LASF36:
 3239      726F6A65 
 3239      6B74795C 
 3239      41524D5C 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 82


 3239      45636C69 
 3240              		.ascii	"xTasksWaitingToReceive\000"
 3241 02ac 78546173 	.LASF46:
 3241      6B735761 
 3241      6974696E 
 3241      67546F52 
 3241      65636569 
 3242              		.ascii	"xQueueSizeInBytes\000"
 3243 02c3 78517565 	.LASF30:
 3243      75655369 
 3243      7A65496E 
 3243      42797465 
 3243      7300
 3244              		.ascii	"QueueDefinition\000"
 3245 02d5 51756575 	.LASF72:
 3245      65446566 
 3245      696E6974 
 3245      696F6E00 
 3246              		.ascii	"prvUnlockQueue\000"
 3247 02e5 70727655 	.LASF4:
 3247      6E6C6F63 
 3247      6B517565 
 3247      756500
 3248              		.ascii	"short unsigned int\000"
 3249 02f4 73686F72 	.LASF44:
 3249      7420756E 
 3249      7369676E 
 3249      65642069 
 3249      6E7400
 3250              		.ascii	"uxQueueLength\000"
 3251 0307 75785175 	.LASF50:
 3251      6575654C 
 3251      656E6774 
 3251      6800
 3252              		.ascii	"pxQueue\000"
 3253 0315 70785175 	.LASF56:
 3253      65756500 
 3254              		.ascii	"xQueueGenericSendFromISR\000"
 3255 031d 78517565 	.LASF9:
 3255      75654765 
 3255      6E657269 
 3255      6353656E 
 3255      6446726F 
 3256              		.ascii	"char\000"
 3257 0336 63686172 	.LASF33:
 3257      00
 3258              		.ascii	"pcWriteTo\000"
 3259 033b 70635772 	.LASF51:
 3259      69746554 
 3259      6F00
 3260              		.ascii	"pvItemToQueue\000"
 3261 0345 70764974 	.LASF77:
 3261      656D546F 
 3261      51756575 
 3261      6500
 3262              		.ascii	"xQueueIsQueueFullFromISR\000"
 3263 0353 78517565 	.LASF34:
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 83


 3263      75654973 
 3263      51756575 
 3263      6546756C 
 3263      6C46726F 
 3264              		.ascii	"pcReadFrom\000"
 3265 036c 70635265 	.LASF60:
 3265      61644672 
 3265      6F6D00
 3266              		.ascii	"xQueueGenericReceive\000"
 3267 0377 78517565 	.LASF54:
 3267      75654765 
 3267      6E657269 
 3267      63526563 
 3267      65697665 
 3268              		.ascii	"xEntryTimeSet\000"
 3269 038c 78456E74 	.LASF76:
 3269      72795469 
 3269      6D655365 
 3269      7400
 3270              		.ascii	"vQueueDelete\000"
 3271 039a 76517565 	.LASF67:
 3271      75654465 
 3271      6C657465 
 3271      00
 3272              		.ascii	"uxReturn\000"
 3273 03a7 75785265 	.LASF0:
 3273      7475726E 
 3273      00
 3274              		.ascii	"long unsigned int\000"
 3275 03b0 6C6F6E67 	.LASF74:
 3275      20756E73 
 3275      69676E65 
 3275      6420696E 
 3275      7400
 3276              		.ascii	"prvIsQueueEmpty\000"
 3277 03c2 70727649 	.LASF22:
 3277      73517565 
 3277      7565456D 
 3277      70747900 
 3278              		.ascii	"uxNumberOfItems\000"
 3279 03d2 75784E75 	.LASF17:
 3279      6D626572 
 3279      4F664974 
 3279      656D7300 
 3280              		.ascii	"xListItem\000"
 3281 03e2 784C6973 	.LASF70:
 3281      74497465 
 3281      6D00
 3282              		.ascii	"prvCopyDataToQueue\000"
 3283 03ec 70727643 	.LASF37:
 3283      6F707944 
 3283      61746154 
 3283      6F517565 
 3283      756500
 3284              		.ascii	"uxMessagesWaiting\000"
 3285 03ff 75784D65 	.LASF65:
 3285      73736167 
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 84


 3285      65735761 
 3285      6974696E 
 3285      6700
 3286              		.ascii	"pxTaskWoken\000"
 3287 0411 70785461 	.LASF40:
 3287      736B576F 
 3287      6B656E00 
 3288              		.ascii	"xRxLock\000"
 3289 041d 7852784C 	.LASF59:
 3289      6F636B00 
 3290              		.ascii	"uxSavedInterruptStatus\000"
 3291 0425 75785361 	.LASF58:
 3291      76656449 
 3291      6E746572 
 3291      72757074 
 3291      53746174 
 3292              		.ascii	"xReturn\000"
 3293 043c 78526574 	.LASF57:
 3293      75726E00 
 3294              		.ascii	"pxHigherPriorityTaskWoken\000"
 3295 0444 70784869 	.LASF35:
 3295      67686572 
 3295      5072696F 
 3295      72697479 
 3295      5461736B 
 3296              		.ascii	"xTasksWaitingToSend\000"
 3297 045e 78546173 	.LASF23:
 3297      6B735761 
 3297      6974696E 
 3297      67546F53 
 3297      656E6400 
 3298              		.ascii	"pxIndex\000"
 3299 0472 7078496E 	.LASF19:
 3299      64657800 
 3300              		.ascii	"xMINI_LIST_ITEM\000"
 3301 047a 784D494E 		.ident	"GCC: (GNU) 4.3.3"
 3301      495F4C49 
 3301      53545F49 
 3301      54454D00 
 3302              	...
ARM GAS  C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s 			page 85


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:37     .text:00000000 xQueueCreate
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:44     .text:00000000 $a
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:159    .text:00000154 xQueueCreateMutex
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:243    .text:0000022c xQueueGenericSend
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:883    .text:0000086c prvCopyDataToQueue
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1215   .text:00000bbc prvIsQueueFull
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1057   .text:00000a5c prvUnlockQueue
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:409    .text:000003e0 xQueueGenericSendFromISR
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:490    .text:000004b0 xQueueGenericReceive
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1001   .text:000009cc prvCopyDataFromQueue
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1154   .text:00000b4c prvIsQueueEmpty
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:717    .text:00000710 xQueueReceiveFromISR
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:800    .text:000007e4 uxQueueMessagesWaiting
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:831    .text:00000818 uxQueueMessagesWaitingFromISR
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:856    .text:0000083c vQueueDelete
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1188   .text:00000b8c xQueueIsQueueEmptyFromISR
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1251   .text:00000c04 xQueueIsQueueFullFromISR
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1280   .debug_frame:00000000 $d
C:\DOCUME~1\ZAQUAD~1\USTAWI~1\Temp/cccZkOgL.s:1568   .debug_loc:00000000 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vPortFree
vPortEnterCritical
xTaskRemoveFromEventList
vPortExitCritical
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
vTaskPriorityDisinherit
memcpy
vTaskMissedYield
